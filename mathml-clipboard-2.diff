# HG changeset patch
# Parent 7f6bd17ec5e2b587e2c8d5310645187f19cd244d
# User Frédéric Wang <fred.wang@free.fr>
Part 2: Implement copy operation for MathML and TeX. b=539506, r=?

diff --git a/content/base/public/nsIDocumentEncoder.idl b/content/base/public/nsIDocumentEncoder.idl
--- a/content/base/public/nsIDocumentEncoder.idl
+++ b/content/base/public/nsIDocumentEncoder.idl
@@ -30,17 +30,17 @@ interface nsIDocumentEncoderNodeFixup : 
    * @param [OUT] aSerializeCloneKids True if the document encoder should
    * apply recursive serialization to the children of the fixed up node
    * instead of the children of the original node.
    * @return The resulting fixed up node.
    */
   nsIDOMNode fixupNode(in nsIDOMNode aNode, out boolean aSerializeCloneKids);
 };
 
-[scriptable, uuid(c5cce872-2793-11e2-ac2d-0090f59acadc)]
+[scriptable, uuid(05573c5e-2794-11e2-8348-0090f59acadc)]
 interface nsIDocumentEncoder : nsISupports
 {
   // Output methods flag bits. There are a frightening number of these,
   // because everyone wants something a little bit different
    
 
   /** 
    * Output only the selection (as opposed to the whole document).
@@ -313,20 +313,32 @@ interface nsIDocumentEncoder : nsISuppor
    * @param [OUT] aInfoString The string where extra context info will
    *              be stored.
    * @return The document encoded as a string.
    * 
    */
   AString encodeToStringWithContext( out AString aContextString,
                                      out AString aInfoString);
 
+  /*
+   * Encode a <semantics> MathML fragment by picking an annotation child with
+   * the specified encoding.
+   * @param aEncoding the encoding to find.
+   *
+   * @return The annotation encoded as a string.
+   */
+  AString encodeMathMLAnnotationToString(in AString aEncoding,
+                                         in boolean aIsXML);
+
   /**
    * Set the fixup object associated with node persistence.
    * @param aFixup The fixup object.
    */
   void setNodeFixup(in nsIDocumentEncoderNodeFixup aFixup);
 
   /**
    * Determine whether the selection is inside a special context.
    * @param aIsPlainTextContext whether the selection is in a plain text context
+   * @param aIsMathMLContext whether the selection is in a MathML context
    */
-  void getContextParameters(out boolean aIsPlainTextContext);
+  void getContextParameters(out boolean aIsPlainTextContext,
+                            out boolean aIsMathMLContext);
 };
diff --git a/content/base/src/nsCopySupport.cpp b/content/base/src/nsCopySupport.cpp
--- a/content/base/src/nsCopySupport.cpp
+++ b/content/base/src/nsCopySupport.cpp
@@ -110,19 +110,20 @@ SelectionCopyHelper(nsISelection *aSel, 
 
   rv = docEncoder->SetSelection(aSel);
   if (NS_FAILED(rv)) 
     return rv;
 
   // If the selection is in a special context, the corresponding parameters
   // have been set by the call to nsHTMLCopyEncoder::SetSelection above.
   // Thus we can now retrieve these parameters.
-  bool bIsPlainTextContext = false;
+  bool bIsPlainTextContext = false, bIsMathMLContext = false;
 
-  rv = docEncoder->GetContextParameters(&bIsPlainTextContext);
+  rv = docEncoder->GetContextParameters(&bIsPlainTextContext,
+                                        &bIsMathMLContext);
   if (NS_FAILED(rv))
     return rv;
 
   bool bIsHTMLCopy = !bIsPlainTextContext;
 
   nsAutoString buffer, parents, info, textBuffer, plaintextBuffer;
 
   rv = docEncoder->EncodeToString(textBuffer);
diff --git a/content/base/src/nsDocumentEncoder.cpp b/content/base/src/nsDocumentEncoder.cpp
--- a/content/base/src/nsDocumentEncoder.cpp
+++ b/content/base/src/nsDocumentEncoder.cpp
@@ -48,16 +48,17 @@
 #include "nsTArray.h"
 #include "nsIFrame.h"
 #include "nsStringBuffer.h"
 #include "mozilla/dom/Element.h"
 #include "nsIEditorDocShell.h"
 #include "nsIEditor.h"
 #include "nsIHTMLEditor.h"
 #include "nsIDocShell.h"
+#include "nsMimeTypes.h"
 
 using namespace mozilla;
 using namespace mozilla::dom;
 
 nsresult NS_NewDomSelection(nsISelection **aDomSelection);
 
 enum nsRangeIterationDirection {
   kDirectionOut = -1,
@@ -1081,17 +1082,20 @@ nsDocumentEncoder::EncodeToString(nsAStr
       if (node != prevNode) {
         nsCOMPtr<nsINode> p;
         if (prevNode) {
           p = do_QueryInterface(prevNode);
           rv = SerializeNodeEnd(p, output);
           NS_ENSURE_SUCCESS(rv, rv);
         }
         nsCOMPtr<nsIContent> content = do_QueryInterface(node);
-        if (content && content->IsHTML(nsGkAtoms::tr)) {
+        if (content &&
+            (content->IsHTML(nsGkAtoms::tr) ||
+             content->IsMathML(nsGkAtoms::mtr_) ||
+             content->IsMathML(nsGkAtoms::mlabeledtr_))) {
           nsINode* n = content;
           if (!prevNode) {
             // Went from a non-<tr> to a <tr>
             mCommonAncestors.Clear();
             nsContentUtils::GetAncestors(n->GetParentNode(), mCommonAncestors);
             rv = SerializeRangeContextStart(mCommonAncestors, output);
             NS_ENSURE_SUCCESS(rv, rv);
             // Don't let SerializeRangeToString serialize the context again
@@ -1221,24 +1225,33 @@ NS_IMETHODIMP
 nsDocumentEncoder::EncodeToStringWithContext(nsAString& aContextString,
                                              nsAString& aInfoString,
                                              nsAString& aEncodedString)
 {
   return NS_ERROR_NOT_IMPLEMENTED;
 }
 
 NS_IMETHODIMP
+nsDocumentEncoder::EncodeMathMLAnnotationToString(const nsAString& aEncoding,
+                                                  bool aIsXML,
+                                                  nsAString& aEncodedString)
+{
+  return NS_ERROR_NOT_IMPLEMENTED;
+}
+
+NS_IMETHODIMP
 nsDocumentEncoder::SetNodeFixup(nsIDocumentEncoderNodeFixup *aFixup)
 {
   mNodeFixup = aFixup;
   return NS_OK;
 }
 
 NS_IMETHODIMP
-nsDocumentEncoder::GetContextParameters(bool* aIsPlainTextContext)
+nsDocumentEncoder::GetContextParameters(bool* aIsPlainTextContext,
+                                        bool* aIsMathMLContext)
 {
   return NS_ERROR_NOT_IMPLEMENTED;
 }
 
 nsresult NS_NewTextEncoder(nsIDocumentEncoder** aResult); // make mac compiler happy
 
 nsresult
 NS_NewTextEncoder(nsIDocumentEncoder** aResult)
@@ -1259,17 +1272,21 @@ public:
 
   NS_IMETHOD Init(nsIDOMDocument* aDocument, const nsAString& aMimeType, uint32_t aFlags);
 
   // overridden methods from nsDocumentEncoder
   NS_IMETHOD SetSelection(nsISelection* aSelection);
   NS_IMETHOD EncodeToStringWithContext(nsAString& aContextString,
                                        nsAString& aInfoString,
                                        nsAString& aEncodedString);
-  NS_IMETHOD GetContextParameters(bool* aIsPlainTextContext);
+  NS_IMETHOD EncodeMathMLAnnotationToString(const nsAString& aEncoding,
+                                            bool aIsXML,
+                                            nsAString& aEncodedString);
+  NS_IMETHOD GetContextParameters(bool* aIsPlainTextContext,
+                                  bool* aIsMathMLContext);
 
 protected:
 
   enum Endpoint
   {
     kStart,
     kEnd
   };
@@ -1285,38 +1302,43 @@ protected:
   nsresult GetNodeLocation(nsIDOMNode *inChild, nsCOMPtr<nsIDOMNode> *outParent, int32_t *outOffset);
   bool IsRoot(nsIDOMNode* aNode);
   bool IsFirstNode(nsIDOMNode *aNode);
   bool IsLastNode(nsIDOMNode *aNode);
   bool IsEmptyTextContent(nsIDOMNode* aNode);
   virtual bool IncludeInContext(nsINode *aNode);
   virtual int32_t
   GetImmediateContextCount(const nsTArray<nsINode*>& aAncestorArray);
+  nsresult SerializeMathRoot(nsINode* aMathRoot,
+                             nsAString& aEncodedString);
 
   bool mIsTextWidget;
+  bool mIsMathMLContext;
 };
 
 nsHTMLCopyEncoder::nsHTMLCopyEncoder()
 {
   mIsTextWidget = false;
+  mIsMathMLContext = false;
 }
 
 nsHTMLCopyEncoder::~nsHTMLCopyEncoder()
 {
 }
 
 NS_IMETHODIMP
 nsHTMLCopyEncoder::Init(nsIDOMDocument* aDocument,
                         const nsAString& aMimeType,
                         uint32_t aFlags)
 {
   if (!aDocument)
     return NS_ERROR_INVALID_ARG;
 
   mIsTextWidget = false;
+  mIsMathMLContext = false;
   Initialize();
 
   mIsCopying = true;
   mDocument = do_QueryInterface(aDocument);
   NS_ENSURE_TRUE(mDocument, NS_ERROR_FAILURE);
 
   // Hack, hack! Traditionally, the caller passes text/unicode, which is
   // treated as "guess text/html or text/plain" in this context. (It has a
@@ -1336,34 +1358,33 @@ nsHTMLCopyEncoder::Init(nsIDOMDocument* 
     mFlags |= OutputNoScriptContent;
 
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsHTMLCopyEncoder::SetSelection(nsISelection* aSelection)
 {
-  // check for text widgets: we need to recognize these so that
-  // we don't tweak the selection to be outside of the magic
-  // div that ender-lite text widgets are embedded in.
-  
   if (!aSelection) 
     return NS_ERROR_NULL_POINTER;
   
   nsCOMPtr<nsIDOMRange> range;
   nsCOMPtr<nsIDOMNode> commonParent;
   int32_t count = 0;
 
   nsresult rv = aSelection->GetRangeCount(&count);
   NS_ENSURE_SUCCESS(rv, rv);
 
   // if selection is uninitialized return
   if (!count)
     return NS_ERROR_FAILURE;
   
+  // check for text widgets: we need to recognize these so that
+  // we don't tweak the selection to be outside of the magic
+  // div that ender-lite text widgets are embedded in.
   // we'll just use the common parent of the first range.  Implicit assumption
   // here that multi-range selections are table cell selections, in which case
   // the common parent is somewhere in the table and we don't really care where.
   rv = aSelection->GetRangeAt(0, getter_AddRefs(range));
   NS_ENSURE_SUCCESS(rv, rv);
   if (!range)
     return NS_ERROR_NULL_POINTER;
   range->GetCommonAncestorContainer(getter_AddRefs(commonParent));
@@ -1409,16 +1430,82 @@ nsHTMLCopyEncoder::SetSelection(nsISelec
   // normalize selection if we are not in a widget
   if (mIsTextWidget) 
   {
     mSelection = aSelection;
     mMimeType.AssignLiteral("text/plain");
     return NS_OK;
   }
   
+  // For simplicity, we only consider single-range MathML selection. We handle
+  // the following cases:
+  //
+  //   1) Selection inside the <math>: <math>...|...|...</math>
+  //   2) Endpoints inside & outside the <math>: |<math>...|...</math>
+  //   3) Whole <math> selected: |<math>...</math>|
+  //
+  // Still, it remains difficult to select the whole <math> element with the
+  // mouse.
+  // XXXfredw Add a copy formula command?
+  if (count == 1) {
+    nsCOMPtr<nsIDOMRange> myRange;
+    range->CloneRange(getter_AddRefs(myRange));
+    NS_ENSURE_TRUE(myRange, NS_ERROR_FAILURE);
+
+    // Get the nodes and offsets describing the selection endpoints
+    nsCOMPtr<nsIDOMNode> startNode, endNode;
+    int32_t startOffset, endOffset;
+    rv = myRange->GetStartContainer(getter_AddRefs(startNode));
+    NS_ENSURE_SUCCESS(rv, rv);
+    rv = myRange->GetEndContainer(getter_AddRefs(endNode));
+    NS_ENSURE_SUCCESS(rv, rv);
+    rv = myRange->GetStartOffset(&startOffset);
+    NS_ENSURE_SUCCESS(rv, rv);
+    rv = myRange->GetEndOffset(&endOffset);
+    NS_ENSURE_SUCCESS(rv, rv);
+
+    // Reduce from 2) & 3) to 1). 
+    nsCOMPtr<nsIDOMNode> node; nsCOMPtr<nsIContent> content;
+    node = GetChildAt(startNode, startOffset);
+    content = do_QueryInterface(node);
+    if (content && content->IsMathML(nsGkAtoms::math)) {
+      startNode = node;
+      startOffset = 0;
+      myRange->SetStart(startNode, startOffset);
+    }
+    if (endOffset > 0) {
+      node = GetChildAt(endNode, endOffset-1);
+      content = do_QueryInterface(node);
+      if (content && content->IsMathML(nsGkAtoms::math)) {
+        endNode = node;
+        endOffset = content->Length();
+        myRange->SetEnd(endNode, endOffset);
+      }
+    }
+    
+    // Now, verify if we are in case 1)
+    myRange->GetCommonAncestorContainer(getter_AddRefs(commonParent));
+    content = do_QueryInterface(commonParent);
+    if (content && content->IsMathML()) {
+      // The selection strictly included in a MathML subtree.
+      // Set mIsMathMLContext now, so that this inclusion will still hold after
+      // the PromoteCall below.
+      mIsMathMLContext = true;
+
+      NS_NewDomSelection(getter_AddRefs(mSelection));
+      NS_ENSURE_TRUE(mSelection, NS_ERROR_FAILURE);
+
+      rv = PromoteRange(myRange);
+      NS_ENSURE_SUCCESS(rv, rv);
+    
+      rv = mSelection->AddRange(myRange);
+      return rv;
+    }
+  }
+
   // there's no Clone() for selection! fix...
   //nsresult rv = aSelection->Clone(getter_AddRefs(mSelection);
   //NS_ENSURE_SUCCESS(rv, rv);
   NS_NewDomSelection(getter_AddRefs(mSelection));
   NS_ENSURE_TRUE(mSelection, NS_ERROR_FAILURE);
   nsCOMPtr<nsISelectionPrivate> privSelection( do_QueryInterface(aSelection) );
   NS_ENSURE_TRUE(privSelection, NS_ERROR_FAILURE);
   
@@ -1459,16 +1546,38 @@ nsHTMLCopyEncoder::SetSelection(nsISelec
 NS_IMETHODIMP
 nsHTMLCopyEncoder::EncodeToStringWithContext(nsAString& aContextString,
                                              nsAString& aInfoString,
                                              nsAString& aEncodedString)
 {
   nsresult rv = EncodeToString(aEncodedString);
   NS_ENSURE_SUCCESS(rv, rv);
 
+  if (mIsMathMLContext) {
+    // Serialize the <math> root to make an actual MathML document
+    int32_t len = mCommonAncestors.Length();
+
+    for (int32_t i = 0; i < len; i++) {
+
+      nsINode *node = mCommonAncestors.ElementAt(i);
+      if (!node) break;
+
+      nsCOMPtr<nsIContent> content(do_QueryInterface(node));
+      if (content && content->IsMathML(nsGkAtoms::math)) {
+        rv = SerializeMathRoot(node, aEncodedString);
+        NS_ENSURE_SUCCESS(rv, rv);
+        break;
+      }
+    }
+
+    // Do not encode any context info or range hints if we are in a MathML
+    // context.
+    return NS_OK;
+  }
+
   // do not encode any context info or range hints if we are in a text widget.
   if (mIsTextWidget) return NS_OK;
 
   // now encode common ancestors into aContextString.  Note that the common ancestors
   // will be for the last range in the selection in the case of multirange selections.
   // encoding ancestors every range in a multirange selection in a way that could be 
   // understood by the paste code would be a lot more work to do.  As a practical matter,
   // selections are single range, and the ones that aren't are table cell selections
@@ -1522,16 +1631,25 @@ nsHTMLCopyEncoder::IncludeInContext(nsIN
 {
   nsCOMPtr<nsIContent> content(do_QueryInterface(aNode));
 
   if (!content)
     return false;
 
   nsIAtom *tag = content->Tag();
 
+  if (mIsMathMLContext) {
+    // Include the token elements
+    return (tag == nsGkAtoms::mi_ ||
+            tag == nsGkAtoms::mn_ ||
+            tag == nsGkAtoms::mo_ ||
+            tag == nsGkAtoms::ms_ ||
+            tag == nsGkAtoms::mtext_);
+  }
+
   return (tag == nsGkAtoms::b        ||
           tag == nsGkAtoms::i        ||
           tag == nsGkAtoms::u        ||
           tag == nsGkAtoms::a        ||
           tag == nsGkAtoms::tt       ||
           tag == nsGkAtoms::s        ||
           tag == nsGkAtoms::big      ||
           tag == nsGkAtoms::small    ||
@@ -1892,16 +2010,20 @@ bool
 nsHTMLCopyEncoder::IsRoot(nsIDOMNode* aNode)
 {
   nsCOMPtr<nsIContent> content = do_QueryInterface(aNode);
   if (content)
   {
     if (mIsTextWidget) 
       return (IsTag(content, nsGkAtoms::div));
 
+    if (mIsMathMLContext)
+      return (IsTag(content, nsGkAtoms::math) ||
+              IsTag(content, nsGkAtoms::mtd_));
+
     return (IsTag(content, nsGkAtoms::body) ||
             IsTag(content, nsGkAtoms::td)   ||
             IsTag(content, nsGkAtoms::th));
   }
   return false;
 }
 
 bool
@@ -2014,26 +2136,163 @@ nsHTMLCopyEncoder::GetImmediateContextCo
 {
   int32_t i = aAncestorArray.Length(), j = 0;
   while (j < i) {
     nsINode *node = aAncestorArray.ElementAt(j);
     if (!node) {
       break;
     }
     nsCOMPtr<nsIContent> content(do_QueryInterface(node));
-    if (!content || !content->IsHTML() || (content->Tag() != nsGkAtoms::tr    &&
-                                           content->Tag() != nsGkAtoms::thead &&
-                                           content->Tag() != nsGkAtoms::tbody &&
-                                           content->Tag() != nsGkAtoms::tfoot &&
-                                           content->Tag() != nsGkAtoms::table)) {
+    if (!content) {
       break;
     }
+    if (mIsMathMLContext) {
+      if (!content->IsMathML() || (content->Tag() != nsGkAtoms::mtr_ &&
+                                   content->Tag() != nsGkAtoms::mlabeledtr_ &&
+                                   content->Tag() != nsGkAtoms::mtable_)) {
+        break;
+      }
+    } else {
+      if (!content->IsHTML() || (content->Tag() != nsGkAtoms::tr    &&
+                                 content->Tag() != nsGkAtoms::thead &&
+                                 content->Tag() != nsGkAtoms::tbody &&
+                                 content->Tag() != nsGkAtoms::tfoot &&
+                                 content->Tag() != nsGkAtoms::table)) {
+        break;
+      }
+    }
     ++j;
   }
   return j;
 }
 
 NS_IMETHODIMP
-nsHTMLCopyEncoder::GetContextParameters(bool* aIsPlainTextContext)
+nsHTMLCopyEncoder::GetContextParameters(bool* aIsPlainTextContext,
+                                        bool* aIsMathMLContext)
 {
   *aIsPlainTextContext = mIsTextWidget;
+  *aIsMathMLContext = mIsMathMLContext;
   return NS_OK;
 }
+
+NS_IMETHODIMP
+nsHTMLCopyEncoder::EncodeMathMLAnnotationToString(const nsAString& aEncoding,
+                                                  bool aIsXML,
+                                                  nsAString& aEncodedString)
+{
+  NS_ASSERTION(mIsMathMLContext, "This should be called in a MathML context");
+
+  if (!mDocument || !mSelection)
+    return NS_ERROR_NOT_INITIALIZED;
+
+  int32_t count = 0;
+  nsresult rv = mSelection->GetRangeCount(&count);
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  // We only consider single range selection
+  if (count != 1)
+    return NS_ERROR_FAILURE;
+
+  aEncodedString.Truncate();
+  
+  nsCOMPtr<nsIDOMRange> range;
+  rv = mSelection->GetRangeAt(0, getter_AddRefs(range));
+  NS_ENSURE_SUCCESS(rv, rv);
+  if (!range)
+    return NS_ERROR_NULL_POINTER;
+
+  nsCOMPtr<nsIDOMNode> commonParent;
+  range->GetCommonAncestorContainer(getter_AddRefs(commonParent));
+
+  nsCOMPtr<nsIContent> content(do_QueryInterface(commonParent));
+
+  // Try to find a <semantics> ancestor
+  bool found;
+  for (found = false ; content && content->IsMathML();
+       content = content->GetParent()) {
+    if (content->Tag() == nsGkAtoms::semantics_) {
+      found = true;
+      break;
+    }
+  }
+  if (!found)
+    return NS_OK;
+
+  // Now look at the children of the <semantics> to see if there is an
+  // annotation with the desired encoding and serialize it.
+  nsIAtom* annotationElement =
+    aIsXML ? nsGkAtoms::annotation_xml_ : nsGkAtoms::annotation_;
+
+  for (content = content->GetFirstChild(); content;
+       content = content->GetNextSibling()) {
+    if (content->IsMathML(annotationElement)) {
+      // Only consider "encoding" and don't bother with the annotation key
+      nsAutoString value;
+      content->GetAttr(kNameSpaceID_None, nsGkAtoms::encoding, value);
+      if (value.Equals(aEncoding)) break;
+      if (aIsXML) {
+        // Handle MathML2 encoding values for backward compatibility. 
+        if ((value.EqualsLiteral("MathML-Presentation") &&
+             aEncoding.EqualsLiteral(APPLICATION_MATHML_PRESENTATION_XML)) ||
+            (value.EqualsLiteral("MathML-Content") &&
+             aEncoding.EqualsLiteral(APPLICATION_MATHML_CONTENT_XML))) break;
+      }
+    }
+  }
+
+  if (!content)
+    return NS_OK;
+
+  if (aIsXML) {
+    // Serialize the node content.
+    // Set mSelection to nullptr so that EncodeToString can serialize mNode,
+    // but put it back to its old value afterward so that one can do
+    // several consecutive calls to EncodeMathMLAnnotationToString
+    nsCOMPtr<nsISelection> oldSelection = mSelection;
+    mSelection = nullptr;
+    mRange = nullptr;
+    mNode = do_QueryInterface(content);
+    EncodeToString(aEncodedString);
+    mSelection = oldSelection;
+
+    // Serialize the <math> root to make an actual MathML document
+    for ( ; content && content->IsMathML(); content = content->GetParent()) {
+      if (content->Tag() == nsGkAtoms::math) {
+        nsCOMPtr<nsIContent> math(do_QueryInterface(content));
+        rv = SerializeMathRoot(math, aEncodedString);
+        return rv;
+      }
+    }
+    return NS_ERROR_FAILURE;
+  }
+
+  // Get the node content as text
+  nsContentUtils::GetNodeTextContent(content, false, aEncodedString);
+  return NS_OK;
+}
+
+nsresult
+nsHTMLCopyEncoder::SerializeMathRoot(nsINode* aMathRoot,
+                                     nsAString& aEncodedString)
+{
+
+  nsAutoString aStartMathString;
+  nsresult rv = SerializeNodeStart(aMathRoot, 0, -1, aStartMathString);
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  // The MathML REC says that we must declare the MathML namespace on
+  // the root <math> element when transferring.
+  // See http://www.w3.org/TR/MathML3/chapter6.html#world-int-transf-flavors
+  nsCOMPtr<nsIContent> content(do_QueryInterface(aMathRoot));
+  if (!content->HasAttr(kNameSpaceID_None, nsGkAtoms::xmlns)) {
+    int32_t end = aStartMathString.RFindChar('>');
+    NS_ENSURE_TRUE(end >= 0, NS_ERROR_FAILURE);
+    aStartMathString.SetLength(end);
+    aStartMathString.
+      AppendLiteral(" xmlns=\"http://www.w3.org/1998/Math/MathML\">");
+  }
+
+  aEncodedString.Insert(aStartMathString, 0);
+  rv = SerializeNodeEnd(aMathRoot, aEncodedString);
+  return rv;
+
+  return NS_ERROR_FAILURE;
+}
diff --git a/netwerk/mime/nsMimeTypes.h b/netwerk/mime/nsMimeTypes.h
--- a/netwerk/mime/nsMimeTypes.h
+++ b/netwerk/mime/nsMimeTypes.h
@@ -64,16 +64,19 @@
 #define APPLICATION_JAVAARCHIVE             "application/java-archive"
 #define APPLICATION_MARIMBA                 "application/marimba"
 #define APPLICATION_XMARIMBA                "application/x-marimba"
 #define APPLICATION_XPINSTALL               "application/x-xpinstall"
 #define APPLICATION_XML                     "application/xml"
 #define APPLICATION_XHTML_XML               "application/xhtml+xml"
 #define APPLICATION_XSLT_XML                "application/xslt+xml"
 #define APPLICATION_MATHML_XML              "application/mathml+xml"
+#define APPLICATION_MATHML_PRESENTATION_XML "application/mathml-presentation+xml"
+#define APPLICATION_MATHML_CONTENT_XML      "application/mathml-content+xml"
+#define APPLICATION_TEX                     "application/x-tex"
 #define APPLICATION_RDF_XML                 "application/rdf+xml"
 
 #define AUDIO_BASIC                         "audio/basic"
 #define AUDIO_OGG                           "audio/ogg"
 #define AUDIO_WAV                           "audio/x-wav"
 #define AUDIO_WEBM                          "audio/webm"
 #define AUDIO_MP3                           "audio/mpeg"
 
