# HG changeset patch
# Parent 0cadbf636d17c571dee3148a337f86955f4ad785
# User Jonathan Hage <hage.jonathan@gmail.com>
Merge sub and sup in subsup

diff --git a/layout/base/nsCSSFrameConstructor.cpp b/layout/base/nsCSSFrameConstructor.cpp
--- a/layout/base/nsCSSFrameConstructor.cpp
+++ b/layout/base/nsCSSFrameConstructor.cpp
@@ -4654,18 +4654,18 @@ nsCSSFrameConstructor::FindMathMLData(El
 
   static const FrameConstructionDataByTag sMathMLData[] = {
     SIMPLE_MATHML_CREATE(mi_, NS_NewMathMLTokenFrame),
     SIMPLE_MATHML_CREATE(mn_, NS_NewMathMLTokenFrame),
     SIMPLE_MATHML_CREATE(ms_, NS_NewMathMLTokenFrame),
     SIMPLE_MATHML_CREATE(mtext_, NS_NewMathMLTokenFrame),
     SIMPLE_MATHML_CREATE(mo_, NS_NewMathMLmoFrame),
     SIMPLE_MATHML_CREATE(mfrac_, NS_NewMathMLmfracFrame),
-    SIMPLE_MATHML_CREATE(msup_, NS_NewMathMLmsupFrame),
-    SIMPLE_MATHML_CREATE(msub_, NS_NewMathMLmsubFrame),
+    SIMPLE_MATHML_CREATE(msup_, NS_NewMathMLmsubsupFrame),
+    SIMPLE_MATHML_CREATE(msub_, NS_NewMathMLmsubsupFrame),
     SIMPLE_MATHML_CREATE(msubsup_, NS_NewMathMLmsubsupFrame),
     SIMPLE_MATHML_CREATE(munder_, NS_NewMathMLmunderoverFrame),
     SIMPLE_MATHML_CREATE(mover_, NS_NewMathMLmunderoverFrame),
     SIMPLE_MATHML_CREATE(munderover_, NS_NewMathMLmunderoverFrame),
     SIMPLE_MATHML_CREATE(mphantom_, NS_NewMathMLmphantomFrame),
     SIMPLE_MATHML_CREATE(mpadded_, NS_NewMathMLmpaddedFrame),
     SIMPLE_MATHML_CREATE(mspace_, NS_NewMathMLmspaceFrame),
     SIMPLE_MATHML_CREATE(none, NS_NewMathMLmspaceFrame),
diff --git a/layout/mathml/Makefile.in b/layout/mathml/Makefile.in
--- a/layout/mathml/Makefile.in
+++ b/layout/mathml/Makefile.in
@@ -66,18 +66,16 @@ CPPSRCS =         nsMathMLChar.cpp		    
                   nsMathMLForeignFrameWrapper.cpp		\
                   nsMathMLOperators.cpp \
                   nsMathMLTokenFrame.cpp		\
                   nsMathMLmoFrame.cpp			\
                   nsMathMLmrowFrame.cpp		        \
                   nsMathMLmphantomFrame.cpp		\
                   nsMathMLmfencedFrame.cpp		\
                   nsMathMLmfracFrame.cpp		\
-                  nsMathMLmsupFrame.cpp			\
-                  nsMathMLmsubFrame.cpp			\
                   nsMathMLmsubsupFrame.cpp		\
                   nsMathMLmmultiscriptsFrame.cpp	\
                   nsMathMLmtableFrame.cpp		\
                   nsMathMLmunderoverFrame.cpp		\
                   nsMathMLmpaddedFrame.cpp		\
                   nsMathMLmspaceFrame.cpp		\
                   nsMathMLmstyleFrame.cpp		\
                   nsMathMLmsqrtFrame.cpp		\
diff --git a/layout/mathml/nsMathMLParts.h b/layout/mathml/nsMathMLParts.h
--- a/layout/mathml/nsMathMLParts.h
+++ b/layout/mathml/nsMathMLParts.h
@@ -48,18 +48,16 @@ nsIFrame* NS_NewMathMLTokenFrame(nsIPres
 nsIFrame* NS_NewMathMLmoFrame(nsIPresShell* aPresShell, nsStyleContext* aContext);
 nsIFrame* NS_NewMathMLmrowFrame(nsIPresShell* aPresShell, nsStyleContext* aContext);
 nsIFrame* NS_NewMathMLmphantomFrame(nsIPresShell* aPresShell, nsStyleContext* aContext);
 nsIFrame* NS_NewMathMLmpaddedFrame(nsIPresShell* aPresShell, nsStyleContext* aContext);
 nsIFrame* NS_NewMathMLmspaceFrame(nsIPresShell* aPresShell, nsStyleContext* aContext);
 nsIFrame* NS_NewMathMLmsFrame(nsIPresShell* aPresShell, nsStyleContext* aContext);
 nsIFrame* NS_NewMathMLmfencedFrame(nsIPresShell* aPresShell, nsStyleContext* aContext);
 nsIFrame* NS_NewMathMLmfracFrame(nsIPresShell* aPresShell, nsStyleContext* aContext);
-nsIFrame* NS_NewMathMLmsubFrame(nsIPresShell* aPresShell, nsStyleContext* aContext);
-nsIFrame* NS_NewMathMLmsupFrame(nsIPresShell* aPresShell, nsStyleContext* aContext);
 nsIFrame* NS_NewMathMLmsubsupFrame(nsIPresShell* aPresShell, nsStyleContext* aContext);
 nsIFrame* NS_NewMathMLmunderoverFrame(nsIPresShell* aPresShell, nsStyleContext* aContext);
 nsIFrame* NS_NewMathMLmmultiscriptsFrame(nsIPresShell* aPresShell, nsStyleContext* aContext);
 nsIFrame* NS_NewMathMLmstyleFrame(nsIPresShell* aPresShell, nsStyleContext* aContext);
 nsIFrame* NS_NewMathMLmtableOuterFrame(nsIPresShell* aPresShell, nsStyleContext* aContext);
 nsIFrame* NS_NewMathMLmtableFrame(nsIPresShell* aPresShell, nsStyleContext* aContext);
 nsIFrame* NS_NewMathMLmtrFrame(nsIPresShell* aPresShell, nsStyleContext* aContext);
 nsIFrame* NS_NewMathMLmtdFrame(nsIPresShell* aPresShell, nsStyleContext* aContext);
diff --git a/layout/mathml/nsMathMLmsubFrame.cpp b/layout/mathml/nsMathMLmsubFrame.cpp
deleted file mode 100644
--- a/layout/mathml/nsMathMLmsubFrame.cpp
+++ /dev/null
@@ -1,215 +0,0 @@
-/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* ***** BEGIN LICENSE BLOCK *****
- * Version: MPL 1.1/GPL 2.0/LGPL 2.1
- *
- * The contents of this file are subject to the Mozilla Public License Version
- * 1.1 (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
- * http://www.mozilla.org/MPL/
- *
- * Software distributed under the License is distributed on an "AS IS" basis,
- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- * for the specific language governing rights and limitations under the
- * License.
- *
- * The Original Code is Mozilla MathML Project.
- *
- * The Initial Developer of the Original Code is
- * The University Of Queensland.
- * Portions created by the Initial Developer are Copyright (C) 1999
- * the Initial Developer. All Rights Reserved.
- *
- * Contributor(s):
- *   Roger B. Sidje <rbs@maths.uq.edu.au>
- *   David J. Fiddes <D.J.Fiddes@hw.ac.uk>
- *   Shyjan Mahamud <mahamud@cs.cmu.edu> (added TeX rendering rules)
- *
- * Alternatively, the contents of this file may be used under the terms of
- * either of the GNU General Public License Version 2 or later (the "GPL"),
- * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
- * in which case the provisions of the GPL or the LGPL are applicable instead
- * of those above. If you wish to allow use of your version of this file only
- * under the terms of either the GPL or the LGPL, and not to allow others to
- * use your version of this file under the terms of the MPL, indicate your
- * decision by deleting the provisions above and replace them with the notice
- * and other provisions required by the GPL or the LGPL. If you do not delete
- * the provisions above, a recipient may use your version of this file under
- * the terms of any one of the MPL, the GPL or the LGPL.
- *
- * ***** END LICENSE BLOCK ***** */
-
-
-#include "nsCOMPtr.h"
-#include "nsFrame.h"
-#include "nsPresContext.h"
-#include "nsStyleContext.h"
-#include "nsStyleConsts.h"
-
-#include "nsMathMLmsubFrame.h"
-
-//
-// <msub> -- attach a subscript to a base - implementation
-//
-
-nsIFrame*
-NS_NewMathMLmsubFrame(nsIPresShell* aPresShell, nsStyleContext* aContext)
-{
-  return new (aPresShell) nsMathMLmsubFrame(aContext);
-}
-
-NS_IMPL_FRAMEARENA_HELPERS(nsMathMLmsubFrame)
-
-nsMathMLmsubFrame::~nsMathMLmsubFrame()
-{
-}
-
-NS_IMETHODIMP
-nsMathMLmsubFrame::TransmitAutomaticData()
-{
-  // if our base is an embellished operator, let its state bubble to us
-  mPresentationData.baseFrame = mFrames.FirstChild();
-  GetEmbellishDataFrom(mPresentationData.baseFrame, mEmbellishData);
-
-  // 1. The REC says:
-  // The <msub> element increments scriptlevel by 1, and sets displaystyle to
-  // "false", within subscript, but leaves both attributes unchanged within base.
-  // 2. The TeXbook (Ch 17. p.141) says the subscript is compressed
-  UpdatePresentationDataFromChildAt(1, -1,
-    ~NS_MATHML_DISPLAYSTYLE | NS_MATHML_COMPRESSED,
-     NS_MATHML_DISPLAYSTYLE | NS_MATHML_COMPRESSED);
-
-  return NS_OK;
-}
-
-/* virtual */ nsresult
-nsMathMLmsubFrame::Place (nsRenderingContext& aRenderingContext,
-                          PRBool               aPlaceOrigin,
-                          nsHTMLReflowMetrics& aDesiredSize)
-{
-  // extra spacing after sup/subscript
-  nscoord scriptSpace = nsPresContext::CSSPointsToAppUnits(0.5f); // 0.5pt as in plain TeX
-
-  // check if the subscriptshift attribute is there
-  nscoord subScriptShift = 0;
-  nsAutoString value;
-  GetAttribute(mContent, mPresentationData.mstyle,
-               nsGkAtoms::subscriptshift_, value);
-  if (!value.IsEmpty()) {
-    nsCSSValue cssValue;
-    if (ParseNumericValue(value, cssValue) && cssValue.IsLengthUnit()) {
-      subScriptShift = CalcLength(PresContext(), mStyleContext, cssValue);
-    }
-  }
-
-  return nsMathMLmsubFrame::PlaceSubScript(PresContext(), 
-                                           aRenderingContext,
-                                           aPlaceOrigin,
-                                           aDesiredSize,
-                                           this,
-                                           subScriptShift,
-                                           scriptSpace);
-}
-
-// exported routine that both munder and msub share.
-// munder uses this when movablelimits is set.
-nsresult
-nsMathMLmsubFrame::PlaceSubScript (nsPresContext*      aPresContext,
-                                   nsRenderingContext& aRenderingContext,
-                                   PRBool               aPlaceOrigin,
-                                   nsHTMLReflowMetrics& aDesiredSize,
-                                   nsMathMLContainerFrame* aFrame,
-                                   nscoord              aUserSubScriptShift,
-                                   nscoord              aScriptSpace)
-{
-  // force the scriptSpace to be atleast 1 pixel 
-  aScriptSpace = NS_MAX(nsPresContext::CSSPixelsToAppUnits(1), aScriptSpace);
-
-  ////////////////////////////////////
-  // Get the children's desired sizes
-
-  nsBoundingMetrics bmBase, bmSubScript;
-  nsHTMLReflowMetrics baseSize;
-  nsHTMLReflowMetrics subScriptSize;
-  nsIFrame* baseFrame = aFrame->GetFirstChild(nsnull);
-  nsIFrame* subScriptFrame = nsnull;
-  if (baseFrame)
-    subScriptFrame = baseFrame->GetNextSibling();
-  if (!baseFrame || !subScriptFrame || subScriptFrame->GetNextSibling()) {
-    // report an error, encourage people to get their markups in order
-    return aFrame->ReflowError(aRenderingContext, aDesiredSize);
-  }
-  GetReflowAndBoundingMetricsFor(baseFrame, baseSize, bmBase);
-  GetReflowAndBoundingMetricsFor(subScriptFrame, subScriptSize, bmSubScript);
-
-  // get the subdrop from the subscript font
-  nscoord subDrop;
-  GetSubDropFromChild(subScriptFrame, subDrop);
-  // parameter v, Rule 18a, App. G, TeXbook
-  nscoord minSubScriptShift = bmBase.descent + subDrop;
-
-  //////////////////
-  // Place Children
-  
-  // get min subscript shift limit from x-height
-  // = h(x) - 4/5 * sigma_5, Rule 18b, App. G, TeXbook
-  nscoord xHeight = 0;
-  nsRefPtr<nsFontMetrics> fm =
-    aPresContext->GetMetricsFor(baseFrame->GetStyleFont()->mFont);
-
-  xHeight = fm->XHeight();
-  nscoord minShiftFromXHeight = (nscoord) 
-    (bmSubScript.ascent - (4.0f/5.0f) * xHeight);
-
-  // subScriptShift
-  // = minimum amount to shift the subscript down set by user or from the font
-  // = sub1 in TeX
-  // = subscriptshift attribute * x-height
-  nscoord subScriptShift, dummy;
-  // get subScriptShift default from font
-  GetSubScriptShifts (fm, subScriptShift, dummy);
-
-  subScriptShift = 
-    NS_MAX(subScriptShift, aUserSubScriptShift);
-
-  // get actual subscriptshift to be used
-  // Rule 18b, App. G, TeXbook
-  nscoord actualSubScriptShift = 
-    NS_MAX(minSubScriptShift,NS_MAX(subScriptShift,minShiftFromXHeight));
-  // get bounding box for base + subscript
-  nsBoundingMetrics boundingMetrics;
-  boundingMetrics.ascent = 
-    NS_MAX(bmBase.ascent, bmSubScript.ascent - actualSubScriptShift);
-  boundingMetrics.descent = 
-    NS_MAX(bmBase.descent, bmSubScript.descent + actualSubScriptShift);
-
-  // add aScriptSpace to the subscript's width
-  boundingMetrics.width = bmBase.width + bmSubScript.width + aScriptSpace;
-  boundingMetrics.leftBearing = bmBase.leftBearing;
-  boundingMetrics.rightBearing = NS_MAX(bmBase.rightBearing, bmBase.width +
-    NS_MAX(bmSubScript.width + aScriptSpace, bmSubScript.rightBearing));
-  aFrame->SetBoundingMetrics (boundingMetrics);
-
-  // reflow metrics
-  aDesiredSize.ascent = 
-    NS_MAX(baseSize.ascent, subScriptSize.ascent - actualSubScriptShift);
-  aDesiredSize.height = aDesiredSize.ascent +
-    NS_MAX(baseSize.height - baseSize.ascent,
-           subScriptSize.height - subScriptSize.ascent + actualSubScriptShift);
-  aDesiredSize.width = boundingMetrics.width;
-  aDesiredSize.mBoundingMetrics = boundingMetrics;
-
-  aFrame->SetReference(nsPoint(0, aDesiredSize.ascent));
-
-  if (aPlaceOrigin) {
-    nscoord dx, dy;
-    // now place the base ...
-    dx = 0; dy = aDesiredSize.ascent - baseSize.ascent;
-    FinishReflowChild (baseFrame, aPresContext, nsnull, baseSize, dx, dy, 0);
-    // ... and subscript
-    dx = bmBase.width; 
-    dy = aDesiredSize.ascent - (subScriptSize.ascent - actualSubScriptShift);
-    FinishReflowChild (subScriptFrame, aPresContext, nsnull, subScriptSize, dx, dy, 0);
-  }
-
-  return NS_OK;
-}
diff --git a/layout/mathml/nsMathMLmsubFrame.h b/layout/mathml/nsMathMLmsubFrame.h
deleted file mode 100644
--- a/layout/mathml/nsMathMLmsubFrame.h
+++ /dev/null
@@ -1,81 +0,0 @@
-/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* ***** BEGIN LICENSE BLOCK *****
- * Version: MPL 1.1/GPL 2.0/LGPL 2.1
- *
- * The contents of this file are subject to the Mozilla Public License Version
- * 1.1 (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
- * http://www.mozilla.org/MPL/
- *
- * Software distributed under the License is distributed on an "AS IS" basis,
- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- * for the specific language governing rights and limitations under the
- * License.
- *
- * The Original Code is Mozilla MathML Project.
- *
- * The Initial Developer of the Original Code is
- * The University Of Queensland.
- * Portions created by the Initial Developer are Copyright (C) 1999
- * the Initial Developer. All Rights Reserved.
- *
- * Contributor(s):
- *   Roger B. Sidje <rbs@maths.uq.edu.au>
- *   David J. Fiddes <D.J.Fiddes@hw.ac.uk>
- *   Shyjan Mahamud <mahamud@cs.cmu.edu> (added TeX rendering rules)
- *
- * Alternatively, the contents of this file may be used under the terms of
- * either of the GNU General Public License Version 2 or later (the "GPL"),
- * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
- * in which case the provisions of the GPL or the LGPL are applicable instead
- * of those above. If you wish to allow use of your version of this file only
- * under the terms of either the GPL or the LGPL, and not to allow others to
- * use your version of this file under the terms of the MPL, indicate your
- * decision by deleting the provisions above and replace them with the notice
- * and other provisions required by the GPL or the LGPL. If you do not delete
- * the provisions above, a recipient may use your version of this file under
- * the terms of any one of the MPL, the GPL or the LGPL.
- *
- * ***** END LICENSE BLOCK ***** */
-
-#ifndef nsMathMLmsubFrame_h___
-#define nsMathMLmsubFrame_h___
-
-#include "nsCOMPtr.h"
-#include "nsMathMLContainerFrame.h"
-
-//
-// <msub> -- attach a subscript to a base
-//
-
-class nsMathMLmsubFrame : public nsMathMLContainerFrame {
-public:
-  NS_DECL_FRAMEARENA_HELPERS
-
-  friend nsIFrame* NS_NewMathMLmsubFrame(nsIPresShell* aPresShell, nsStyleContext* aContext);
-
-  NS_IMETHOD
-  TransmitAutomaticData();
-
-  virtual nsresult
-  Place(nsRenderingContext& aRenderingContext,
-        PRBool               aPlaceOrigin,
-        nsHTMLReflowMetrics& aDesiredSize);
-
-  static nsresult
-  PlaceSubScript (nsPresContext*      aPresContext,
-                  nsRenderingContext& aRenderingContext,
-                  PRBool               aPlaceOrigin,
-                  nsHTMLReflowMetrics& aDesiredSize,
-                  nsMathMLContainerFrame* aForFrame,
-                  nscoord              aUserSubScriptShift,
-                  nscoord              aScriptSpace);
-
- protected:
-  nsMathMLmsubFrame(nsStyleContext* aContext) : nsMathMLContainerFrame(aContext) {}
-  virtual ~nsMathMLmsubFrame();
-  
-  virtual PRIntn GetSkipSides() const { return 0; }
-};
-
-#endif /* nsMathMLmsubFrame_h___ */
diff --git a/layout/mathml/nsMathMLmsubsupFrame.cpp b/layout/mathml/nsMathMLmsubsupFrame.cpp
--- a/layout/mathml/nsMathMLmsubsupFrame.cpp
+++ b/layout/mathml/nsMathMLmsubsupFrame.cpp
@@ -117,70 +117,109 @@ nsMathMLmsubsupFrame::Place(nsRenderingC
     }
   }
 
   return nsMathMLmsubsupFrame::PlaceSubSupScript(PresContext(),
                                                  aRenderingContext,
                                                  aPlaceOrigin,
                                                  aDesiredSize,
                                                  this,
+                                                 mContent->Tag(),
                                                  subScriptShift,
                                                  supScriptShift,
                                                  scriptSpace);
 }
 
 // exported routine that both munderover and msubsup share.
 // munderover uses this when movablelimits is set.
 nsresult
 nsMathMLmsubsupFrame::PlaceSubSupScript(nsPresContext*      aPresContext,
                                         nsRenderingContext& aRenderingContext,
                                         PRBool               aPlaceOrigin,
                                         nsHTMLReflowMetrics& aDesiredSize,
                                         nsMathMLContainerFrame* aFrame,
+                                        nsIAtom*             aTag,
                                         nscoord              aUserSubScriptShift,
                                         nscoord              aUserSupScriptShift,
                                         nscoord              aScriptSpace)
 {
   // force the scriptSpace to be atleast 1 pixel
   nscoord onePixel = nsPresContext::CSSPixelsToAppUnits(1);
   aScriptSpace = NS_MAX(onePixel, aScriptSpace);
 
   ////////////////////////////////////
   // Get the children's desired sizes
 
   nsHTMLReflowMetrics baseSize;
   nsHTMLReflowMetrics subScriptSize;
   nsHTMLReflowMetrics supScriptSize;
+  subScriptSize.ascent = 0;
+  supScriptSize.ascent = 0;
   nsBoundingMetrics bmBase, bmSubScript, bmSupScript;
   nsIFrame* subScriptFrame = nsnull;
   nsIFrame* supScriptFrame = nsnull;
   nsIFrame* baseFrame = aFrame->GetFirstChild(nsnull);
-  if (baseFrame)
-    subScriptFrame = baseFrame->GetNextSibling();
-  if (subScriptFrame)
+  if (baseFrame) {
+    if (aTag == nsGkAtoms::msub_ ||
+        aTag == nsGkAtoms::msubsup_) {
+      subScriptFrame = baseFrame->GetNextSibling();
+    } else if (aTag == nsGkAtoms::msup_) {
+      supScriptFrame = baseFrame->GetNextSibling();
+    }
+  }
+  if (subScriptFrame && aTag == nsGkAtoms::msubsup_) {
     supScriptFrame = subScriptFrame->GetNextSibling();
-  if (!baseFrame || !subScriptFrame || !supScriptFrame ||
-      supScriptFrame->GetNextSibling()) {
-    // report an error, encourage people to get their markups in order
-    return aFrame->ReflowError(aRenderingContext, aDesiredSize);
+  }
+  if (aTag == nsGkAtoms::msub_) {
+    if (!baseFrame || !subScriptFrame ||
+        subScriptFrame->GetNextSibling()) {
+      // report an error, encourage people to get their markups in order
+      return aFrame->ReflowError(aRenderingContext, aDesiredSize);
+    }
+  }
+  if (aTag == nsGkAtoms::msup_) {
+    if (!baseFrame || !supScriptFrame ||
+        supScriptFrame->GetNextSibling()) {
+      // report an error, encourage people to get their markups in order
+      return aFrame->ReflowError(aRenderingContext, aDesiredSize);
+    }
+  }
+  if (aTag == nsGkAtoms::msubsup_) {
+    if (!baseFrame || !subScriptFrame || !supScriptFrame ||
+        supScriptFrame->GetNextSibling()) {
+      // report an error, encourage people to get their markups in order
+      return aFrame->ReflowError(aRenderingContext, aDesiredSize);
+    }
   }
   GetReflowAndBoundingMetricsFor(baseFrame, baseSize, bmBase);
-  GetReflowAndBoundingMetricsFor(subScriptFrame, subScriptSize, bmSubScript);
-  GetReflowAndBoundingMetricsFor(supScriptFrame, supScriptSize, bmSupScript);
+  if (aTag == nsGkAtoms::msub_ ||
+      aTag == nsGkAtoms::msubsup_) {
+    GetReflowAndBoundingMetricsFor(subScriptFrame, subScriptSize, bmSubScript);
+  }
+  if (aTag == nsGkAtoms::msup_ ||
+      aTag == nsGkAtoms::msubsup_) {
+    GetReflowAndBoundingMetricsFor(supScriptFrame, supScriptSize, bmSupScript);
+  }
 
   // get the subdrop from the subscript font
   nscoord subDrop;
-  GetSubDropFromChild(subScriptFrame, subDrop);
-  // parameter v, Rule 18a, App. G, TeXbook
+  if (aTag == nsGkAtoms::msub_ ||
+      aTag == nsGkAtoms::msubsup_) {
+    GetSubDropFromChild(subScriptFrame, subDrop);
+    // parameter v, Rule 18a, App. G, TeXbook
+  }
   nscoord minSubScriptShift = bmBase.descent + subDrop;
 
   // get the supdrop from the supscript font
   nscoord supDrop;
-  GetSupDropFromChild(supScriptFrame, supDrop);
-  // parameter u, Rule 18a, App. G, TeXbook
+  if (aTag == nsGkAtoms::msup_ ||
+      aTag == nsGkAtoms::msubsup_) {
+    GetSupDropFromChild(supScriptFrame, supDrop);
+    // parameter u, Rule 18a, App. G, TeXbook
+  }
   nscoord minSupScriptShift = bmBase.ascent - supDrop;
 
   //////////////////
   // Place Children
   //////////////////
 
   //////////////////////////////////////////////////
   // Get subscript shift
@@ -335,21 +374,27 @@ nsMathMLmsubsupFrame::PlaceSubSupScript(
 
   if (aPlaceOrigin) {
     nscoord dx, dy;
     // now place the base ...
     dx = 0; dy = aDesiredSize.ascent - baseSize.ascent;
     FinishReflowChild(baseFrame, aPresContext, nsnull,
                       baseSize, dx, dy, 0);
     // ... and subscript
-    dx = bmBase.width;
-    dy = aDesiredSize.ascent - (subScriptSize.ascent - subScriptShift);
-    FinishReflowChild(subScriptFrame, aPresContext, nsnull,
-                      subScriptSize, dx, dy, 0);
+    if (aTag == nsGkAtoms::msub_ ||
+        aTag == nsGkAtoms::msubsup_) {
+      dx = bmBase.width;
+      dy = aDesiredSize.ascent - (subScriptSize.ascent - subScriptShift);
+      FinishReflowChild(subScriptFrame, aPresContext, nsnull,
+                        subScriptSize, dx, dy, 0);
+    }
     // ... and the superscript
-    dx = bmBase.width + italicCorrection;
-    dy = aDesiredSize.ascent - (supScriptSize.ascent + supScriptShift);
-    FinishReflowChild(supScriptFrame, aPresContext, nsnull,
-                      supScriptSize, dx, dy, 0);
+    if (aTag == nsGkAtoms::msup_ ||
+        aTag == nsGkAtoms::msubsup_) {
+      dx = bmBase.width + italicCorrection;
+      dy = aDesiredSize.ascent - (supScriptSize.ascent + supScriptShift);
+      FinishReflowChild(supScriptFrame, aPresContext, nsnull,
+                        supScriptSize, dx, dy, 0);
+    }
   }
 
   return NS_OK;
 }
diff --git a/layout/mathml/nsMathMLmsubsupFrame.h b/layout/mathml/nsMathMLmsubsupFrame.h
--- a/layout/mathml/nsMathMLmsubsupFrame.h
+++ b/layout/mathml/nsMathMLmsubsupFrame.h
@@ -63,16 +63,17 @@ public:
         nsHTMLReflowMetrics& aDesiredSize);
 
   static nsresult
   PlaceSubSupScript(nsPresContext*      aPresContext,
                     nsRenderingContext& aRenderingContext,
                     PRBool               aPlaceOrigin,
                     nsHTMLReflowMetrics& aDesiredSize,
                     nsMathMLContainerFrame* aForFrame,
+                    nsIAtom*             aTag,
                     nscoord              aUserSubScriptShift,
                     nscoord              aUserSupScriptShift,
                     nscoord              aScriptSpace);
 
 protected:
   nsMathMLmsubsupFrame(nsStyleContext* aContext) : nsMathMLContainerFrame(aContext) {}
   virtual ~nsMathMLmsubsupFrame();
   
diff --git a/layout/mathml/nsMathMLmsupFrame.cpp b/layout/mathml/nsMathMLmsupFrame.cpp
deleted file mode 100644
--- a/layout/mathml/nsMathMLmsupFrame.cpp
+++ /dev/null
@@ -1,253 +0,0 @@
-/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* ***** BEGIN LICENSE BLOCK *****
- * Version: MPL 1.1/GPL 2.0/LGPL 2.1
- *
- * The contents of this file are subject to the Mozilla Public License Version
- * 1.1 (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
- * http://www.mozilla.org/MPL/
- *
- * Software distributed under the License is distributed on an "AS IS" basis,
- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- * for the specific language governing rights and limitations under the
- * License.
- *
- * The Original Code is Mozilla MathML Project.
- *
- * The Initial Developer of the Original Code is
- * The University Of Queensland.
- * Portions created by the Initial Developer are Copyright (C) 1999
- * the Initial Developer. All Rights Reserved.
- *
- * Contributor(s):
- *   Roger B. Sidje <rbs@maths.uq.edu.au>
- *   David J. Fiddes <D.J.Fiddes@hw.ac.uk>
- *   Shyjan Mahamud <mahamud@cs.cmu.edu> (added TeX rendering rules)
- *
- * Alternatively, the contents of this file may be used under the terms of
- * either of the GNU General Public License Version 2 or later (the "GPL"),
- * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
- * in which case the provisions of the GPL or the LGPL are applicable instead
- * of those above. If you wish to allow use of your version of this file only
- * under the terms of either the GPL or the LGPL, and not to allow others to
- * use your version of this file under the terms of the MPL, indicate your
- * decision by deleting the provisions above and replace them with the notice
- * and other provisions required by the GPL or the LGPL. If you do not delete
- * the provisions above, a recipient may use your version of this file under
- * the terms of any one of the MPL, the GPL or the LGPL.
- *
- * ***** END LICENSE BLOCK ***** */
-
-#include "nsCOMPtr.h"
-#include "nsFrame.h"
-#include "nsPresContext.h"
-#include "nsStyleContext.h"
-#include "nsStyleConsts.h"
-
-#include "nsMathMLmsupFrame.h"
-
-//
-// <msup> -- attach a superscript to a base - implementation
-//
-
-nsIFrame*
-NS_NewMathMLmsupFrame(nsIPresShell* aPresShell, nsStyleContext* aContext)
-{
-  return new (aPresShell) nsMathMLmsupFrame(aContext);
-}
-
-NS_IMPL_FRAMEARENA_HELPERS(nsMathMLmsupFrame)
-
-nsMathMLmsupFrame::~nsMathMLmsupFrame()
-{
-}
-
-NS_IMETHODIMP
-nsMathMLmsupFrame::TransmitAutomaticData()
-{
-  // if our base is an embellished operator, its flags bubble to us
-  mPresentationData.baseFrame = mFrames.FirstChild();
-  GetEmbellishDataFrom(mPresentationData.baseFrame, mEmbellishData);
-
-  // 1. The REC says:
-  // The <msup> element increments scriptlevel by 1, and sets displaystyle to
-  // "false", within superscript, but leaves both attributes unchanged within base.
-  // 2. The TeXbook (Ch 17. p.141) says the superscript *inherits* the compression,
-  // so we don't set the compression flag. Our parent will propagate its own.
-  UpdatePresentationDataFromChildAt(1, -1,
-    ~NS_MATHML_DISPLAYSTYLE,
-     NS_MATHML_DISPLAYSTYLE);
-
-  return NS_OK;
-}
-
-/* virtual */ nsresult
-nsMathMLmsupFrame::Place(nsRenderingContext& aRenderingContext,
-                         PRBool               aPlaceOrigin,
-                         nsHTMLReflowMetrics& aDesiredSize)
-{
-  // extra spacing after sup/subscript
-  nscoord scriptSpace = nsPresContext::CSSPointsToAppUnits(0.5f); // 0.5pt as in plain TeX
-
-  // check if the superscriptshift attribute is there
-  nsAutoString value;
-  nscoord supScriptShift = 0;
-  GetAttribute(mContent, mPresentationData.mstyle,
-               nsGkAtoms::superscriptshift_, value);
-  if (!value.IsEmpty()) {
-    nsCSSValue cssValue;
-    if (ParseNumericValue(value, cssValue) && cssValue.IsLengthUnit()) {
-      supScriptShift = CalcLength(PresContext(), mStyleContext, cssValue);
-    }
-  }
-
-  return nsMathMLmsupFrame::PlaceSuperScript(PresContext(), 
-                                             aRenderingContext,
-                                             aPlaceOrigin,
-                                             aDesiredSize,
-                                             this,
-                                             supScriptShift,
-                                             scriptSpace);
-}
-
-// exported routine that both mover and msup share.
-// mover uses this when movablelimits is set.
-nsresult
-nsMathMLmsupFrame::PlaceSuperScript(nsPresContext*      aPresContext,
-                                    nsRenderingContext& aRenderingContext,
-                                    PRBool               aPlaceOrigin,
-                                    nsHTMLReflowMetrics& aDesiredSize,
-                                    nsMathMLContainerFrame* aFrame,
-                                    nscoord              aUserSupScriptShift,
-                                    nscoord              aScriptSpace)
-{
-  // force the scriptSpace to be at least 1 pixel 
-  nscoord onePixel = nsPresContext::CSSPixelsToAppUnits(1);
-  aScriptSpace = NS_MAX(onePixel, aScriptSpace);
-
-  ////////////////////////////////////
-  // Get the children's desired sizes
-
-  nsHTMLReflowMetrics baseSize;
-  nsHTMLReflowMetrics supScriptSize;
-  nsBoundingMetrics bmBase, bmSupScript;
-  nsIFrame* supScriptFrame = nsnull;
-  nsIFrame* baseFrame = aFrame->GetFirstChild(nsnull);
-  if (baseFrame)
-    supScriptFrame = baseFrame->GetNextSibling();
-  if (!baseFrame || !supScriptFrame || supScriptFrame->GetNextSibling()) {
-    // report an error, encourage people to get their markups in order
-    return aFrame->ReflowError(aRenderingContext, aDesiredSize);
-  }
-  GetReflowAndBoundingMetricsFor(baseFrame, baseSize, bmBase);
-  GetReflowAndBoundingMetricsFor(supScriptFrame, supScriptSize, bmSupScript);
-
-  // get the supdrop from the supscript font
-  nscoord supDrop;
-  GetSupDropFromChild(supScriptFrame, supDrop);
-  // parameter u, Rule 18a, App. G, TeXbook
-  nscoord minSupScriptShift = bmBase.ascent - supDrop;
-
-  //////////////////
-  // Place Children 
-  
-  // get min supscript shift limit from x-height
-  // = d(x) + 1/4 * sigma_5, Rule 18c, App. G, TeXbook
-  nscoord xHeight = 0;
-  nsRefPtr<nsFontMetrics> fm =
-    aPresContext->GetMetricsFor(baseFrame->GetStyleFont()->mFont);
-
-  xHeight = fm->XHeight();
-  nscoord minShiftFromXHeight = (nscoord) 
-    (bmSupScript.descent + (1.0f/4.0f) * xHeight);
-  nscoord italicCorrection;
-  GetItalicCorrection(bmBase, italicCorrection);
-
-  // supScriptShift{1,2,3}
-  // = minimum amount to shift the supscript up
-  // = sup{1,2,3} in TeX
-  // supScriptShift1 = superscriptshift attribute * x-height
-  // Note that there are THREE values for supscript shifts depending
-  // on the current style
-  nscoord supScriptShift1, supScriptShift2, supScriptShift3;
-  // Set supScriptShift{1,2,3} default from font
-  GetSupScriptShifts (fm, supScriptShift1, supScriptShift2, supScriptShift3);
-
-  if (0 < aUserSupScriptShift) {
-    // the user has set the superscriptshift attribute
-    float scaler2 = ((float) supScriptShift2) / supScriptShift1;
-    float scaler3 = ((float) supScriptShift3) / supScriptShift1;
-    supScriptShift1 = 
-      NS_MAX(supScriptShift1, aUserSupScriptShift);
-    supScriptShift2 = NSToCoordRound(scaler2 * supScriptShift1);
-    supScriptShift3 = NSToCoordRound(scaler3 * supScriptShift1);
-  }
-
-  // get sup script shift depending on current script level and display style
-  // Rule 18c, App. G, TeXbook
-  nscoord supScriptShift;
-  nsPresentationData presentationData;
-  aFrame->GetPresentationData (presentationData);
-  if ( aFrame->GetStyleFont()->mScriptLevel == 0 && 
-       NS_MATHML_IS_DISPLAYSTYLE(presentationData.flags) &&
-      !NS_MATHML_IS_COMPRESSED(presentationData.flags)) {
-    // Style D in TeXbook
-    supScriptShift = supScriptShift1;
-  }
-  else if (NS_MATHML_IS_COMPRESSED(presentationData.flags)) {
-    // Style C' in TeXbook = D',T',S',SS'
-    supScriptShift = supScriptShift3;
-  }
-  else {
-    // everything else = T,S,SS
-    supScriptShift = supScriptShift2;
-  }
-
-  // get actual supscriptshift to be used
-  // Rule 18c, App. G, TeXbook
-  nscoord actualSupScriptShift = 
-    NS_MAX(minSupScriptShift,NS_MAX(supScriptShift,minShiftFromXHeight));
-
-  // bounding box
-  nsBoundingMetrics boundingMetrics;
-  boundingMetrics.ascent =
-    NS_MAX(bmBase.ascent, (bmSupScript.ascent + actualSupScriptShift));
-  boundingMetrics.descent =
-    NS_MAX(bmBase.descent, (bmSupScript.descent - actualSupScriptShift));
-
-  // leave aScriptSpace after superscript
-  // add italicCorrection between base and superscript
-  // add "a little to spare" as well (see TeXbook Ch.11, p.64), as we
-  // estimate the italic creation ourselves and it isn't the same as TeX 
-  italicCorrection += onePixel;
-  boundingMetrics.width = bmBase.width + italicCorrection +
-                          bmSupScript.width + aScriptSpace;
-  boundingMetrics.leftBearing = bmBase.leftBearing;
-  boundingMetrics.rightBearing = bmBase.width + italicCorrection +
-                                 bmSupScript.rightBearing;
-  aFrame->SetBoundingMetrics(boundingMetrics);
-
-  // reflow metrics
-  aDesiredSize.ascent =
-    NS_MAX(baseSize.ascent, (supScriptSize.ascent + actualSupScriptShift));
-  aDesiredSize.height = aDesiredSize.ascent +
-    NS_MAX(baseSize.height - baseSize.ascent,
-           (supScriptSize.height - supScriptSize.ascent - actualSupScriptShift));
-  aDesiredSize.width = boundingMetrics.width;
-  aDesiredSize.mBoundingMetrics = boundingMetrics;
-
-  aFrame->SetReference(nsPoint(0, aDesiredSize.ascent));
-
-  if (aPlaceOrigin) {
-    nscoord dx, dy;
-    // now place the base ...
-    dx = 0; dy = aDesiredSize.ascent - baseSize.ascent;
-    FinishReflowChild (baseFrame, aPresContext, nsnull, baseSize, dx, dy, 0);
-    // ... and supscript
-    dx = bmBase.width + italicCorrection;
-    dy = aDesiredSize.ascent - (supScriptSize.ascent + actualSupScriptShift);
-    FinishReflowChild (supScriptFrame, aPresContext, nsnull, supScriptSize, dx, dy, 0);
-  }
-
-  return NS_OK;
-}
diff --git a/layout/mathml/nsMathMLmsupFrame.h b/layout/mathml/nsMathMLmsupFrame.h
deleted file mode 100644
--- a/layout/mathml/nsMathMLmsupFrame.h
+++ /dev/null
@@ -1,81 +0,0 @@
-/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* ***** BEGIN LICENSE BLOCK *****
- * Version: MPL 1.1/GPL 2.0/LGPL 2.1
- *
- * The contents of this file are subject to the Mozilla Public License Version
- * 1.1 (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
- * http://www.mozilla.org/MPL/
- *
- * Software distributed under the License is distributed on an "AS IS" basis,
- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- * for the specific language governing rights and limitations under the
- * License.
- *
- * The Original Code is Mozilla MathML Project.
- *
- * The Initial Developer of the Original Code is
- * The University Of Queensland.
- * Portions created by the Initial Developer are Copyright (C) 1999
- * the Initial Developer. All Rights Reserved.
- *
- * Contributor(s):
- *   Roger B. Sidje <rbs@maths.uq.edu.au>
- *   David J. Fiddes <D.J.Fiddes@hw.ac.uk>
- *   Shyjan Mahamud <mahamud@cs.cmu.edu> (added TeX rendering rules)
- *
- * Alternatively, the contents of this file may be used under the terms of
- * either of the GNU General Public License Version 2 or later (the "GPL"),
- * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
- * in which case the provisions of the GPL or the LGPL are applicable instead
- * of those above. If you wish to allow use of your version of this file only
- * under the terms of either the GPL or the LGPL, and not to allow others to
- * use your version of this file under the terms of the MPL, indicate your
- * decision by deleting the provisions above and replace them with the notice
- * and other provisions required by the GPL or the LGPL. If you do not delete
- * the provisions above, a recipient may use your version of this file under
- * the terms of any one of the MPL, the GPL or the LGPL.
- *
- * ***** END LICENSE BLOCK ***** */
-
-#ifndef nsMathMLmsupFrame_h___
-#define nsMathMLmsupFrame_h___
-
-#include "nsCOMPtr.h"
-#include "nsMathMLContainerFrame.h"
-
-//
-// <msup> -- attach a superscript to a base
-//
-
-class nsMathMLmsupFrame : public nsMathMLContainerFrame {
-public:
-  NS_DECL_FRAMEARENA_HELPERS
-
-  friend nsIFrame* NS_NewMathMLmsupFrame(nsIPresShell* aPresShell, nsStyleContext* aContext);
-
-  NS_IMETHOD
-  TransmitAutomaticData();
-
-  virtual nsresult
-  Place(nsRenderingContext& aRenderingContext,
-        PRBool               aPlaceOrigin,
-        nsHTMLReflowMetrics& aDesiredSize);
-
-  static nsresult
-  PlaceSuperScript (nsPresContext*      aPresContext,
-                    nsRenderingContext& aRenderingContext,
-                    PRBool               aPlaceOrigin,
-                    nsHTMLReflowMetrics& aDesiredSize,
-                    nsMathMLContainerFrame* aForFrame,
-                    nscoord              aUserSupScriptShift,
-                    nscoord              aScriptSpace);
-
-protected:
-  nsMathMLmsupFrame(nsStyleContext* aContext) : nsMathMLContainerFrame(aContext) {}
-  virtual ~nsMathMLmsupFrame();
-  
-  virtual PRIntn GetSkipSides() const { return 0; }
-};
-
-#endif /* nsMathMLmsupFrame_h___ */
