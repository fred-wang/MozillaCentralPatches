# HG changeset patch
# Parent fdfd0f7e8e07ed89748cd6b449488e5425e8bedb
# User Frédéric Wang <fred.wang@free.fr>
Bug 560100 - Map MathML attributes lquote/rquote to style - part 2. r=karlt.

diff --git a/content/mathml/content/src/nsMathMLElement.cpp b/content/mathml/content/src/nsMathMLElement.cpp
--- a/content/mathml/content/src/nsMathMLElement.cpp
+++ b/content/mathml/content/src/nsMathMLElement.cpp
@@ -153,16 +153,22 @@ static nsGenericElement::MappedAttribute
   { &nsGkAtoms::width},
   { &nsGkAtoms::height},
 
   // No mathcolor: the MathML REC says that this attribute has no effect.
   { &nsGkAtoms::mathbackground_ },
   { nsnull }
 };
 
+static nsGenericElement::MappedAttributeEntry sMsStyles[] = {
+  { &nsGkAtoms::lquote_ },
+  { &nsGkAtoms::rquote_ },
+  { nsnull }
+};
+
 static nsGenericElement::MappedAttributeEntry sMtableStyles[] = {
   { &nsGkAtoms::width },
   { nsnull }
 };
 
 static nsGenericElement::MappedAttributeEntry sTokenStyles[] = {
   { &nsGkAtoms::mathsize_ },
   { &nsGkAtoms::fontsize_ },
@@ -186,38 +192,47 @@ static nsGenericElement::MappedAttribute
 };
 
 bool
 nsMathMLElement::IsAttributeMapped(const nsIAtom* aAttribute) const
 {
   static const MappedAttributeEntry* const mglyphMap[] = {
     sMglyphStyles
   };
+  static const MappedAttributeEntry* const msMap[] = {
+    sMsStyles,
+    sTokenStyles,
+    sCommonPresStyles
+  };
   static const MappedAttributeEntry* const mtableMap[] = {
     sMtableStyles,
     sCommonPresStyles
   };
   static const MappedAttributeEntry* const tokenMap[] = {
     sTokenStyles,
     sCommonPresStyles
   };
   static const MappedAttributeEntry* const mstyleMap[] = {
+    sMsStyles,
     sTokenStyles,
     sEnvironmentStyles,
     sCommonPresStyles
   };
   static const MappedAttributeEntry* const commonPresMap[] = {
     sCommonPresStyles
   };
   
   nsIAtom* tag = Tag();
   if (tag == nsGkAtoms::mglyph_) {
     return FindAttributeDependence(aAttribute, mglyphMap);
   }
-  if (tag == nsGkAtoms::ms_ || tag == nsGkAtoms::mi_ ||
+  if (tag == nsGkAtoms::ms_) {
+    return FindAttributeDependence(aAttribute, msMap);
+  }
+  if (tag == nsGkAtoms::mi_ ||
       tag == nsGkAtoms::mn_ || tag == nsGkAtoms::mo_ ||
       tag == nsGkAtoms::mtext_ || tag == nsGkAtoms::mspace_)
     return FindAttributeDependence(aAttribute, tokenMap);
   if (tag == nsGkAtoms::mstyle_ ||
       tag == nsGkAtoms::math)
     return FindAttributeDependence(aAttribute, mstyleMap);
 
   if (tag == nsGkAtoms::mtable_)
@@ -694,16 +709,50 @@ nsMathMLElement::MapMathMLAttributesInto
     if (height->GetUnit() == eCSSUnit_Null) {
       const nsAttrValue* value = aAttributes->GetAttr(nsGkAtoms::height);
       if (value && value->Type() == nsAttrValue::eString) {
         ParseNumericValue(value->GetStringValue(), *height, 0);
       }
     }
   }
 
+  if (aData->mSIDs & NS_STYLE_INHERIT_BIT(Quotes)) {
+    // lquote
+    //
+    // "Specifies the opening quote to enclose the content. (not necessarily
+    // ‘left quote’ in RTL context)."
+    //
+    // values: string
+    // default; &quot;
+    //
+    nsCSSValue* lquote = aData->ValueForMsLquote();
+    if (lquote->GetUnit() == eCSSUnit_Null) {
+      const nsAttrValue* value = aAttributes->GetAttr(nsGkAtoms::lquote_);
+      if (value && value->Type() == nsAttrValue::eString) {
+        lquote->SetStringValue(value->GetStringValue(), eCSSUnit_String);
+      }
+    }
+
+    // rquote
+    //
+    // "Specifies the closing quote to enclose the content. (not necessarily
+    // ‘right quote’ in RTL context)."
+    //
+    // values: string
+    // default; &quot;
+    //
+    nsCSSValue* rquote = aData->ValueForMsRquote();
+    if (rquote->GetUnit() == eCSSUnit_Null) {
+      const nsAttrValue* value = aAttributes->GetAttr(nsGkAtoms::rquote_);
+      if (value && value->Type() == nsAttrValue::eString) {
+        rquote->SetStringValue(value->GetStringValue(), eCSSUnit_String);
+      }
+    }
+  }
+
 }
 
 nsresult
 nsMathMLElement::PreHandleEvent(nsEventChainPreVisitor& aVisitor)
 {
   nsresult rv = nsGenericElement::PreHandleEvent(aVisitor);
   NS_ENSURE_SUCCESS(rv, rv);
 
diff --git a/layout/mathml/mathml.css b/layout/mathml/mathml.css
--- a/layout/mathml/mathml.css
+++ b/layout/mathml/mathml.css
@@ -200,20 +200,20 @@ mi {
 /**************************************************************************/
 /* tags with generated content                                            */
 /**************************************************************************/
 
 ms {
   display: inline;
 }
 ms:before {
-  content: open-quote;
+  content: -moz-ms-lquote;
 }
 ms:after {
-  content: close-quote;
+  content: -moz-ms-rquote;
 }
 
 merror {
   display: block;
   font-family: sans-serif;
   font-weight: bold;
   white-space: pre;
   margin: 1em;
diff --git a/layout/mathml/nsMathMLTokenFrame.cpp b/layout/mathml/nsMathMLTokenFrame.cpp
--- a/layout/mathml/nsMathMLTokenFrame.cpp
+++ b/layout/mathml/nsMathMLTokenFrame.cpp
@@ -153,17 +153,16 @@ NS_IMETHODIMP
 nsMathMLTokenFrame::SetInitialChildList(ChildListID     aListID,
                                         nsFrameList&    aChildList)
 {
   // First, let the base class do its work
   nsresult rv = nsMathMLContainerFrame::SetInitialChildList(aListID, aChildList);
   if (NS_FAILED(rv))
     return rv;
 
-  SetQuotes(false);
   ProcessTextData();
   return rv;
 }
 
 nsresult
 nsMathMLTokenFrame::Reflow(nsPresContext*          aPresContext,
                            nsHTMLReflowMetrics&     aDesiredSize,
                            const nsHTMLReflowState& aReflowState,
@@ -262,30 +261,16 @@ nsMathMLTokenFrame::MarkIntrinsicWidthsD
 {
   // this could be called due to changes in the nsTextFrame beneath us
   // when something changed in the text content. So re-process our text
   ProcessTextData();
 
   nsMathMLContainerFrame::MarkIntrinsicWidthsDirty();
 }
 
-NS_IMETHODIMP
-nsMathMLTokenFrame::AttributeChanged(PRInt32         aNameSpaceID,
-                                     nsIAtom*        aAttribute,
-                                     PRInt32         aModType)
-{
-  if (nsGkAtoms::lquote_ == aAttribute ||
-      nsGkAtoms::rquote_ == aAttribute) {
-    SetQuotes(true);
-  }
-
-  return nsMathMLContainerFrame::
-         AttributeChanged(aNameSpaceID, aAttribute, aModType);
-}
-
 void
 nsMathMLTokenFrame::ProcessTextData()
 {
   // see if the style changes from normal to italic or vice-versa
   if (!SetTextStyle())
     return;
 
   // explicitly request a re-resolve to pick up the change of style
@@ -382,60 +367,8 @@ nsMathMLTokenFrame::SetTextStyle()
                                   fontstyle, eCaseMatters)) {
     mContent->SetAttr(kNameSpaceID_None, nsGkAtoms::_moz_math_fontstyle_,
                       fontstyle, false);
     return true;
   }
 
   return false;
 }
-
-///////////////////////////////////////////////////////////////////////////
-// For <ms>, it is assumed that the mathml.css file contains two rules:
-// ms:before { content: open-quote; }
-// ms:after { content: close-quote; }
-// With these two rules, the frame construction code will
-// create inline frames that contain text frames which themselves
-// contain the text content of the quotes.
-// So the main idea in this code is to see if there are lquote and 
-// rquote attributes. If these are there, we ovewrite the default
-// quotes in the text frames.
-// XXX this is somewhat bogus, we probably should map lquote and rquote
-// to 'content' style rules
-//
-// But what if the mathml.css file wasn't loaded? 
-// We also check that we are not relying on null pointers...
-
-static void
-SetQuote(nsIFrame* aFrame, nsString& aValue, bool aNotify)
-{
-  if (!aFrame)
-    return;
-
-  nsIFrame* textFrame = aFrame->GetFirstPrincipalChild();
-  if (!textFrame)
-    return;
-
-  nsIContent* quoteContent = textFrame->GetContent();
-  if (!quoteContent->IsNodeOfType(nsINode::eTEXT))
-    return;
-
-  quoteContent->SetText(aValue, aNotify);
-}
-
-void
-nsMathMLTokenFrame::SetQuotes(bool aNotify)
-{
-  if (mContent->Tag() != nsGkAtoms::ms_)
-    return;
-
-  nsAutoString value;
-  // lquote
-  if (GetAttribute(mContent, mPresentationData.mstyle,
-                   nsGkAtoms::lquote_, value)) {
-    SetQuote(nsLayoutUtils::GetBeforeFrame(this), value, aNotify);
-  }
-  // rquote
-  if (GetAttribute(mContent, mPresentationData.mstyle,
-                   nsGkAtoms::rquote_, value)) {
-    SetQuote(nsLayoutUtils::GetAfterFrame(this), value, aNotify);
-  }
-}
diff --git a/layout/mathml/nsMathMLTokenFrame.h b/layout/mathml/nsMathMLTokenFrame.h
--- a/layout/mathml/nsMathMLTokenFrame.h
+++ b/layout/mathml/nsMathMLTokenFrame.h
@@ -84,21 +84,16 @@ public:
 
   virtual nsresult
   Place(nsRenderingContext& aRenderingContext,
         bool                 aPlaceOrigin,
         nsHTMLReflowMetrics& aDesiredSize);
 
   virtual void MarkIntrinsicWidthsDirty();
 
-  NS_IMETHOD
-  AttributeChanged(PRInt32         aNameSpaceID,
-                   nsIAtom*        aAttribute,
-                   PRInt32         aModType);
-
   virtual nsresult
   ChildListChanged(PRInt32 aModType)
   {
     ProcessTextData();
     return nsMathMLContainerFrame::ChildListChanged(aModType);
   }
 
 protected:
