# HG changeset patch
# Parent e8df6826a571509fdd08d5538f8158671c4fd58b
# User Frédéric Wang <fred.wang@free.fr>
Bug 945183 - Mirroring large/stretchy operators

diff --git a/layout/mathml/mathfont.properties b/layout/mathml/mathfont.properties
--- a/layout/mathml/mathfont.properties
+++ b/layout/mathml/mathfont.properties
@@ -274,19 +274,19 @@ operator.\u2228.infix = lspace:4 rspace:
 operator.\u2229.infix = lspace:4 rspace:4 # &cap;
 operator.\u222A.infix = lspace:4 rspace:4 # &cup;
 operator.\u222B.prefix = lspace:0 rspace:1 largeop symmetric direction:vertical integral mirrorable # &Integral;
 operator.\u222C.prefix = lspace:0 rspace:1 largeop symmetric direction:vertical integral mirrorable # double integral
 operator.\u222D.prefix = lspace:0 rspace:1 largeop symmetric direction:vertical integral mirrorable # triple integral
 operator.\u222E.prefix = lspace:0 rspace:1 largeop symmetric direction:vertical integral mirrorable # &ContourIntegral;
 operator.\u222F.prefix = lspace:0 rspace:1 largeop symmetric direction:vertical integral mirrorable # &DoubleContourIntegral;
 operator.\u2230.prefix = lspace:0 rspace:1 largeop symmetric direction:vertical integral mirrorable # volume integral
-operator.\u2231.prefix = lspace:0 rspace:1 largeop symmetric direction:vertical integral # clockwise integral
-operator.\u2232.prefix = lspace:0 rspace:1 largeop symmetric direction:vertical integral # &ClockwiseContourIntegral;
-operator.\u2233.prefix = lspace:0 rspace:1 largeop symmetric direction:vertical integral # &CounterClockwiseContourIntegral;
+operator.\u2231.prefix = lspace:0 rspace:1 largeop symmetric direction:vertical integral mirrorable # clockwise integral
+operator.\u2232.prefix = lspace:0 rspace:1 largeop symmetric direction:vertical integral mirrorable # &ClockwiseContourIntegral;
+operator.\u2233.prefix = lspace:0 rspace:1 largeop symmetric direction:vertical integral mirrorable # &CounterClockwiseContourIntegral;
 operator.\u2234.infix = lspace:5 rspace:5 # &Therefore;
 operator.\u2235.infix = lspace:5 rspace:5 # &Because;
 operator.\u2236.infix = lspace:5 rspace:5 # ratio
 operator.\u2237.infix = lspace:5 rspace:5 # &Colon; &Proportion;
 operator.\u2238.infix = lspace:4 rspace:4 # dot minus
 operator.\u2239.infix = lspace:5 rspace:5 # excess
 operator.\u223A.infix = lspace:4 rspace:4 # geometric proportion
 operator.\u223B.infix = lspace:5 rspace:5 # homothetic
@@ -844,17 +844,17 @@ operator.\u2A08.prefix = lspace:1 rspace
 operator.\u2A09.prefix = lspace:1 rspace:2 largeop movablelimits symmetric # n-ary times operator
 operator.\u2A0A.prefix = lspace:1 rspace:2 largeop movablelimits symmetric mirrorable # modulo two sum
 operator.\u2A0B.prefix = lspace:1 rspace:2 largeop symmetric direction:vertical integral mirrorable # summation with integral
 operator.\u2A0C.prefix = lspace:0 rspace:1 largeop symmetric direction:vertical integral mirrorable # quadruple integral operator
 operator.\u2A0D.prefix = lspace:1 rspace:2 largeop symmetric direction:vertical integral mirrorable # finite part integral
 operator.\u2A0E.prefix = lspace:1 rspace:2 largeop symmetric direction:vertical integral mirrorable # integral with double stroke
 operator.\u2A0F.prefix = lspace:1 rspace:2 largeop symmetric direction:vertical integral mirrorable # integral average with slash
 operator.\u2A10.prefix = lspace:1 rspace:2 largeop movablelimits symmetric direction:vertical integral mirrorable # circulation function
-operator.\u2A11.prefix = lspace:1 rspace:2 largeop movablelimits symmetric direction:vertical integral # anticlockwise integration
+operator.\u2A11.prefix = lspace:1 rspace:2 largeop movablelimits symmetric direction:vertical integral mirrorable # anticlockwise integration
 operator.\u2A12.prefix = lspace:1 rspace:2 largeop movablelimits symmetric direction:vertical integral mirrorable # line integration with rectangular path around pole
 operator.\u2A13.prefix = lspace:1 rspace:2 largeop movablelimits symmetric direction:vertical integral mirrorable # line integration with semicircular path around pole
 operator.\u2A14.prefix = lspace:1 rspace:2 largeop movablelimits symmetric direction:vertical integral mirrorable # line integration not including the pole
 operator.\u2A15.prefix = lspace:1 rspace:2 largeop symmetric direction:vertical integral mirrorable # integral around a point operator
 operator.\u2A16.prefix = lspace:1 rspace:2 largeop symmetric direction:vertical integral mirrorable # quaternion integral operator
 operator.\u2A17.prefix = lspace:1 rspace:2 largeop symmetric integral mirrorable direction:vertical # integral with leftwards arrow with hook
 operator.\u2A18.prefix = lspace:1 rspace:2 largeop symmetric direction:vertical integral mirrorable # integral with times sign
 operator.\u2A19.prefix = lspace:1 rspace:2 largeop symmetric direction:vertical integral mirrorable # integral with intersection
diff --git a/layout/mathml/nsMathMLChar.cpp b/layout/mathml/nsMathMLChar.cpp
--- a/layout/mathml/nsMathMLChar.cpp
+++ b/layout/mathml/nsMathMLChar.cpp
@@ -6,16 +6,17 @@
 #include "nsMathMLChar.h"
 #include "mozilla/MathAlgorithms.h"
 
 #include "nsCOMPtr.h"
 #include "nsIFrame.h"
 #include "nsPresContext.h"
 #include "nsStyleContext.h"
 #include "nsUnicharUtils.h"
+#include "nsUnicodeProperties.h"
 #include "nsRenderingContext.h"
 
 #include "mozilla/Preferences.h"
 #include "nsIPersistentProperties2.h"
 #include "nsIObserverService.h"
 #include "nsIObserver.h"
 #include "nsNetUtil.h"
 
@@ -36,16 +37,48 @@ using namespace mozilla;
 
 // BUG 848725 Drawing failure with stretchy horizontal parenthesis when no fonts
 // are installed. "kMaxScaleFactor" is required to limit the scale for the
 // vertical and horizontal stretchy operators.
 static const float kMaxScaleFactor = 20.0;
 static const float kLargeOpFactor = float(M_SQRT2);
 static const float kIntegralFactor = 2.0;
 
+static bool
+IsMirrorableUnicodeCharacter(uint32_t aCh)
+{
+  return aCh != unicode::GetMirroredChar(aCh);
+}
+
+static gfxTextRun*
+MakeTextRunWithDirection(gfxFontGroup*   aFontGroup,
+                         const char16_t* aString,
+                         uint32_t        aLength,
+                         gfxContext*     aThebesContext,
+                         int32_t         aAppUnitsPerDevPixel,
+                         bool            aMirrored)
+{
+  nsRefPtr<gfxFontGroup> newFontGroup;
+  if (aMirrored) {
+    gfxFontStyle fontStyle = *aFontGroup->GetStyle();
+    gfxFontFeature settingRTLM;
+    settingRTLM.mTag = TRUETYPE_TAG('r', 't', 'l', 'm');
+    settingRTLM.mValue = 1;
+    fontStyle.featureSettings.AppendElement(settingRTLM);
+    newFontGroup = aFontGroup->Copy(&fontStyle);
+  }
+  if (!newFontGroup) {
+    newFontGroup = aFontGroup;
+  }
+  return newFontGroup->
+    MakeTextRun(aString, aLength, aThebesContext,
+                aAppUnitsPerDevPixel,
+                aMirrored ? gfxTextRunFactory::TEXT_IS_RTL : 0);
+}
+
 static void
 NormalizeDefaultFont(nsFont& aFont)
 {
   if (aFont.fontlist.GetDefaultFontType() != eFamily_none) {
     aFont.fontlist.Append(aFont.fontlist.GetDefaultFontType());
     aFont.fontlist.SetDefaultFontType(eFamily_none);
   }
 }
@@ -73,30 +106,33 @@ public:
   virtual const FontFamilyName&
   FontNameFor(const nsGlyphCode& aGlyphCode) const = 0;
 
   // Getters for the parts
   virtual nsGlyphCode ElementAt(gfxContext*   aThebesContext,
                                 int32_t       aAppUnitsPerDevPixel,
                                 gfxFontGroup* aFontGroup,
                                 char16_t      aChar,
+                                bool          aMirrored,
                                 bool          aVertical,
                                 uint32_t      aPosition) = 0;
   virtual nsGlyphCode BigOf(gfxContext*   aThebesContext,
                             int32_t       aAppUnitsPerDevPixel,
                             gfxFontGroup* aFontGroup,
                             char16_t      aChar,
+                            bool          aMirrored,
                             bool          aVertical,
                             uint32_t      aSize) = 0;
 
   // True if this table contains parts to render this char
   virtual bool HasPartsOf(gfxContext*   aThebesContext,
                           int32_t       aAppUnitsPerDevPixel,
                           gfxFontGroup* aFontGroup,
                           char16_t      aChar,
+                          bool          aMirrored,
                           bool          aVertical) = 0;
 
   virtual gfxTextRun* MakeTextRun(gfxContext*        aThebesContext,
                                   int32_t            aAppUnitsPerDevPixel,
                                   gfxFontGroup*      aFontGroup,
                                   const nsGlyphCode& aGlyph) = 0;
 protected:
   nsGlyphTable() : mCharCache(0) {}
@@ -180,44 +216,47 @@ public:
                  "nsPropertiesTable can only access glyphs by code point");
     return mGlyphCodeFonts[aGlyphCode.font];
   }
 
   virtual nsGlyphCode ElementAt(gfxContext*   aThebesContext,
                                 int32_t       aAppUnitsPerDevPixel,
                                 gfxFontGroup* aFontGroup,
                                 char16_t      aChar,
+                                bool          aMirrored,
                                 bool          aVertical,
                                 uint32_t      aPosition) MOZ_OVERRIDE;
 
   virtual nsGlyphCode BigOf(gfxContext*   aThebesContext,
                             int32_t       aAppUnitsPerDevPixel,
                             gfxFontGroup* aFontGroup,
                             char16_t      aChar,
+                            bool          aMirrored,
                             bool          aVertical,
                             uint32_t      aSize) MOZ_OVERRIDE
   {
     return ElementAt(aThebesContext, aAppUnitsPerDevPixel, aFontGroup,
-                     aChar, aVertical, 4 + aSize);
+                     aChar, aMirrored, aVertical, 4 + aSize);
   }
 
   virtual bool HasPartsOf(gfxContext*   aThebesContext,
                           int32_t       aAppUnitsPerDevPixel,
                           gfxFontGroup* aFontGroup,
                           char16_t      aChar,
+                          bool          aMirrored,
                           bool          aVertical) MOZ_OVERRIDE
   {
     return (ElementAt(aThebesContext, aAppUnitsPerDevPixel, aFontGroup,
-                      aChar, aVertical, 0).Exists() ||
+                      aChar, aMirrored, aVertical, 0).Exists() ||
             ElementAt(aThebesContext, aAppUnitsPerDevPixel, aFontGroup,
-                      aChar, aVertical, 1).Exists() ||
+                      aChar, aMirrored, aVertical, 1).Exists() ||
             ElementAt(aThebesContext, aAppUnitsPerDevPixel, aFontGroup,
-                      aChar, aVertical, 2).Exists() ||
+                      aChar, aMirrored, aVertical, 2).Exists() ||
             ElementAt(aThebesContext, aAppUnitsPerDevPixel, aFontGroup,
-                      aChar, aVertical, 3).Exists());
+                      aChar, aMirrored, aVertical, 3).Exists());
   }
 
   virtual gfxTextRun* MakeTextRun(gfxContext*        aThebesContext,
                                   int32_t            aAppUnitsPerDevPixel,
                                   gfxFontGroup*      aFontGroup,
                                   const nsGlyphCode& aGlyph) MOZ_OVERRIDE;
 private:
 
@@ -254,16 +293,17 @@ private:
 };
 
 /* virtual */
 nsGlyphCode
 nsPropertiesTable::ElementAt(gfxContext*   /* aThebesContext */,
                              int32_t       /* aAppUnitsPerDevPixel */,
                              gfxFontGroup* /* aFontGroup */,
                              char16_t      aChar,
+                             bool          /* aMirrored */,
                              bool          /* aVertical */,
                              uint32_t      aPosition)
 {
   if (mState == NS_TABLE_STATE_ERROR) return kNullGlyph;
   // Load glyph properties if this is the first time we have been here
   if (mState == NS_TABLE_STATE_EMPTY) {
     nsAutoString primaryFontName;
     mGlyphCodeFonts[0].AppendToString(primaryFontName);
@@ -390,28 +430,31 @@ public:
   {
     MOZ_COUNT_DTOR(nsOpenTypeTable);
   }
 
   virtual nsGlyphCode ElementAt(gfxContext*   aThebesContext,
                                 int32_t       aAppUnitsPerDevPixel,
                                 gfxFontGroup* aFontGroup,
                                 char16_t      aChar,
+                                bool          aMirrored,
                                 bool          aVertical,
                                 uint32_t      aPosition) MOZ_OVERRIDE;
   virtual nsGlyphCode BigOf(gfxContext*   aThebesContext,
                             int32_t       aAppUnitsPerDevPixel,
                             gfxFontGroup* aFontGroup,
                             char16_t      aChar,
+                            bool          aMirrored,
                             bool          aVertical,
                             uint32_t      aSize) MOZ_OVERRIDE;
   virtual bool HasPartsOf(gfxContext*   aThebesContext,
                           int32_t       aAppUnitsPerDevPixel,
                           gfxFontGroup* aFontGroup,
                           char16_t      aChar,
+                          bool          aMirrored,
                           bool          aVertical) MOZ_OVERRIDE;
 
   const FontFamilyName&
   FontNameFor(const nsGlyphCode& aGlyphCode) const MOZ_OVERRIDE {
     NS_ASSERTION(aGlyphCode.IsGlyphID(),
                  "nsOpenTypeTable can only access glyphs by id");
     return mFontFamilyName;
   }
@@ -431,61 +474,84 @@ public:
     }
     return new nsOpenTypeTable(aFont->GetFontEntry());
   }
 
 private:
   nsRefPtr<gfxFontEntry> mFontEntry;
   FontFamilyName mFontFamilyName;
   uint32_t mGlyphID;
+  bool mMirroredCache;
 
   explicit nsOpenTypeTable(gfxFontEntry* aFontEntry)
-    : mFontEntry(aFontEntry),
-      mFontFamilyName(aFontEntry->FamilyName(), eUnquotedName) {
+    : mFontEntry(aFontEntry)
+    , mFontFamilyName(aFontEntry->FamilyName(), eUnquotedName)
+    , mMirroredCache(false) {
     MOZ_COUNT_CTOR(nsOpenTypeTable);
   }
 
   void UpdateCache(gfxContext*   aThebesContext,
                    int32_t       aAppUnitsPerDevPixel,
                    gfxFontGroup* aFontGroup,
-                   char16_t      aChar);
+                   char16_t      aChar,
+                   bool          aMirrored);
 };
 
 void
 nsOpenTypeTable::UpdateCache(gfxContext*   aThebesContext,
                              int32_t       aAppUnitsPerDevPixel,
                              gfxFontGroup* aFontGroup,
-                             char16_t      aChar)
+                             char16_t      aChar,
+                             bool          aMirrored)
 {
-  if (mCharCache != aChar) {
+  if (mCharCache != aChar || mMirroredCache != aMirrored) {
     nsAutoPtr<gfxTextRun> textRun;
-    textRun = aFontGroup->
-      MakeTextRun(&aChar, 1, aThebesContext, aAppUnitsPerDevPixel, 0);
-    const gfxTextRun::CompressedGlyph& data = textRun->GetCharacterGlyphs()[0];
+    textRun = MakeTextRunWithDirection(aFontGroup, &aChar, 1, aThebesContext,
+                                       aAppUnitsPerDevPixel, aMirrored);
+    gfxTextRun::CompressedGlyph data = textRun->GetCharacterGlyphs()[0];
     if (data.IsSimpleGlyph()) {
       mGlyphID = data.GetSimpleGlyph();
     } else if (data.GetGlyphCount() == 1) {
       mGlyphID = textRun->GetDetailedGlyphs(0)->mGlyphID;
     } else {
       mGlyphID = 0;
     }
+    if (mGlyphID && aMirrored && !IsMirrorableUnicodeCharacter(aChar)) {
+      // Verify whether the "rtlm" transform was successfully applied for this
+      // font and clear the glyph index otherwise. This will give a chance to
+      // try rtl-aware math fonts later in order to mirror this glyph.
+      textRun = aFontGroup->MakeTextRun(&aChar, 1, aThebesContext,
+                                        aAppUnitsPerDevPixel, 0);
+      data = textRun->GetCharacterGlyphs()[0];
+      if ((data.IsSimpleGlyph() && data.GetSimpleGlyph() == mGlyphID) ||
+          (!data.IsSimpleGlyph() && data.GetGlyphCount() == 1 &&
+           textRun->GetDetailedGlyphs(0)->mGlyphID == mGlyphID)) {
+        mGlyphID = 0;
+      }
+    }
     mCharCache = aChar;
+    mMirroredCache = aMirrored;
   }
 }
 
 /* virtual */
 nsGlyphCode
 nsOpenTypeTable::ElementAt(gfxContext*   aThebesContext,
                            int32_t       aAppUnitsPerDevPixel,
                            gfxFontGroup* aFontGroup,
                            char16_t      aChar,
+                           bool          aMirrored,
                            bool          aVertical,
                            uint32_t      aPosition)
 {
-  UpdateCache(aThebesContext, aAppUnitsPerDevPixel, aFontGroup, aChar);
+  UpdateCache(aThebesContext, aAppUnitsPerDevPixel, aFontGroup, aChar,
+              aMirrored);
+  if (!mGlyphID) {
+    return kNullGlyph;
+  }
 
   uint32_t parts[4];
   if (!mFontEntry->GetMathVariantsParts(mGlyphID, aVertical, parts)) {
     return kNullGlyph;
   }
 
   uint32_t glyphID = parts[aPosition];
   if (!glyphID) {
@@ -498,20 +564,25 @@ nsOpenTypeTable::ElementAt(gfxContext*  
 }
 
 /* virtual */
 nsGlyphCode
 nsOpenTypeTable::BigOf(gfxContext*   aThebesContext,
                        int32_t       aAppUnitsPerDevPixel,
                        gfxFontGroup* aFontGroup,
                        char16_t      aChar,
+                       bool          aMirrored,
                        bool          aVertical,
                        uint32_t      aSize)
 {
-  UpdateCache(aThebesContext, aAppUnitsPerDevPixel, aFontGroup, aChar);
+  UpdateCache(aThebesContext, aAppUnitsPerDevPixel, aFontGroup, aChar,
+              aMirrored);
+  if (!mGlyphID) {
+    return kNullGlyph;
+  }
 
   uint32_t glyphID =
     mFontEntry->GetMathVariantsSize(mGlyphID, aVertical, aSize);
   if (!glyphID) {
     return kNullGlyph;
   }
 
   nsGlyphCode glyph;
@@ -521,19 +592,24 @@ nsOpenTypeTable::BigOf(gfxContext*   aTh
 }
 
 /* virtual */
 bool
 nsOpenTypeTable::HasPartsOf(gfxContext*   aThebesContext,
                             int32_t       aAppUnitsPerDevPixel,
                             gfxFontGroup* aFontGroup,
                             char16_t      aChar,
+                            bool          aMirrored,
                             bool          aVertical)
 {
-  UpdateCache(aThebesContext, aAppUnitsPerDevPixel, aFontGroup, aChar);
+  UpdateCache(aThebesContext, aAppUnitsPerDevPixel, aFontGroup, aChar,
+              aMirrored);
+  if (!mGlyphID) {
+    return false;
+  }
 
   uint32_t parts[4];
   if (!mFontEntry->GetMathVariantsParts(mGlyphID, aVertical, parts)) {
     return false;
   }
 
   return parts[0] || parts[1] || parts[2] || parts[3];
 }
@@ -1114,17 +1190,17 @@ StretchEnumContext::TryVariants(nsGlyphT
 
   // start at size = 1 (size = 0 is the char at its normal size)
   int32_t size = 1;
   nsGlyphCode ch;
   nscoord displayOperatorMinHeight = 0;
   if (largeopOnly) {
     NS_ASSERTION(isVertical, "Stretching should be in the vertical direction");
     ch = aGlyphTable->BigOf(mThebesContext, oneDevPixel, *aFontGroup, uchar,
-                            isVertical, 0);
+                            mChar->mMirrored, isVertical, 0);
     if (ch.IsGlyphID()) {
       gfxFont* mathFont = aFontGroup->get()->GetFirstMathFont();
       // For OpenType MATH fonts, we will rely on the DisplayOperatorMinHeight
       // to select the right size variant. Note that the value is sometimes too
       // small so we use kLargeOpFactor/kIntegralFactor as a minimum value.
       if (mathFont) {
         displayOperatorMinHeight =
           mathFont->GetMathConstant(gfxFontEntry::DisplayOperatorMinHeight,
@@ -1145,17 +1221,18 @@ StretchEnumContext::TryVariants(nsGlyphT
       }
     }
   }
 #ifdef NOISY_SEARCH
   printf("  searching in %s ...\n",
            NS_LossyConvertUTF16toASCII(aFamily).get());
 #endif
   while ((ch = aGlyphTable->BigOf(mThebesContext, oneDevPixel, *aFontGroup,
-                                  uchar, isVertical, size)).Exists()) {
+                                  uchar, mChar->mMirrored,
+                                  isVertical, size)).Exists()) {
 
     if (!mChar->SetFontFamily(mPresContext, aGlyphTable, ch, aFamilyList, font,
                               aFontGroup)) {
       // if largeopOnly is set, break now
       if (largeopOnly) break;
       ++size;
       continue;
     }
@@ -1255,22 +1332,23 @@ nsMathMLChar::StretchEnumContext::TryPar
   nsBoundingMetrics bmdata[4];
   nscoord sizedata[4];
 
   bool isVertical = (mDirection == NS_STRETCH_DIRECTION_VERTICAL);
   nscoord oneDevPixel = mPresContext->AppUnitsPerDevPixel();
   char16_t uchar = mChar->mData[0];
   bool maxWidth = (NS_STRETCH_MAXWIDTH & mStretchHint) != 0;
   if (!aGlyphTable->HasPartsOf(mThebesContext, oneDevPixel, *aFontGroup,
-                               uchar, isVertical))
+                               uchar, mChar->mMirrored, isVertical))
     return false; // to next table
 
   for (int32_t i = 0; i < 4; i++) {
     nsGlyphCode ch = aGlyphTable->ElementAt(mThebesContext, oneDevPixel,
-                                            *aFontGroup, uchar, isVertical, i);
+                                            *aFontGroup, uchar, mChar->mMirrored,
+                                            isVertical, i);
     chdata[i] = ch;
     if (ch.Exists()) {
       if (!mChar->SetFontFamily(mPresContext, aGlyphTable, ch, aFamilyList, font,
                                 aFontGroup))
         return false;
 
       textRun[i] = aGlyphTable->MakeTextRun(mThebesContext, oneDevPixel,
                                             *aFontGroup, ch);
@@ -1531,19 +1609,21 @@ nsMathMLChar::StretchInternal(nsPresCont
   aPresContext->DeviceContext()->
     GetMetricsFor(font,
                   mStyleContext->StyleFont()->mLanguage,
                   aPresContext->GetUserFontSet(),
                   aPresContext->GetTextPerfMetrics(),
                   *getter_AddRefs(fm));
   uint32_t len = uint32_t(mData.Length());
   nsAutoPtr<gfxTextRun> textRun;
-  textRun = fm->GetThebesFontGroup()->
-    MakeTextRun(static_cast<const char16_t*>(mData.get()), len, aThebesContext,
-                aPresContext->AppUnitsPerDevPixel(), 0);
+  textRun = MakeTextRunWithDirection(fm->GetThebesFontGroup(),
+                                     static_cast<const char16_t*>(mData.get()),
+                                     len, aThebesContext,
+                                     aPresContext->AppUnitsPerDevPixel(),
+                                     mMirrored);
   aDesiredStretchSize = MeasureTextRun(aThebesContext, textRun);
   mGlyphs[0] = textRun;
 
   bool maxWidth = (NS_STRETCH_MAXWIDTH & aStretchHint) != 0;
   if (!maxWidth) {
     mUnscaledAscent = aDesiredStretchSize.ascent;
   }
 
@@ -1672,16 +1752,20 @@ nsMathMLChar::StretchInternal(nsPresCont
     // variables accordingly.
     mUnscaledAscent = aDesiredStretchSize.ascent;
   }
     
   if (glyphFound) {
     return NS_OK;
   }
 
+  // XXXfredw if mMirrored && !IsMirrorableUnicodeCharacter(mData[0]) (e.g.
+  // for radicals) should we try another attempt in RTL before applying the
+  // scale?
+
   // stretchy character
   if (stretchy) {
     if (isVertical) {
       float scale =
         std::min(kMaxScaleFactor, float(aContainerSize.ascent + aContainerSize.descent) /
         (aDesiredStretchSize.ascent + aDesiredStretchSize.descent));
       if (!largeop || scale > 1.0) {
         // make the character match the desired height.
@@ -1742,16 +1826,40 @@ nsMathMLChar::StretchInternal(nsPresCont
       if (!maxWidth) {
         mScaleY *= scale;
       }
       aDesiredStretchSize.ascent *= scale;
       aDesiredStretchSize.descent *= scale;
     }
   }
 
+  if (mMirrored && len == 1 && !IsMirrorableUnicodeCharacter(mData[0])) {
+    // Verify whether the "rtlm" transform was successfully applied and
+    // otherwise use a scale transform to mirror the glyph.
+    // XXXfred This changes the semantics of e.g. clockwise integral.
+    char16_t uchar = mData[0];
+    textRun = fm->
+      GetThebesFontGroup()->
+      MakeTextRun(&uchar, 1,
+                  aThebesContext, aPresContext->AppUnitsPerDevPixel(), 0);
+    gfxTextRun::CompressedGlyph data = textRun->GetCharacterGlyphs()[0];
+    uint32_t glyphID = 0;
+    if (data.IsSimpleGlyph()) {
+      glyphID = data.GetSimpleGlyph();
+    } else if (data.GetGlyphCount() == 1) {
+      glyphID = textRun->GetDetailedGlyphs(0)->mGlyphID;
+    }
+    data = mGlyphs[0]->GetCharacterGlyphs()[0];
+    if ((data.IsSimpleGlyph() && data.GetSimpleGlyph() == glyphID) ||
+        (!data.IsSimpleGlyph() && data.GetGlyphCount() == 1 &&
+         textRun->GetDetailedGlyphs(0)->mGlyphID == glyphID)) {
+      mScaleX = -mScaleX;
+    }
+  }
+
   return NS_OK;
 }
 
 nsresult
 nsMathMLChar::Stretch(nsPresContext*           aPresContext,
                       nsRenderingContext&     aRenderingContext,
                       nsStretchDirection       aStretchDirection,
                       const nsBoundingMetrics& aContainerSize,
@@ -2028,34 +2136,28 @@ nsMathMLChar::Display(nsDisplayListBuild
                                   !aSelectedRect->IsEmpty()));
 }
 
 void
 nsMathMLChar::ApplyTransforms(gfxContext* aThebesContext,
                               int32_t aAppUnitsPerGfxUnit,
                               nsRect &r)
 {
+  bool mirrorWithScale = mScaleX < 0;
+
   // apply the transforms
-  if (mMirrored) {
-    nsPoint pt = r.TopRight();
-    aThebesContext->
-      Translate(gfxPoint(NSAppUnitsToFloatPixels(pt.x, aAppUnitsPerGfxUnit),
-                         NSAppUnitsToFloatPixels(pt.y, aAppUnitsPerGfxUnit)));
-    aThebesContext->Scale(-mScaleX, mScaleY);
-  } else {
-    nsPoint pt = r.TopLeft();
-    aThebesContext->
-      Translate(gfxPoint(NSAppUnitsToFloatPixels(pt.x, aAppUnitsPerGfxUnit),
-                         NSAppUnitsToFloatPixels(pt.y, aAppUnitsPerGfxUnit)));
-    aThebesContext->Scale(mScaleX, mScaleY);
-  }
+  nsPoint pt = mirrorWithScale ? r.TopRight() : r.TopLeft();
+  aThebesContext->
+    Translate(gfxPoint(NSAppUnitsToFloatPixels(pt.x, aAppUnitsPerGfxUnit),
+                       NSAppUnitsToFloatPixels(pt.y, aAppUnitsPerGfxUnit)));
+  aThebesContext->Scale(mScaleX, mScaleY);
 
   // update the bounding rectangle.
   r.x = r.y = 0;
-  r.width /= mScaleX;
+  r.width /= (mirrorWithScale ? -mScaleX : mScaleX);
   r.height /= mScaleY;
 }
 
 void
 nsMathMLChar::PaintForeground(nsPresContext* aPresContext,
                               nsRenderingContext& aRenderingContext,
                               nsPoint aPt,
                               bool aIsSelected)
@@ -2085,19 +2187,22 @@ nsMathMLChar::PaintForeground(nsPresCont
 
   switch(mDraw)
   {
     case DRAW_NORMAL:
     case DRAW_VARIANT:
       // draw a single glyph (base size or size variant)
       // XXXfredw verify if mGlyphs[0] is non-null to workaround bug 973322.
       if (mGlyphs[0]) {
-        mGlyphs[0]->Draw(thebesContext, gfxPoint(0.0, mUnscaledAscent),
-                         DrawMode::GLYPH_FILL, 0, mGlyphs[0]->GetLength(),
-                         nullptr, nullptr, nullptr);
+        mGlyphs[0]->
+          Draw(thebesContext,
+               gfxPoint(mMirrored && mDraw == DRAW_NORMAL ?
+                        r.width : 0.0, mUnscaledAscent),
+               DrawMode::GLYPH_FILL, 0, mGlyphs[0]->GetLength(),
+               nullptr, nullptr, nullptr);
       }
       break;
     case DRAW_PARTS: {
       // paint by parts
       if (NS_STRETCH_DIRECTION_VERTICAL == mDirection)
         PaintVertically(aPresContext, thebesContext, r);
       else if (NS_STRETCH_DIRECTION_HORIZONTAL == mDirection)
         PaintHorizontally(aPresContext, thebesContext, r);
