# HG changeset patch
# Parent d4d7af62d40ef0026f3ce08c0dd52dcd6c76c129
# User Frédéric Wang <fred.wang@free.fr>
Update style mapping of token and mstyle MathML attributes. b=?, r=karlt.

diff --git a/content/mathml/content/src/nsMathMLElement.cpp b/content/mathml/content/src/nsMathMLElement.cpp
--- a/content/mathml/content/src/nsMathMLElement.cpp
+++ b/content/mathml/content/src/nsMathMLElement.cpp
@@ -116,16 +116,18 @@ static nsGenericElement::MappedAttribute
   { nullptr }
 };
 
 static nsGenericElement::MappedAttributeEntry sTokenStyles[] = {
   { &nsGkAtoms::mathsize_ },
   { &nsGkAtoms::fontsize_ },
   { &nsGkAtoms::color },
   { &nsGkAtoms::fontfamily_ },
+  { &nsGkAtoms::fontstyle_ },
+  { &nsGkAtoms::fontweight_ },
   { nullptr }
 };
 
 static nsGenericElement::MappedAttributeEntry sEnvironmentStyles[] = {
   { &nsGkAtoms::scriptlevel_ },
   { &nsGkAtoms::scriptminsize_ },
   { &nsGkAtoms::scriptsizemultiplier_ },
   { &nsGkAtoms::background },
@@ -518,16 +520,66 @@ nsMathMLElement::MapMathMLAttributesInto
     // values: string
     // 
     value = aAttributes->GetAttr(nsGkAtoms::fontfamily_);
     nsCSSValue* fontFamily = aData->ValueForFontFamily();
     if (value && value->Type() == nsAttrValue::eString &&
         fontFamily->GetUnit() == eCSSUnit_Null) {
       fontFamily->SetStringValue(value->GetStringValue(), eCSSUnit_Families);
     }
+
+    // fontstyle
+    //
+    // "Specified the font style to use for the token. Deprecated in favor of
+    //  mathvariant."
+    //
+    // values: "normal" | "italic"
+    // default:	normal (except on <mi>) 
+    //
+    // Note that the font-style property is reset in layout/style/ when
+    // -moz-math-variant is specified.
+    nsCSSValue* fontStyle = aData->ValueForFontStyle();
+    value = aAttributes->GetAttr(nsGkAtoms::fontstyle_);
+    if (value && value->Type() == nsAttrValue::eString &&
+        fontStyle->GetUnit() == eCSSUnit_Null) {
+      nsAutoString str(value->GetStringValue());
+      str.CompressWhitespace();
+      if (str.EqualsASCII("normal")) {
+        fontStyle->SetIntValue(NS_STYLE_FONT_STYLE_NORMAL,
+                               eCSSUnit_Enumerated);
+      } else if (str.EqualsASCII("italic")) {
+        fontStyle->SetIntValue(NS_STYLE_FONT_STYLE_ITALIC,
+                               eCSSUnit_Enumerated);
+      }
+    }
+
+    // fontweight
+    //
+    // "Specified the font weight for the token. Deprecated in favor of
+    // mathvariant."
+    //
+    // values: "normal" | "bold"
+    // default: normal
+    //
+    // Note that the font-weight property is reset in layout/style/ when
+    // -moz-math-variant is specified.
+    nsCSSValue* fontWeight = aData->ValueForFontWeight();
+    value = aAttributes->GetAttr(nsGkAtoms::fontweight_);
+    if (value && value->Type() == nsAttrValue::eString &&
+        fontWeight->GetUnit() == eCSSUnit_Null) {
+      nsAutoString str(value->GetStringValue());
+      str.CompressWhitespace();
+      if (str.EqualsASCII("normal")) {
+        fontWeight->SetIntValue(NS_STYLE_FONT_WEIGHT_NORMAL,
+                               eCSSUnit_Enumerated);
+      } else if (str.EqualsASCII("bold")) {
+        fontWeight->SetIntValue(NS_STYLE_FONT_WEIGHT_BOLD,
+                                eCSSUnit_Enumerated);
+      }
+    }
   }
 
   // mathbackground
   // 
   // "Specifies the background color to be used to fill in the bounding box of
   // the element and its children. The default, 'transparent', lets the
   // background color, if any, used in the current rendering context to show
   // through."
@@ -583,18 +635,75 @@ nsMathMLElement::MapMathMLAttributesInto
     nscolor color;
     nsCSSValue* colorValue = aData->ValueForColor();
     if (value && value->GetColorValue(color) &&
         colorValue->GetUnit() == eCSSUnit_Null) {
       colorValue->SetColorValue(color);
     }
   }
 
+  if (aData->mSIDs & NS_STYLE_INHERIT_BIT(Text)) {
+    // mathvariant
+    //
+    // "Specifies the logical class of the token. Note that this class is more
+    // than styling, it typically conveys semantic intent;"
+    //
+    // values: "normal" | "bold" | "italic" | "bold-italic" | "double-struck" |
+    // "bold-fraktur" | "script" | "bold-script" | "fraktur" | "sans-serif" |
+    // "bold-sans-serif" | "sans-serif-italic" | "sans-serif-bold-italic" |
+    // "monospace" | "initial" | "tailed" | "looped" | "stretched"
+    // default: normal (except on <mi>)
+    //
+    nsCSSValue* mathVariant = aData->ValueForMathVariant();
+    const nsAttrValue* value = aAttributes->GetAttr(nsGkAtoms::mathvariant_);
+    if (value && value->Type() == nsAttrValue::eString &&
+        mathVariant->GetUnit() == eCSSUnit_Null) {
+      nsAutoString str(value->GetStringValue());
+      str.CompressWhitespace();
+      static const char sizes[19][23] = {
+        "normal", "bold", "italic", "bold-italic", "double-struck",
+        "bold-fraktur", "script", "bold-script", "fraktur", "sans-serif",
+        "bold-sans-serif", "sans-serif-italic", "sans-serif-bold-italic",
+        "monospace", "initial", "tailed", "looped", "stretched"
+      };
+      static const PRInt32 values[NS_ARRAY_LENGTH(sizes)] = {
+        NS_MATHML_MATHVARIANT_NORMAL, NS_MATHML_MATHVARIANT_BOLD,
+        NS_MATHML_MATHVARIANT_ITALIC, NS_MATHML_MATHVARIANT_BOLD_ITALIC,
+        NS_MATHML_MATHVARIANT_DOUBLE_STRUCK, NS_MATHML_MATHVARIANT_BOLD_FRAKTUR,
+        NS_MATHML_MATHVARIANT_SCRIPT, NS_MATHML_MATHVARIANT_BOLD_SCRIPT,
+        NS_MATHML_MATHVARIANT_FRAKTUR, NS_MATHML_MATHVARIANT_SANS_SERIF,
+        NS_MATHML_MATHVARIANT_BOLD_SANS_SERIF,
+        NS_MATHML_MATHVARIANT_SANS_SERIF_ITALIC,
+        NS_MATHML_MATHVARIANT_SANS_SERIF_BOLD_ITALIC,
+        NS_MATHML_MATHVARIANT_MONOSPACE, NS_MATHML_MATHVARIANT_INITIAL,
+        NS_MATHML_MATHVARIANT_TAILED, NS_MATHML_MATHVARIANT_LOOPED,
+        NS_MATHML_MATHVARIANT_STRETCHED
+      };
+      for (PRUint32 i = 0; i < ArrayLength(sizes); ++i) {
+        if (str.EqualsASCII(sizes[i])) {
+          mathVariant->SetIntValue(values[i], eCSSUnit_Enumerated);
+          break;
+        }
+      }
+    }
+  }
+
   if (aData->mSIDs & NS_STYLE_INHERIT_BIT(Position)) {
-    // width: value
+    // width
+    //
+    // "Specifies the desired width of the entire table and is intended for
+    // visual user agents. When the value is a percentage value, the value is
+    // relative to the horizontal space a MathML renderer has available for the
+    // math element. When the value is "auto", the MathML renderer should
+    // calculate the table width from its contents using whatever layout
+    // algorithm it chooses. "
+    //
+    // values: "auto" | length
+    // default: auto
+    //
     nsCSSValue* width = aData->ValueForWidth();
     if (width->GetUnit() == eCSSUnit_Null) {
       const nsAttrValue* value = aAttributes->GetAttr(nsGkAtoms::width);
       // This does not handle auto and unitless values
       if (value && value->Type() == nsAttrValue::eString) {
         ParseNumericValue(value->GetStringValue(), *width, 0);
       }
     }
diff --git a/layout/mathml/mathml.css b/layout/mathml/mathml.css
--- a/layout/mathml/mathml.css
+++ b/layout/mathml/mathml.css
@@ -19,181 +19,83 @@ math {
   direction: ltr;
   unicode-bidi: embed;
   display: inline;
   font-size: inherit;
   font-style: normal;
   font-family: MathJax_Main, STIXGeneral, DejaVu Serif, DejaVu Sans, Cambria, Cambria Math, Times, Lucida Sans Unicode, OpenSymbol, Standard Symbols L, serif;
   text-rendering: optimizeLegibility;
   -moz-float-edge: margin-box;
+  -moz-math-token: none;
+  -moz-math-variant: none;
 }
 math[mode="display"], math[display="block"] {
   display: block;
   text-align: -moz-center;
 }
 math[display="inline"] {
   display: inline;
 }
 
 /**************************************************************************/
-/* Style switching during frame construction depending on the context of <mi>:
-   These rules are not used when mathvariant or fontstyle is specified
-   explicitly. 
+/* Token elements                                                         */
 /**************************************************************************/
 
-/* If the textual content of an <mi> consists of a single character
-   with a corresponding mathematical italic alphanumeric character,
-   then try to emulate that character */
-[_moz-math-font-style="italic"] {
-  font-style: italic;
-  font-weight: normal;
+mn, mo, mtext, ms {
+  -moz-math-token: generic-text;
 }
-/* If the textual content consists of multiple characters, then the default is
-   mathvariant=normal.  It seems that mathvariant=normal should be interpreted
-   to mean non-slanted:
-
-   http://www.w3.org/TR/2003/REC-MathML2-20031021/chapter3.html#presm.commatt
-
-   "In particular, inheritance of the mathvariant attribute does not follow
-    the CSS model. The default value for this attribute is "normal"
-    (non-slanted) for all tokens except mi. ... (The deprecated fontslant
-    attribute also behaves this way.)"   
- */
-[_moz-math-font-style="normal"] {
-  font-style: normal;
+mi {
+  -moz-math-token: identifier;
 }
-/* A style-invariant character preserves its own style */
-[_moz-math-font-style="invariant"] {
-  font-style: normal;
-  font-weight: normal;
+ms {
+  display: inline;
+}
+ms:before, ms:after {
+  content: "\0022"
+}
+ms[lquote]:before {
+  content: attr(lquote)
+}
+ms[rquote]:after {
+  content: attr(rquote)
 }
 
 /**************************************************************************/
 /* Links                                                                  */
 /**************************************************************************/
 :-moz-any-link {
   text-decoration: none !important;
 }
 
 /**************************************************************************/
 /* attributes common to all tags                                          */
 /**************************************************************************/
 
-/* deprecated attributes from MathML 1.0 */
+/* These attributes are mapped to style in nsMathMLElement.cpp:
 
-/* fontstyle */
-[fontstyle="normal"] {
-  font-style: normal;
-}
-[fontstyle="italic"] {
-  font-style: italic;
-}
-/* fontweight */
-[fontweight="normal"] {
-  font-weight: normal;
-}
-[fontweight="bold"] {
-  font-weight: bold;
-}
+   - background -> background                             (deprecated)
+   - color -> color                                       (deprecated)
+   - fontfamily -> font-family                            (deprecated)
+   - fontsize -> font-size                                (deprecated)
+   - fontstyle -> font-style                              (deprecated)
+   - fontweight -> font-weight                            (deprecated)
+   - mathvariant -> -moz-math-variant
+   - scriptsizemultiplier -> -moz-script-size-multiplier
+   - scriptminsize -> -moz-script-min-size
+   - scriptlevel -> -moz-script-level
+   - mathsize -> font-size
+   - mathcolor -> color
+   - mathbackground -> background
 
-/* attributes from MathML 2.0 */
-
-/* These ones are handled in the back-end:
-   mathcolor (replaces 'color'):
-     #rgb | #rrggbb | html-color-name
-   mathbackground (replaces 'background'):
-     #rgb | #rrggbb | html-color-name
 */
-/* mathvariant (replaces 'fontstyle' & 'fontweight' & 'fontslant'):
-     normal | bold | italic | bold-italic | double-struck | bold-fraktur | script |
-     bold-script | fraktur | sans-serif | bold-sans-serif | sans-serif-italic |
-     sans-serif-bold-italic | monospace
-
-   Note1: Back-end code for these is not yet written (bug 114365):
-          double-struck, script, fraktur, bold-fraktur, bold-script
-
-   Note2: Don't use the 'font' shorthand because it resets the font-size and this
-          breaks the propagation of the scriptlevel size.
-
-   XXX bugs 46622 & 114365: need -moz-math-serif, etc, to only lookup math fonts
-
-   The meaning of mathvariant=normal is unclear as there is no interpretation
-   that "corresponds to SMP Math Alphanumeric Symbol characters"
-   (http://www.w3.org/TR/2003/REC-MathML2-20031021/chapter3.html#presm.commatt),
-   but let's assume an explicit mathvariant=normal is an attempt to reset all
-   style.
-*/
-[mathvariant] { /* shared and same as [mathvariant="normal"] */
-  /* reset all font properties except those that affect the size */
-  font-family: MathJax_Main, STIXGeneral, DejaVu Serif, DejaVu Sans, Cambria, Cambria Math, Times, Lucida Sans Unicode, OpenSymbol, Standard Symbols L, serif;
-  font-style: normal;
-  font-variant: normal;
-  font-weight: normal;
-}
-[mathvariant="bold-fraktur"] {
-  font-weight: bold;
-  font-family: MathJax_Fraktur, STIXGeneral, DejaVu Serif, DejaVu Sans, Cambria, Cambria Math, Times, Lucida Sans Unicode, OpenSymbol, Standard Symbols L, serif;
-}
-[mathvariant="bold-script"] {
-  font-weight: bold;
-  font-family: MathJax_Script, STIXGeneral, DejaVu Serif, DejaVu Sans, Cambria, Cambria Math, Times, Lucida Sans Unicode, OpenSymbol, Standard Symbols L, serif;
-}
-[mathvariant="bold"] {
-  font-weight: bold;
-}
-[mathvariant="italic"] { 
-  font-style: italic;
-}
-[mathvariant="bold-italic"] {
-  font-weight: bold;
-  font-style: italic;
-}
-[mathvariant="sans-serif"] {
-  font-family: MathJax_SansSerif, sans-serif;
-}
-[mathvariant="bold-sans-serif"] {
-  font-weight: bold;
-  font-family: MathJax_SansSerif, sans-serif;
-}
-[mathvariant="sans-serif-italic"] {
-  font-family: MathJax_SansSerif, sans-serif;
-  font-style: italic;
-}
-[mathvariant="sans-serif-bold-italic"] {
-  font-family: MathJax_SansSerif, sans-serif;
-  font-weight: bold;
-  font-style: italic;
-}
-[mathvariant="monospace"] {
-  font-family: MathJax_Typewriter, monospace;
-}
-[mathvariant="double-struck"] {
-  font-family: MathJax_AMS, STIXGeneral, DejaVu Serif, DejaVu Sans, Cambria, Cambria Math, Times, Lucida Sans Unicode, OpenSymbol, Standard Symbols L, serif;
-}
-[mathvariant="script"] {
-  font-family: MathJax_Script, STIXGeneral, DejaVu Serif, DejaVu Sans, Cambria, Cambria Math, Times, Lucida Sans Unicode, OpenSymbol, Standard Symbols L, serif;
-}
-[mathvariant="fraktur"] {
-  font-family: MathJax_Fraktur, STIXGeneral, DejaVu Serif, DejaVu Sans, Cambria, Cambria Math, Times, Lucida Sans Unicode, OpenSymbol, Standard Symbols L, serif;
-}
 
 /**************************************************************************/
-/* tags with generated content                                            */
+/* merror                                                                 */
 /**************************************************************************/
 
-ms {
-  display: inline;
-}
-ms:before {
-  content: open-quote;
-}
-ms:after {
-  content: close-quote;
-}
-
 merror {
   display: block;
   font-family: sans-serif;
   font-weight: bold;
   white-space: pre;
   margin: 1em;
   padding: 1em;
   border-width: thin;
