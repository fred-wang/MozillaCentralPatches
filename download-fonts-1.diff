# HG changeset patch
# Parent 329f0ea4c247c4df8d5828349867883fb636d7b4
# User Frédéric Wang <fred.wang@free.fr>
Bug 295193 - Allow downloading math fonts with Firefox - part 1.

diff --git a/layout/mathml/nsMathMLChar.cpp b/layout/mathml/nsMathMLChar.cpp
--- a/layout/mathml/nsMathMLChar.cpp
+++ b/layout/mathml/nsMathMLChar.cpp
@@ -62,27 +62,62 @@
 #include "nsCSSRendering.h"
 #include "prprf.h"         // For PR_snprintf()
 
 #include "nsDisplayList.h"
 
 #include "nsMathMLOperators.h"
 #include "nsMathMLChar.h"
 
+#include "nsThreadUtils.h"
+#include "nsEventDispatcher.h"
+#include "nsIPrivateDOMEvent.h"
+
 using namespace mozilla;
 
 //#define SHOW_BORDERS 1
 //#define NOISY_SEARCH 1
 
 // -----------------------------------------------------------------------------------
 static const PRUnichar   kSpaceCh   = PRUnichar(' ');
 static const nsGlyphCode kNullGlyph = {{0, 0}, 0};
 typedef enum {eExtension_base, eExtension_variants, eExtension_parts}
   nsMathfontPrefExtension;
 
+// -----------------------------------------------------------------------------
+class nsFontNotificationEvent : public nsRunnable
+{
+public:
+  nsFontNotificationEvent(nsPresContext* aPresContext)
+    : mPresContext(aPresContext)
+  {
+  }
+
+  NS_IMETHOD Run()
+  {
+    nsCOMPtr<nsIDOMEvent> event;
+    if (NS_SUCCEEDED(nsEventDispatcher::CreateEvent(mPresContext, nsnull,
+                                                    NS_LITERAL_STRING("Events"),
+                                                    getter_AddRefs(event)))) {
+      event->InitEvent(NS_LITERAL_STRING("DOMMissingMathMLFonts"), true, true);
+
+      nsCOMPtr<nsIPrivateDOMEvent> privateEvent = do_QueryInterface(event);
+      privateEvent->SetTrusted(true);
+
+      nsEventDispatcher::DispatchDOMEvent(mPresContext->Document(),
+                                          nsnull, event,
+                                          mPresContext, nsnull);
+    }
+    return NS_OK;
+  }
+  
+private:
+  nsPresContext* mPresContext;
+};
+
 // -----------------------------------------------------------------------------------
 // nsGlyphTable is a class that provides an interface for accessing glyphs
 // of stretchy chars. It acts like a table that stores the variants of bigger
 // sizes (if any) and the partial glyphs needed to build extensible symbols.
 // An instance of nsGlyphTable is associated to one primary font. Extra glyphs
 // can be taken in other additional fonts when stretching certain characters.
 // These supplementary fonts are referred to as "external" fonts to the table.
 //
@@ -493,16 +528,20 @@ public:
   nsGlyphTable*
   GetGlyphTableFor(nsPresContext* aPresContext,
                    nsMathMLChar*  aChar);
 
   // Find the glyph table in the list corresponding to the given font family.
   nsGlyphTable*
   GetGlyphTableFor(const nsAString& aFamily);
 
+  // Determine whether the given char can be built by parts
+  bool HasPartsFor(nsPresContext* aPresContext,
+                   nsMathMLChar*  aChar);
+
 private:
   nsGlyphTable* TableAt(PRInt32 aIndex) {
     return &mTableList.ElementAt(aIndex);
   }
   PRInt32 Count() {
     return mTableList.Length();
   }
 
@@ -599,16 +638,32 @@ nsGlyphTableList::GetGlyphTableFor(const
     if (fontName.Equals(aFamily, nsCaseInsensitiveStringComparator())) {
       return glyphTable;
     }
   }
   // Fall back to default Unicode table
   return &mUnicodeTable;
 }
 
+bool
+nsGlyphTableList::HasPartsFor(nsPresContext* aPresContext, 
+                              nsMathMLChar*   aChar)
+{
+  if (mUnicodeTable.HasPartsOf(aPresContext, aChar))
+    return true;
+
+  PRInt32 i;
+  for (i = 0; i < Count(); i++) {
+    nsGlyphTable* glyphTable = TableAt(i);
+    if (glyphTable->HasPartsOf(aPresContext, aChar)) {
+      return true;
+    }
+  }
+  return false;
+}
 // -----------------------------------------------------------------------------------
 
 // Lookup the preferences:
 // "font.mathfont-family.\uNNNN.base"     -- fonts for the base size
 // "font.mathfont-family.\uNNNN.variants" -- fonts for larger glyphs
 // "font.mathfont-family.\uNNNN.parts"    -- fonts for partial glyphs
 // Given the char code and mode of stretch, retrieve the preferred extension
 // font families.
@@ -717,18 +772,16 @@ InitGlobals(nsPresContext* aPresContext)
   // We just want to iterate over the font-family list using the
   // callback mechanism that nsFont has...
   nsFont font("", 0, 0, 0, 0, 0, 0);
   NS_NAMED_LITERAL_CSTRING(defaultKey, "font.mathfont-glyph-tables");
   rv = mathfontProp->GetStringProperty(defaultKey, font.name);
   if (NS_FAILED(rv)) return rv;
 
   // Parse the font list and append an entry for each family to gGlyphTableList
-  nsAutoString missingFamilyList;
-
   font.EnumerateFamilies(MathFontEnumCallback, nsnull);
   return rv;
 }
 
 // -----------------------------------------------------------------------------------
 // And now the implementation of nsMathMLChar
 
 nsStyleContext*
@@ -1689,16 +1742,35 @@ nsMathMLChar::StretchInternal(nsPresCont
       if (!maxWidth) {
         mScaleY *= scale;
       }
       aDesiredStretchSize.ascent *= scale;
       aDesiredStretchSize.descent *= scale;
     }
   }
 
+  if (!maxWidth) {
+    // Send a warning if it seems that the mathematical fonts available are not
+    // enough to stretch the operators. Heuristic rules to determine whether
+    // fonts are missing:
+    // - No glyph variants are available for a largeop in display mode, whereas
+    //   a glyph table was initially found to exist for this character.
+    // - A large scale transform is applied to stretch a character that
+    //   could actually be built by parts with the appropriate fonts installed.
+    if ((!glyphFound && largeop && mGlyphTable) ||
+        ((mScaleX > 2.0 || mScaleY > 2.0) &&
+         gGlyphTableList->HasPartsFor(aPresContext, this))) {
+      if (Preferences::GetBool("font.mathfont-warning")) {
+        // Dispatch the notification
+        nsCOMPtr<nsIRunnable> event = new nsFontNotificationEvent(aPresContext);
+        NS_DispatchToCurrentThread(event);
+      }
+    }
+  }
+
   return NS_OK;
 }
 
 nsresult
 nsMathMLChar::Stretch(nsPresContext*           aPresContext,
                       nsRenderingContext&     aRenderingContext,
                       nsStretchDirection       aStretchDirection,
                       const nsBoundingMetrics& aContainerSize,
diff --git a/modules/libpref/src/init/all.js b/modules/libpref/src/init/all.js
--- a/modules/libpref/src/init/all.js
+++ b/modules/libpref/src/init/all.js
@@ -3536,8 +3536,11 @@ pref("memory.low_commit_space_threshold_
 // than this many mb of physical memory available on the whole machine.
 pref("memory.low_physical_memory_threshold_mb", 0);
 
 // On Windows 32- or 64-bit, don't fire a low-memory notification because of
 // low available physical memory or low commit space more than once every
 // low_memory_notification_interval_ms.
 pref("memory.low_memory_notification_interval_ms", 10000);
 #endif
+
+// warning for missing MathML fonts
+pref("font.mathfont-warning", true);
