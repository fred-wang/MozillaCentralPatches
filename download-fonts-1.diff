# HG changeset patch
# Parent ae6237161b6c49c91cb0e439cdffeeb7f8c87123
# User Frédéric Wang <fred.wang@free.fr>
Bug 295193 - Allow downloading math fonts in Firefox - part 1.

diff --git a/layout/base/nsPresContext.cpp b/layout/base/nsPresContext.cpp
--- a/layout/base/nsPresContext.cpp
+++ b/layout/base/nsPresContext.cpp
@@ -2545,16 +2545,22 @@ nsPresContext::IsCrossProcessRootContent
   if (XRE_GetProcessType() == GeckoProcessType_Default) {
     return true;
   }
 
   TabChild* tabChild = GetTabChildFrom(mShell);
   return (tabChild && tabChild->IsRootContentDocument());
 }
 
+bool
+nsPresContext::IsLoadingFonts()
+{
+  return mUserFontSet && mUserFontSet->IsLoadingFonts();
+}
+
 nsRootPresContext::nsRootPresContext(nsIDocument* aDocument,
                                      nsPresContextType aType)
   : nsPresContext(aDocument, aType),
     mDOMGeneration(0)
 {
   mRegisteredPlugins.Init();
 }
 
diff --git a/layout/base/nsPresContext.h b/layout/base/nsPresContext.h
--- a/layout/base/nsPresContext.h
+++ b/layout/base/nsPresContext.h
@@ -957,16 +957,17 @@ public:
 
   virtual size_t SizeOfExcludingThis(nsMallocSizeOfFun aMallocSizeOf) const;
   virtual size_t SizeOfIncludingThis(nsMallocSizeOfFun aMallocSizeOf) const {
     return aMallocSizeOf(this) + SizeOfExcludingThis(aMallocSizeOf);
   }
 
   bool IsRootContentDocument();
   bool IsCrossProcessRootContentDocument();
+  bool IsLoadingFonts();
 
   bool IsGlyph() const {
     return mIsGlyph;
   }
 
   void SetIsGlyph(bool aValue) {
     mIsGlyph = aValue;
   }
diff --git a/layout/mathml/nsMathMLChar.cpp b/layout/mathml/nsMathMLChar.cpp
--- a/layout/mathml/nsMathMLChar.cpp
+++ b/layout/mathml/nsMathMLChar.cpp
@@ -28,26 +28,150 @@
 
 #include "nsDisplayList.h"
 
 #include "nsMathMLOperators.h"
 #include "nsMathMLChar.h"
 #include <cstdlib> // for std::abs(int/long)
 #include <cmath> // for std::abs(float/double)
 
+#include "nsThreadUtils.h"
+#include "nsEventDispatcher.h"
+
 using namespace mozilla;
 
 //#define NOISY_SEARCH 1
 
+#define PK_DBUS_SERVICE    "org.freedesktop.PackageKit"
+#define PK_DBUS_PATH       "/org/freedesktop/PackageKit"
+#define PK_DBUS_INTERFACE  "org.freedesktop.PackageKit"
+#define PKT_DBUS_INTERFACE "org.freedesktop.PackageKit.Transaction"
+
 // -----------------------------------------------------------------------------
 static const PRUnichar   kSpaceCh   = PRUnichar(' ');
 static const nsGlyphCode kNullGlyph = {{0, 0}, 0};
 typedef enum {eExtension_base, eExtension_variants, eExtension_parts}
   nsMathfontPrefExtension;
 
+static bool gMathFontWarning = false;
+
+static int
+PrefsChanged(const char *aPrefName, void *aData)
+{
+  gMathFontWarning =
+    Preferences::GetBool("font.mathfont-warning", gMathFontWarning);
+
+  return 0; /* PREF_OK */
+}
+
+class nsFontNotificationEvent : public nsRunnable
+{
+public:
+  nsFontNotificationEvent(nsPresContext* aPresContext)
+    : mPresContext(aPresContext)
+  {
+  }
+
+  NS_IMETHOD Run()
+  {
+    // nsCOMPtr<nsIDOMEvent> event;
+    // if (NS_SUCCEEDED(nsEventDispatcher::CreateEvent(mPresContext, nullptr,
+    //                                                 NS_LITERAL_STRING("Events"),
+    //                                                 getter_AddRefs(event)))) {
+    //   event->InitEvent(NS_LITERAL_STRING("DOMMissingMathMLFonts"), true, true);
+    //   event->SetTrusted(true);
+
+    //   nsEventDispatcher::DispatchDOMEvent(mPresContext->Document(),
+    //                                       nullptr, event,
+    //                                       mPresContext, nullptr);
+    // }
+
+    // DBusError err;
+    // dbus_error_init(&err);
+  
+    // DBusConnection *connection;
+    // connection = dbus_bus_get(DBUS_BUS_SESSION, &err);
+    // if (dbus_error_is_set(&err)) { 
+    //   dbus_error_free(&err); 
+    //   return NS_ERROR_FAILURE;
+    // }
+    // if (!connection) { 
+    //   return NS_ERROR_FAILURE; 
+    // }
+
+    // DBusMessage* message;
+    // message = dbus_message_new_method_call(PK_DBUS_SERVICE,
+    //                                        PK_DBUS_PATH,
+    //                                        PK_DBUS_INTERFACE,
+    //                                        "CreateTransaction");
+    // if (!message) {
+    //   dbus_connection_unref(connection);
+    //   return NS_ERROR_FAILURE;
+    // }
+
+    // DBusPendingCall* pending;
+    // if (!dbus_connection_send_with_reply (connection, message, &pending, -1) ||
+    //     !pending) {
+    //   dbus_message_unref(message);
+    //   dbus_connection_unref(connection);
+    //   return NS_ERROR_FAILURE;
+    // }
+    // dbus_connection_flush(connection);
+    // dbus_message_unref(message);
+
+    // dbus_pending_call_block(pending);
+    // message = dbus_pending_call_steal_reply(pending);
+    // if (!message) {
+    //   dbus_pending_call_unref(pending);
+    //   dbus_connection_unref(connection);
+    //   return NS_ERROR_FAILURE;
+    // }
+    // dbus_pending_call_unref(pending);
+
+    // DBusMessageIter args;
+    // if (!dbus_message_iter_init(message, &args) ||
+    //     !dbus_message_iter_get_arg_type(&args) != DBUS_TYPE_OBJECT_PATH) {
+    //   dbus_message_unref(message);
+    //   dbus_connection_unref(connection);
+    //   return NS_ERROR_FAILURE;
+    // }
+
+    // char *objectPath;
+    // dbus_message_iter_get_basic(&args, &objectPath);
+    // dbus_message_unref(message);
+
+    // printf("%s\n", objectPath);
+
+    // message = dbus_message_new_method_call(PK_DBUS_SERVICE,
+    //                                        objectPath,
+    //                                        PKT_DBUS_INTERFACE,
+    //                                        "InstallPackages");
+    // free(objectPath);
+    // if (!message) {
+    //   dbus_connection_unref(connection);
+    //   return NS_ERROR_FAILURE;
+    // }
+
+    // char *package[] = { "otf-stix", "ttf-oflb-asana-math" };
+    // dbus_message_iter_init_append(msg, &args);
+    // if (!dbus_message_iter_append_basic(&args, DBUS_TYPE_STRV, &package)) { 
+    //   dbus_message_unref(message);
+    //   dbus_connection_unref(connection);
+    //   return NS_ERROR_FAILURE;
+    // }
+
+    // dbus_message_unref(message);
+    // dbus_connection_unref(connection);
+    return NS_OK;
+  }
+  
+private:
+  nsPresContext* mPresContext;
+};
+
 // -----------------------------------------------------------------------------
 // nsGlyphTable is a class that provides an interface for accessing glyphs
 // of stretchy chars. It acts like a table that stores the variants of bigger
 // sizes (if any) and the partial glyphs needed to build extensible symbols.
 // An instance of nsGlyphTable is associated to one primary font. Extra glyphs
 // can be taken in other additional fonts when stretching certain characters.
 // These supplementary fonts are referred to as "external" fonts to the table.
 //
@@ -373,16 +497,20 @@ public:
   nsGlyphTable*
   GetGlyphTableFor(nsPresContext* aPresContext,
                    nsMathMLChar*  aChar);
 
   // Find the glyph table in the list corresponding to the given font family.
   nsGlyphTable*
   GetGlyphTableFor(const nsAString& aFamily);
 
+  // Determine whether the given char can be built by parts
+  bool HasPartsFor(nsPresContext* aPresContext,
+                   nsMathMLChar*  aChar);
+
 private:
   nsGlyphTable* TableAt(int32_t aIndex) {
     return &mTableList.ElementAt(aIndex);
   }
   int32_t Count() {
     return mTableList.Length();
   }
 
@@ -479,16 +607,32 @@ nsGlyphTableList::GetGlyphTableFor(const
     if (fontName.Equals(aFamily, nsCaseInsensitiveStringComparator())) {
       return glyphTable;
     }
   }
   // Fall back to default Unicode table
   return &mUnicodeTable;
 }
 
+bool
+nsGlyphTableList::HasPartsFor(nsPresContext* aPresContext, 
+                              nsMathMLChar*   aChar)
+{
+  if (mUnicodeTable.HasPartsOf(aPresContext, aChar))
+    return true;
+
+  PRInt32 i;
+  for (i = 0; i < Count(); i++) {
+    nsGlyphTable* glyphTable = TableAt(i);
+    if (glyphTable->HasPartsOf(aPresContext, aChar)) {
+      return true;
+    }
+  }
+  return false;
+}
 // -----------------------------------------------------------------------------
 
 // Lookup the preferences:
 // "font.mathfont-family.\uNNNN.base"     -- fonts for the base size
 // "font.mathfont-family.\uNNNN.variants" -- fonts for larger glyphs
 // "font.mathfont-family.\uNNNN.parts"    -- fonts for partial glyphs
 // Given the char code and mode of stretch, retrieve the preferred extension
 // font families.
@@ -558,16 +702,20 @@ MathFontEnumCallback(const nsString& aFa
 }
 
 static nsresult
 InitGlobals(nsPresContext* aPresContext)
 {
   NS_ASSERTION(!gInitialized, "Error -- already initialized");
   gInitialized = true;
 
+  // Set up a listener for mathfont-warning and check the initial value
+  Preferences::RegisterCallback(PrefsChanged, "font.mathfont-warning");
+  PrefsChanged(nullptr, nullptr);
+
   // Allocate the placeholders for the preferred parts and variants
   nsresult rv = NS_ERROR_OUT_OF_MEMORY;
   gGlyphTableList = new nsGlyphTableList();
   if (gGlyphTableList) {
     rv = gGlyphTableList->Initialize();
   }
   if (NS_FAILED(rv)) {
     delete gGlyphTableList;
@@ -598,18 +746,16 @@ InitGlobals(nsPresContext* aPresContext)
   // We just want to iterate over the font-family list using the
   // callback mechanism that nsFont has...
   nsFont font("", 0, 0, 0, 0, 0, 0);
   NS_NAMED_LITERAL_CSTRING(defaultKey, "font.mathfont-glyph-tables");
   rv = mathfontProp->GetStringProperty(defaultKey, font.name);
   if (NS_FAILED(rv)) return rv;
 
   // Parse the font list and append an entry for each family to gGlyphTableList
-  nsAutoString missingFamilyList;
-
   font.EnumerateFamilies(MathFontEnumCallback, nullptr);
   return rv;
 }
 
 // -----------------------------------------------------------------------------
 // And now the implementation of nsMathMLChar
 
 nsStyleContext*
@@ -1529,16 +1675,33 @@ nsMathMLChar::StretchInternal(nsPresCont
       if (!maxWidth) {
         mScaleY *= scale;
       }
       aDesiredStretchSize.ascent *= scale;
       aDesiredStretchSize.descent *= scale;
     }
   }
 
+  if (!maxWidth && gMathFontWarning && !aPresContext->IsLoadingFonts()) {
+    // Send a warning if it seems that the mathematical fonts available are not
+    // enough to stretch the operators. Heuristic rules to determine whether
+    // fonts are missing:
+    // - No glyph variants are available for a largeop in display mode, whereas
+    //   a glyph table was initially found to exist for this character.
+    // - A large scale transform is applied to stretch a character that
+    //   could actually be built by parts with the appropriate fonts installed.
+    if ((!glyphFound && largeop && mGlyphTable) ||
+        ((mScaleX > 2.0 || mScaleY > 2.0) &&
+         gGlyphTableList->HasPartsFor(aPresContext, this))) {
+      // Dispatch the notification
+      nsCOMPtr<nsIRunnable> event = new nsFontNotificationEvent(aPresContext);
+      NS_DispatchToCurrentThread(event);
+    }
+  }
+
   return NS_OK;
 }
 
 nsresult
 nsMathMLChar::Stretch(nsPresContext*           aPresContext,
                       nsRenderingContext&     aRenderingContext,
                       nsStretchDirection       aStretchDirection,
                       const nsBoundingMetrics& aContainerSize,
diff --git a/layout/style/nsFontFaceLoader.h b/layout/style/nsFontFaceLoader.h
--- a/layout/style/nsFontFaceLoader.h
+++ b/layout/style/nsFontFaceLoader.h
@@ -52,16 +52,18 @@ public:
   nsPresContext *GetPresContext() { return mPresContext; }
 
   virtual void ReplaceFontEntry(gfxMixedFontFamily *aFamily,
                                 gfxProxyFontEntry *aProxy,
                                 gfxFontEntry *aFontEntry);
 
   nsCSSFontFaceRule *FindRuleForEntry(gfxFontEntry *aFontEntry);
 
+  bool IsLoadingFonts() { return mLoaders.Count() > 0; }
+
 protected:
   // The font-set keeps track of the collection of rules, and their
   // corresponding font entries (whether proxies or real entries),
   // so that we can update the set without having to throw away
   // all the existing fonts.
   struct FontFaceRuleRecord {
     nsRefPtr<gfxFontEntry>       mFontEntry;
     nsFontFaceRuleContainer      mContainer;
diff --git a/modules/libpref/src/init/all.js b/modules/libpref/src/init/all.js
--- a/modules/libpref/src/init/all.js
+++ b/modules/libpref/src/init/all.js
@@ -3854,16 +3854,19 @@ pref("memory.low_commit_space_threshold_
 pref("memory.low_physical_memory_threshold_mb", 0);
 
 // On Windows 32- or 64-bit, don't fire a low-memory notification because of
 // low available physical memory or low commit space more than once every
 // low_memory_notification_interval_ms.
 pref("memory.low_memory_notification_interval_ms", 10000);
 #endif
 
+// warning for missing MathML fonts
+pref("font.mathfont-warning", true);
+
 // How long must we wait before declaring that a window is a "ghost" (i.e., a
 // likely leak)?  This should be longer than it usually takes for an eligible
 // window to be collected via the GC/CC.
 pref("memory.ghost_window_timeout_seconds", 60);
 
 // Disable freeing dirty pages when minimizing memory.
 pref("memory.free_dirty_pages", false);
 
