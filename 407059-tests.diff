# HG changeset patch
# Parent 0e83972cf0600c975d0205bf4143cadf5fd2df78
# User Frédéric Wang <fred.wang@free.fr>
Part 4: reftest. r=karl, b=407059

diff --git a/layout/reftests/fonts/Math.otf b/layout/reftests/fonts/Math.otf
new file mode 100644
index e69de29bb2d1d6434b8b29ae775ad8c2e48c5391..e72a47de28cf21aee222118ad230c9e8494a13ec
GIT binary patch
literal 3156
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

diff --git a/layout/reftests/fonts/math-generate.py b/layout/reftests/fonts/math-generate.py
new file mode 100644
--- /dev/null
+++ b/layout/reftests/fonts/math-generate.py
@@ -0,0 +1,219 @@
+#!/usr/bin/python
+# vim: set shiftwidth=4 tabstop=8 autoindent expandtab:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+# For general fontforge documentation, see:
+#   http://fontforge.sourceforge.net/
+# For fontforge scripting documentation, see:
+#   http://fontforge.sourceforge.net/scripting-tutorial.html
+#   http://fontforge.sourceforge.net/scripting.html
+# and most importantly:
+#   http://fontforge.sourceforge.net/python.html
+
+# To install what you need, on Ubuntu,
+#   sudo apt-get install python-fontforge
+
+import fontforge
+
+em = 1024
+nvariants = 3
+
+f = fontforge.font()
+n = "Math"
+f.fontname = n
+f.familyname = n
+f.fullname = n
+f.copyright = "Copyright (c) 2014 Mozilla Corporation"
+f.encoding = "UnicodeFull"
+
+# Create a space character. Also force the creation of some MATH subtables.
+g = f.createChar(ord(" "), "space")
+g.width = em
+g.italicCorrection = 0
+g.topaccent = 0
+g.mathKern.bottomLeft = tuple([(0,0)])
+g.mathKern.bottomRight = tuple([(0,0)])
+g.mathKern.topLeft = tuple([(0,0)])
+g.mathKern.topRight = tuple([(0,0)])
+
+################################################################################
+# Glyph variants and constructions
+
+# Draw boxes for the size variants and glues
+for i in range(0, nvariants):
+    s = em * (i + 1)
+
+    g = f.createChar(-1, "h%d" % i)
+    p = g.glyphPen()
+    p.moveTo(0, -em)
+    p.lineTo(0, em)
+    p.lineTo(s, em)
+    p.lineTo(s, -em)
+    p.closePath()
+    g.width = s
+
+    g = f.createChar(-1, "v%d" % i)
+    p = g.glyphPen()
+    p.moveTo(0, 0)
+    p.lineTo(2 * em, 0)
+    p.lineTo(2 * em, s)
+    p.lineTo(0, s)
+    p.closePath();
+    g.width = 2 * em
+
+# Draw some pieces for stretchy operators
+s = em * nvariants
+
+g = f.createChar(-1, "left")
+p = g.glyphPen()
+p.moveTo(0, -2 * em)
+p.lineTo(0, 2 * em)
+p.lineTo(s, em)
+p.lineTo(s, -em)
+p.closePath();
+g.width = s
+
+g = f.createChar(-1, "right")
+p = g.glyphPen()
+p.moveTo(0, -em)
+p.lineTo(0, em)
+p.lineTo(s, 2 * em)
+p.lineTo(s, -2 * em)
+p.closePath();
+g.width = s
+
+g = f.createChar(-1, "hmid")
+p = g.glyphPen()
+p.moveTo(0, -em)
+p.lineTo(0, em)
+p.lineTo(s, 2 * em)
+p.lineTo(2 * s, em)
+p.lineTo(2 * s, -em)
+p.lineTo(s, -2 * em)
+p.closePath();
+g.width = 2 * s
+
+g = f.createChar(-1, "bottom")
+p = g.glyphPen()
+p.moveTo(0, 0)
+p.lineTo(4 * em, 0)
+p.lineTo(2 * em, s)
+p.lineTo(0, s)
+p.closePath();
+g.width = 4 * em
+
+g = f.createChar(-1, "top")
+p = g.glyphPen()
+p.moveTo(0, 0)
+p.lineTo(4 * em, 0)
+p.lineTo(2 * em, -s)
+p.lineTo(0, -s)
+p.closePath();
+g.width = 4 * em
+
+g = f.createChar(-1, "vmid")
+p = g.glyphPen()
+p.moveTo(0, s)
+p.lineTo(2 * em, s)
+p.lineTo(4 * em, 0)
+p.lineTo(2 * em, -s)
+p.lineTo(0, -s)
+p.closePath();
+g.width = 3 * em
+
+# Create small rectangle of various size for some exotic arrows that are
+# unlikely to be stretchable with standard fonts.
+hstretchy = [
+    0x219C, # leftwards wave arrow
+    0x219D, # rightwards wave arrow
+    0x219E, # leftwards two headed arrow
+    0x21A0, # rightwards two headed arrow
+    0x21A2  # leftwards arrow with tail
+]
+vstretchy = [
+    0x219F, # upwards two headed arrow
+    0x21A1, # downwards two headed arrow
+    0x21A5, # upwards arrow from bar
+    0x21A7, # downwards arrow from bar
+    0x21A8  # up down arrow with base
+]
+for i in range(0, 1 + nvariants + 1):
+    s = (i + 1) * em/10
+
+    g = f.createChar(hstretchy[i])
+    p = g.glyphPen()
+    p.moveTo(0, -em/10)
+    p.lineTo(0, em/10)
+    p.lineTo(s, em/10)
+    p.lineTo(s, -em/10)
+    p.closePath()
+    g.width = s
+
+    g = f.createChar(vstretchy[i])
+    p = g.glyphPen()
+    p.moveTo(0, 0)
+    p.lineTo(2 * em/10, 0)
+    p.lineTo(2 * em/10, s)
+    p.lineTo(0, s)
+    p.closePath();
+    g.width = 2 * em/10
+
+# hstretchy[0] and vstretchy[0] have all the variants and the components. The others only have one of them.
+s = em * nvariants
+
+f[hstretchy[0]].horizontalVariants = "h0 h1 h2"
+f[hstretchy[0]].horizontalComponents = (("left", False, 0, 0, s), \
+("h2", True, 0, 0, s), ("hmid", False, 0, 0, 2 * s), ("h2", True, 0, 0, s), \
+("right", False, 0, 0, s))
+
+f[hstretchy[1]].horizontalVariants = "h0"
+f[hstretchy[2]].horizontalVariants = "h1"
+f[hstretchy[3]].horizontalVariants = "h2"
+f[hstretchy[4]].horizontalComponents = f[hstretchy[0]].horizontalComponents
+
+
+f[vstretchy[0]].verticalVariants = "v0 v1 v2"
+f[vstretchy[0]].verticalComponents = (("bottom", False, 0, 0, s), \
+("v2", True, 0, 0, s), ("vmid", False, 0, 0, 2 * s), ("v2", True, 0, 0, s), \
+("top", False, 0, 0, s))
+
+f[vstretchy[1]].verticalVariants = "v0"
+f[vstretchy[2]].verticalVariants = "v1"
+f[vstretchy[3]].verticalVariants = "v2"
+f[vstretchy[4]].verticalComponents = f[vstretchy[0]].verticalComponents
+
+################################################################################
+# Testing DisplayOperatorMinHeight
+f.math.DisplayOperatorMinHeight =  8 * em
+largeop = [0x2A1B, 0x2A1C] # integral with overbar/underbar
+
+# Draw boxes of size 1, 2, 6, 8, 10em.
+for i in [1, 2, 6, 8, 10]:
+    s = em * i
+    if i == 1 or i == 2:
+        g = f.createChar(largeop[i-1])
+    else:
+        g = f.createChar(-1, "L%d" % i)
+    p = g.glyphPen()
+    p.moveTo(0, 0)
+    p.lineTo(s, 0)
+    p.lineTo(s, s)
+    p.lineTo(0, s)
+    p.closePath();
+    g.width = s
+
+f[largeop[0]].verticalVariants = "L7 L8 L9"
+f[largeop[1]].verticalVariants = "L8"
+
+################################################################################
+f.em = em
+f.ascent = f.descent = em/2
+f.hhea_ascent = f.os2_typoascent = f.os2_winascent = em/2
+f.descent = f.hhea_descent = f.os2_typodescent = f.os2_windescent = em/2
+f.hhea_ascent_add = f.hhea_descent_add = 0
+f.os2_typoascent_add = f.os2_typodescent_add = 0
+f.os2_winascent_add = f.os2_windescent_add = 0
+f.os2_use_typo_metrics = True
+f.generate(n + ".otf")
diff --git a/layout/reftests/mathml/opentype-stretchy-ref.html b/layout/reftests/mathml/opentype-stretchy-ref.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/mathml/opentype-stretchy-ref.html
@@ -0,0 +1,73 @@
+<!doctype html>
+<html>
+  <head>
+    <title>Open Type MATH - stretchy operator</title>
+    <meta charset="utf-8"/>
+    <style type="text/css">
+      @font-face {
+        font-family: test;
+        src: url(../fonts/Math.otf);
+      }
+      math {
+        font-family: test;
+        font-size: 10px;
+      }
+      ::-moz-math-stretchy {
+        font-family: test;
+        font-size: 10px;
+      }
+    </style>
+  </head>
+  <body>
+
+<!--
+hstretchy = [
+    0x219C, # leftwards wave arrow
+    0x219D, # rightwards wave arrow
+    0x219E, # leftwards two headed arrow
+    0x21A0, # rightwards two headed arrow
+    0x21A2  # leftwards arrow with tail
+]
+vstretchy = [
+    0x219F, # upwards two headed arrow
+    0x21A1, # downwards two headed arrow
+    0x21A5, # upwards arrow from bar
+    0x21A7, # downwards arrow from bar
+    0x21A8  # up down arrow with base
+]
+
+hstretchy[0] and vstretchy[0] have all the variants and the components. The others only have one of them.
+-->
+
+    <p>
+      <math>
+        <mstyle scriptsizemultiplier="1">
+          <mover><mo stretchy="true">&#x219D;</mo><mspace width="1em" height="1px" mathbackground="red"/></mover>
+          <mover><mo stretchy="true">&#x219E;</mo><mspace width="2em" height="1px" mathbackground="red"/></mover>
+          <mover><mo stretchy="true">&#x21A0;</mo><mspace width="3em" height="1px" mathbackground="red"/></mover>
+          <mover><mo stretchy="true">&#x21A2;</mo><mspace width="15em" height="1px" mathbackground="red"/></mover>
+        </mstyle>
+      </math>
+    </p>
+
+    <p>
+      <math><mrow><mo symmetric="false" stretchy="true" minsize="1em">&#x21A1;</mo></mrow></math>
+      <math><mrow><mo symmetric="false" stretchy="true" minsize="2em">&#x21A5;</mo></mrow></math>
+      <math><mrow><mo symmetric="false" stretchy="true" minsize="3em">&#x21A7;</mo></mrow></math>
+      <math><mrow><mo symmetric="false" stretchy="true" minsize="15em">&#x21A8;</mo></mrow></math>
+    </p>
+
+<!--
+DisplayOperatorMinHeight = 8em
+largeop = [0x2A1B, 0x2A1C] # integral with overbar/underbar
+largeop[0] has variants of size 6, 8, 10em
+largeop[1] has one variant of size 8em.
+-->
+    <p>
+      <math displaystyle="true">
+        <mrow><mo>&#x2A1C;</mo></mrow>
+      </math>
+    </p>
+
+  </body>
+</html>
diff --git a/layout/reftests/mathml/opentype-stretchy.html b/layout/reftests/mathml/opentype-stretchy.html
new file mode 100644
--- /dev/null
+++ b/layout/reftests/mathml/opentype-stretchy.html
@@ -0,0 +1,73 @@
+<!doctype html>
+<html>
+  <head>
+    <title>Open Type MATH - stretchy operator</title>
+    <meta charset="utf-8"/>
+    <style type="text/css">
+      @font-face {
+        font-family: test;
+        src: url(../fonts/Math.otf);
+      }
+      math {
+        font-family: test;
+        font-size: 10px;
+      }
+      ::-moz-math-stretchy {
+        font-family: test;
+        font-size: 10px;
+      }
+    </style>
+  </head>
+  <body>
+
+<!--
+hstretchy = [
+    0x219C, # leftwards wave arrow
+    0x219D, # rightwards wave arrow
+    0x219E, # leftwards two headed arrow
+    0x21A0, # rightwards two headed arrow
+    0x21A2  # leftwards arrow with tail
+]
+vstretchy = [
+    0x219F, # upwards two headed arrow
+    0x21A1, # downwards two headed arrow
+    0x21A5, # upwards arrow from bar
+    0x21A7, # downwards arrow from bar
+    0x21A8  # up down arrow with base
+]
+
+hstretchy[0] and vstretchy[0] have all the variants and the components. The others only have one of them.
+-->
+
+    <p>
+      <math>
+        <mstyle scriptsizemultiplier="1">
+          <mover><mo stretchy="true">&#x219C;</mo><mspace width="1em" height="1px" mathbackground="red"/></mover>
+          <mover><mo stretchy="true">&#x219C;</mo><mspace width="2em" height="1px" mathbackground="red"/></mover>
+          <mover><mo stretchy="true">&#x219C;</mo><mspace width="3em" height="1px" mathbackground="red"/></mover>
+          <mover><mo stretchy="true">&#x219C;</mo><mspace width="15em" height="1px" mathbackground="red"/></mover>
+        </mstyle>
+      </math>
+    </p>
+
+    <p>
+      <math><mrow><mo symmetric="false" stretchy="true" minsize="1em">&#x219F;</mo></mrow></math>
+      <math><mrow><mo symmetric="false" stretchy="true" minsize="2em">&#x219F;</mo></mrow></math>
+      <math><mrow><mo symmetric="false" stretchy="true" minsize="3em">&#x219F;</mo></mrow></math>
+      <math><mrow><mo symmetric="false" stretchy="true" minsize="15em">&#x219F;</mo></mrow></math>
+    </p>
+
+<!--
+DisplayOperatorMinHeight = 8em
+largeop = [0x2A1B, 0x2A1C] # integral with overbar/underbar
+largeop[0] has variants of size 6, 8, 10em
+largeop[1] has one variant of size 8em.
+-->
+    <p>
+      <math displaystyle="true">
+        <mrow><mo>&#x2A1B;</mo></mrow>
+      </math>
+    </p>
+
+  </body>
+</html>
diff --git a/layout/reftests/mathml/reftest.list b/layout/reftests/mathml/reftest.list
--- a/layout/reftests/mathml/reftest.list
+++ b/layout/reftests/mathml/reftest.list
@@ -143,16 +143,17 @@ skip-if(B2G) == maction-dynamic-1.html m
 == mo-lspace-rspace.html mo-lspace-rspace-ref.html
 skip-if(B2G) == maction-dynamic-3.html maction-dynamic-3-ref.html # bug 773482
 == whitespace-trim-1.html whitespace-trim-1-ref.html
 == whitespace-trim-2.html whitespace-trim-2-ref.html
 == whitespace-trim-3.html whitespace-trim-3-ref.html
 fails == whitespace-trim-4.html whitespace-trim-4-ref.html # Bug 787215
 == whitespace-trim-5.html whitespace-trim-5-ref.html
 == operator-1.xhtml operator-1-ref.xhtml
+== opentype-stretchy.html opentype-stretchy-ref.html
 == scriptshift-1.xhtml scriptshift-1-ref.xhtml
 == number-size-1.xhtml number-size-1-ref.xhtml
 == multiscripts-1.html multiscripts-1-ref.html
 == mathml-mmultiscript-base.html mathml-mmultiscript-base-ref.html
 == mathml-mmultiscript-mprescript.html mathml-mmultiscript-mprescript-ref.html
 != menclose-1.html menclose-1-ref.html
 == mmultiscript-align.html mmultiscript-align-ref.html
 == subscript-italic-correction.html subscript-italic-correction-ref.html
