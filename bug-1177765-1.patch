# HG changeset patch
# Parent b124ce6524f7a536470b8798ede205c7c050fcd5
# User Frédéric Wang <fred.wang@free.fr>
# Parent  079b6f1ae1c3e48da37f6a7c4ed4473862c5f809
Make nsIMathMLFrame expose the fence and separator properties of operators. r=karlt, b=1177765

diff --git a/layout/mathml/nsIMathMLFrame.h b/layout/mathml/nsIMathMLFrame.h
--- a/layout/mathml/nsIMathMLFrame.h
+++ b/layout/mathml/nsIMathMLFrame.h
@@ -348,16 +348,22 @@ struct nsPresentationData {
 // This bit is set if the frame is an <mover> or <munderover> with
 // an accent frame
 #define NS_MATHML_EMBELLISH_ACCENTOVER              0x00000008
 
 // This bit is set if the frame is an <munder> or <munderover> with
 // an accentunder frame
 #define NS_MATHML_EMBELLISH_ACCENTUNDER             0x00000010
 
+// This bit is set on the core if it is a fence operator.
+#define NS_MATHML_EMBELLISH_FENCE                   0x00000020
+
+// This bit is set on the core if it is a separator operator.
+#define NS_MATHML_EMBELLISH_SEPARATOR               0x00000040
+
 // Macros that retrieve those bits
 
 #define NS_MATHML_IS_EMBELLISH_OPERATOR(_flags) \
   (NS_MATHML_EMBELLISH_OPERATOR == ((_flags) & NS_MATHML_EMBELLISH_OPERATOR))
 
 #define NS_MATHML_EMBELLISH_IS_MOVABLELIMITS(_flags) \
   (NS_MATHML_EMBELLISH_MOVABLELIMITS == ((_flags) & NS_MATHML_EMBELLISH_MOVABLELIMITS))
 
@@ -365,9 +371,15 @@ struct nsPresentationData {
   (NS_MATHML_EMBELLISH_ACCENT == ((_flags) & NS_MATHML_EMBELLISH_ACCENT))
 
 #define NS_MATHML_EMBELLISH_IS_ACCENTOVER(_flags) \
   (NS_MATHML_EMBELLISH_ACCENTOVER == ((_flags) & NS_MATHML_EMBELLISH_ACCENTOVER))
 
 #define NS_MATHML_EMBELLISH_IS_ACCENTUNDER(_flags) \
   (NS_MATHML_EMBELLISH_ACCENTUNDER == ((_flags) & NS_MATHML_EMBELLISH_ACCENTUNDER))
 
+#define NS_MATHML_EMBELLISH_IS_FENCE(_flags) \
+  (NS_MATHML_EMBELLISH_FENCE == ((_flags) & NS_MATHML_EMBELLISH_FENCE))
+
+#define NS_MATHML_EMBELLISH_IS_SEPARATOR(_flags) \
+  (NS_MATHML_EMBELLISH_SEPARATOR == ((_flags) & NS_MATHML_EMBELLISH_SEPARATOR))
+
 #endif /* nsIMathMLFrame_h___ */
diff --git a/layout/mathml/nsMathMLmoFrame.cpp b/layout/mathml/nsMathMLmoFrame.cpp
--- a/layout/mathml/nsMathMLmoFrame.cpp
+++ b/layout/mathml/nsMathMLmoFrame.cpp
@@ -466,35 +466,38 @@ nsMathMLmoFrame::ProcessOperatorData()
     mFlags &= ~NS_MATHML_OPERATOR_STRETCHY;
   } else if (value.EqualsLiteral("true")) {
     mFlags |= NS_MATHML_OPERATOR_STRETCHY;
   }
   if (NS_MATHML_OPERATOR_IS_FENCE(mFlags)) {
     mContent->GetAttr(kNameSpaceID_None, nsGkAtoms::fence_, value);
     if (value.EqualsLiteral("false"))
       mFlags &= ~NS_MATHML_OPERATOR_FENCE;
+    else
+      mEmbellishData.flags |= NS_MATHML_EMBELLISH_FENCE;
   }
   mContent->GetAttr(kNameSpaceID_None, nsGkAtoms::largeop_, value);
   if (value.EqualsLiteral("false")) {
     mFlags &= ~NS_MATHML_OPERATOR_LARGEOP;
   } else if (value.EqualsLiteral("true")) {
     mFlags |= NS_MATHML_OPERATOR_LARGEOP;
   }
   if (NS_MATHML_OPERATOR_IS_SEPARATOR(mFlags)) {
     mContent->GetAttr(kNameSpaceID_None, nsGkAtoms::separator_, value);
     if (value.EqualsLiteral("false"))
       mFlags &= ~NS_MATHML_OPERATOR_SEPARATOR;
+    else
+      mEmbellishData.flags |= NS_MATHML_EMBELLISH_SEPARATOR;
   }
   mContent->GetAttr(kNameSpaceID_None, nsGkAtoms::symmetric_, value);
   if (value.EqualsLiteral("false"))
     mFlags &= ~NS_MATHML_OPERATOR_SYMMETRIC;
   else if (value.EqualsLiteral("true"))
     mFlags |= NS_MATHML_OPERATOR_SYMMETRIC;
-
-
+    
   // minsize
   //
   // "Specifies the minimum size of the operator when stretchy"
   //
   // values: length
   // default: set by dictionary (1em)
   //
   // We don't allow negative values.
