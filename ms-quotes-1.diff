# HG changeset patch
# Parent f281d8c57455b9df16cf074250356db310a4f472
# User Frédéric Wang <fred.wang@free.fr>
Bug 560100 - Map MathML attributes lquote/rquote to style - part 1.

diff --git a/layout/base/nsCSSFrameConstructor.cpp b/layout/base/nsCSSFrameConstructor.cpp
--- a/layout/base/nsCSSFrameConstructor.cpp
+++ b/layout/base/nsCSSFrameConstructor.cpp
@@ -1665,16 +1665,26 @@ nsCSSFrameConstructor::CreateGeneratedCo
         nsXPIDLString temp;
         nsContentUtils::GetLocalizedString(nsContentUtils::eFORMS_PROPERTIES,
                                            "Submit", temp);
         return CreateGenConTextNode(aState, temp, nsnull, nsnull);
       }
 
       break;
     }
+
+  case eStyleContentType_MsLquote:
+    return CreateGenConTextNode(aState,
+                                aStyleContext->GetStyleQuotes()->mMsLquote,
+                                nsnull, nsnull);
+
+  case eStyleContentType_MsRquote:
+    return CreateGenConTextNode(aState,
+                                aStyleContext->GetStyleQuotes()->mMsRquote,
+                                nsnull, nsnull);
   } // switch
 
   return nsnull;
 }
 
 /*
  * aParentFrame - the frame that should be the parent of the generated
  *   content.  This is the frame for the corresponding content node,
diff --git a/layout/base/nsStyleConsts.h b/layout/base/nsStyleConsts.h
--- a/layout/base/nsStyleConsts.h
+++ b/layout/base/nsStyleConsts.h
@@ -347,16 +347,18 @@ static inline mozilla::css::Side operato
 #define NS_STYLE_CLEAR_LAST_VALUE NS_STYLE_CLEAR_PAGE
 
 // See nsStyleContent
 #define NS_STYLE_CONTENT_OPEN_QUOTE             0
 #define NS_STYLE_CONTENT_CLOSE_QUOTE            1
 #define NS_STYLE_CONTENT_NO_OPEN_QUOTE          2
 #define NS_STYLE_CONTENT_NO_CLOSE_QUOTE         3
 #define NS_STYLE_CONTENT_ALT_CONTENT            4
+#define NS_STYLE_CONTENT_MS_LQUOTE              5
+#define NS_STYLE_CONTENT_MS_RQUOTE              6
 
 // See nsStyleColor
 #define NS_STYLE_CURSOR_AUTO                    1
 #define NS_STYLE_CURSOR_CROSSHAIR               2
 #define NS_STYLE_CURSOR_DEFAULT                 3    // ie: an arrow
 #define NS_STYLE_CURSOR_POINTER                 4    // for links
 #define NS_STYLE_CURSOR_MOVE                    5
 #define NS_STYLE_CURSOR_E_RESIZE                6
diff --git a/layout/style/nsCSSKeywordList.h b/layout/style/nsCSSKeywordList.h
--- a/layout/style/nsCSSKeywordList.h
+++ b/layout/style/nsCSSKeywordList.h
@@ -148,16 +148,18 @@ CSS_KEY(-moz-mac-secondaryhighlight, _mo
 CSS_KEY(-moz-malayalam, _moz_malayalam)
 CSS_KEY(-moz-max-content, _moz_max_content)
 CSS_KEY(-moz-menuhover, _moz_menuhover)
 CSS_KEY(-moz-menuhovertext, _moz_menuhovertext)
 CSS_KEY(-moz-menubartext, _moz_menubartext)
 CSS_KEY(-moz-menubarhovertext, _moz_menubarhovertext)
 CSS_KEY(-moz-middle-with-baseline, _moz_middle_with_baseline)
 CSS_KEY(-moz-min-content, _moz_min_content)
+CSS_KEY(-moz-ms-lquote, _moz_ms_lquote)
+CSS_KEY(-moz-ms-rquote, _moz_ms_rquote)
 CSS_KEY(-moz-myanmar, _moz_myanmar)
 CSS_KEY(-moz-nativehyperlinktext, _moz_nativehyperlinktext)
 CSS_KEY(-moz-none, _moz_none)
 CSS_KEY(-moz-oddtreerow, _moz_oddtreerow)
 CSS_KEY(-moz-oriya, _moz_oriya)
 CSS_KEY(-moz-persian, _moz_persian)
 CSS_KEY(-moz-plaintext, _moz_plaintext)
 CSS_KEY(-moz-popup, _moz_popup)
diff --git a/layout/style/nsCSSParser.cpp b/layout/style/nsCSSParser.cpp
--- a/layout/style/nsCSSParser.cpp
+++ b/layout/style/nsCSSParser.cpp
@@ -7147,16 +7147,18 @@ CSSParserImpl::ParseContent()
     eCSSKeyword_close_quote, NS_STYLE_CONTENT_CLOSE_QUOTE,
     eCSSKeyword_no_open_quote, NS_STYLE_CONTENT_NO_OPEN_QUOTE,
     eCSSKeyword_no_close_quote, NS_STYLE_CONTENT_NO_CLOSE_QUOTE,
     eCSSKeyword_UNKNOWN,-1
   };
 
   static const PRInt32 kContentSolitaryKWs[] = {
     eCSSKeyword__moz_alt_content, NS_STYLE_CONTENT_ALT_CONTENT,
+    eCSSKeyword__moz_ms_lquote, NS_STYLE_CONTENT_MS_LQUOTE,
+    eCSSKeyword__moz_ms_rquote, NS_STYLE_CONTENT_MS_RQUOTE,
     eCSSKeyword_UNKNOWN,-1
   };
 
   // Verify that these two lists add up to the size of
   // nsCSSProps::kContentKTable.
   NS_ABORT_IF_FALSE(nsCSSProps::kContentKTable[
                       ArrayLength(kContentListKWs) +
                       ArrayLength(kContentSolitaryKWs) - 4] ==
diff --git a/layout/style/nsCSSPropList.h b/layout/style/nsCSSPropList.h
--- a/layout/style/nsCSSPropList.h
+++ b/layout/style/nsCSSPropList.h
@@ -2657,16 +2657,34 @@ CSS_PROP_FONT(
     script_min_size,
     ScriptMinSize,
     // REVIEW: no range restriction?
     CSS_PROPERTY_PARSE_INACCESSIBLE,
     0,
     nsnull,
     CSS_PROP_NO_OFFSET,
     eStyleAnimType_None)
+CSS_PROP_QUOTES(
+    -moz-ms-lquote,
+    ms_lquote,
+    MsLquote,
+    CSS_PROPERTY_PARSE_INACCESSIBLE,
+    0,
+    nsnull,
+    CSS_PROP_NO_OFFSET,
+    eStyleAnimType_None)
+CSS_PROP_QUOTES(
+    -moz-ms-rquote,
+    ms_rquote,
+    MsRquote,
+    CSS_PROPERTY_PARSE_INACCESSIBLE,
+    0,
+    nsnull,
+    CSS_PROP_NO_OFFSET,
+    eStyleAnimType_None)
 #endif
 
 CSS_PROP_SVGRESET(
     clip-path,
     clip_path,
     ClipPath,
     CSS_PROPERTY_PARSE_VALUE,
     VARIANT_HUO,
diff --git a/layout/style/nsComputedDOMStyle.cpp b/layout/style/nsComputedDOMStyle.cpp
--- a/layout/style/nsComputedDOMStyle.cpp
+++ b/layout/style/nsComputedDOMStyle.cpp
@@ -881,16 +881,18 @@ nsComputedDOMStyle::DoGetContent()
         break;
       case eStyleContentType_NoOpenQuote:
         val->SetIdent(eCSSKeyword_no_open_quote);
         break;
       case eStyleContentType_NoCloseQuote:
         val->SetIdent(eCSSKeyword_no_close_quote);
         break;
       case eStyleContentType_AltContent:
+      case eStyleContentType_MsLquote:
+      case eStyleContentType_MsRquote:
       default:
         NS_NOTREACHED("unexpected type");
         break;
     }
   }
 
   return valueList;
 }
diff --git a/layout/style/nsRuleNode.cpp b/layout/style/nsRuleNode.cpp
--- a/layout/style/nsRuleNode.cpp
+++ b/layout/style/nsRuleNode.cpp
@@ -6163,22 +6163,33 @@ nsRuleNode::ComputeContentData(void* aSt
     if (NS_SUCCEEDED(content->AllocateContents(count))) {
       while (0 < count--) {
         content->ContentAt(count) = parentContent->ContentAt(count);
       }
     }
     break;
 
   case eCSSUnit_Enumerated: {
-    NS_ABORT_IF_FALSE(contentValue->GetIntValue() ==
-                      NS_STYLE_CONTENT_ALT_CONTENT,
-                      "unrecognized solitary content keyword");
+    nsStyleContentType type;
+    switch(contentValue->GetIntValue()) {
+      case NS_STYLE_CONTENT_ALT_CONTENT:
+        type = eStyleContentType_AltContent;
+        break;
+      case NS_STYLE_CONTENT_MS_LQUOTE:
+        type = eStyleContentType_MsLquote;
+        break;
+      case NS_STYLE_CONTENT_MS_RQUOTE:
+        type = eStyleContentType_MsRquote;
+        break;
+      default:
+        NS_ERROR("unrecognized solitary content keyword");
+    }
     content->AllocateContents(1);
     nsStyleContentData& data = content->ContentAt(0);
-    data.mType = eStyleContentType_AltContent;
+    data.mType = type;
     data.mContent.mString = nsnull;
     break;
   }
 
   case eCSSUnit_List:
   case eCSSUnit_ListDep: {
     const nsCSSValueList* contentValueList = contentValue->GetListValue();
       count = 0;
@@ -6413,16 +6424,58 @@ nsRuleNode::ComputeQuotesData(void* aSta
       ourQuotes = ourQuotes->mNext;
     }
     break;
   }
   default:
     NS_ABORT_IF_FALSE(false, "unexpected value unit");
   }
 
+  // lquote: inherit, initial, none, string
+  const nsCSSValue* lquote = aRuleData->ValueForMsLquote();
+  switch (lquote->GetUnit()) {
+  case eCSSUnit_Null:
+  case eCSSUnit_None:
+    break;
+  case eCSSUnit_Initial:
+    // MathML REC: the initial value for lquote is &quot;
+    quotes->mMsLquote.Assign(0x22);
+    break;
+  case eCSSUnit_Inherit:
+    canStoreInRuleTree = false;
+    quotes->mMsLquote = parentQuotes->mMsLquote;
+    break;
+  case eCSSUnit_String:
+    lquote->GetStringValue(quotes->mMsLquote);
+    break;
+  default:
+    NS_ABORT_IF_FALSE(false, "unexpected value unit");
+  }
+
+  // rquote: inherit, initial, none, string
+  const nsCSSValue* rquote = aRuleData->ValueForMsRquote();
+  switch (rquote->GetUnit()) {
+  case eCSSUnit_Null:
+  case eCSSUnit_None:
+    break;
+  case eCSSUnit_Initial:
+    // MathML REC: the initial value for rquote is &quot;
+    quotes->mMsRquote.Assign(0x22);
+    break;
+  case eCSSUnit_Inherit:
+    canStoreInRuleTree = false;
+    quotes->mMsRquote = parentQuotes->mMsRquote;
+    break;
+  case eCSSUnit_String:
+    rquote->GetStringValue(quotes->mMsRquote);
+    break;
+  default:
+    NS_ABORT_IF_FALSE(false, "unexpected value unit");
+  }
+
   COMPUTE_END_INHERITED(Quotes, quotes)
 }
 
 const void*
 nsRuleNode::ComputeXULData(void* aStartStruct,
                            const nsRuleData* aRuleData,
                            nsStyleContext* aContext,
                            nsRuleNode* aHighestNode,
diff --git a/layout/style/nsStyleStruct.cpp b/layout/style/nsStyleStruct.cpp
--- a/layout/style/nsStyleStruct.cpp
+++ b/layout/style/nsStyleStruct.cpp
@@ -2629,16 +2629,21 @@ nsresult nsStyleContent::AllocateContent
 // nsStyleQuotes
 //
 
 nsStyleQuotes::nsStyleQuotes(void)
   : mQuotesCount(0),
     mQuotes(nsnull)
 {
   MOZ_COUNT_CTOR(nsStyleQuotes);
+
+  // MathML REC: the initial value for lquote/rquote is &quot;
+  mMsLquote.Assign(0x22);
+  mMsRquote.Assign(0x22);
+
   SetInitial();
 }
 
 nsStyleQuotes::~nsStyleQuotes(void)
 {
   MOZ_COUNT_DTOR(nsStyleQuotes);
   DELETE_ARRAY_IF(mQuotes);
 }
@@ -2681,16 +2686,21 @@ nsStyleQuotes::CopyFrom(const nsStyleQuo
     }
   }
 }
 
 nsChangeHint nsStyleQuotes::CalcDifference(const nsStyleQuotes& aOther) const
 {
   // If the quotes implementation is ever going to change we might not need
   // a framechange here and a reflow should be sufficient.  See bug 35768.
+  if (mMsLquote != aOther.mMsLquote ||
+      mMsRquote != aOther.mMsRquote) {
+    return NS_STYLE_HINT_FRAMECHANGE;
+  }
+
   if (mQuotesCount == aOther.mQuotesCount) {
     PRUint32 ix = (mQuotesCount * 2);
     while (0 < ix--) {
       if (mQuotes[ix] != aOther.mQuotes[ix]) {
         return NS_STYLE_HINT_FRAMECHANGE;
       }
     }
 
diff --git a/layout/style/nsStyleStruct.h b/layout/style/nsStyleStruct.h
--- a/layout/style/nsStyleStruct.h
+++ b/layout/style/nsStyleStruct.h
@@ -1711,17 +1711,19 @@ enum nsStyleContentType {
   eStyleContentType_Image         = 10,
   eStyleContentType_Attr          = 20,
   eStyleContentType_Counter       = 30,
   eStyleContentType_Counters      = 31,
   eStyleContentType_OpenQuote     = 40,
   eStyleContentType_CloseQuote    = 41,
   eStyleContentType_NoOpenQuote   = 42,
   eStyleContentType_NoCloseQuote  = 43,
-  eStyleContentType_AltContent    = 50
+  eStyleContentType_AltContent    = 50,
+  eStyleContentType_MsLquote      = 60,
+  eStyleContentType_MsRquote      = 61
 };
 
 struct nsStyleContentData {
   nsStyleContentType  mType;
   union {
     PRUnichar *mString;
     imgIRequest *mImage;
     nsCSSValue::Array* mCounters;
@@ -1831,16 +1833,19 @@ struct nsStyleQuotes {
       aIndex *= 2;
       mQuotes[aIndex] = aOpen;
       mQuotes[++aIndex] = aClose;
       return NS_OK;
     }
     return NS_ERROR_ILLEGAL_VALUE;
   }
 
+  nsString mMsLquote;
+  nsString mMsRquote;
+
 protected:
   PRUint32            mQuotesCount;
   nsString*           mQuotes;
 };
 
 struct nsStyleContent {
   nsStyleContent(void);
   nsStyleContent(const nsStyleContent& aContent);
