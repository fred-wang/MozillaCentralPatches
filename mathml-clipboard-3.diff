# HG changeset patch
# Parent 4ca83396a83811d0606793665b2396ded83b53c8
# User Frédéric Wang <fred.wang@free.fr>
Implement copy operation for MathML and TeX - part 2. b=539506, r=?

diff --git a/content/base/src/nsCopySupport.cpp b/content/base/src/nsCopySupport.cpp
--- a/content/base/src/nsCopySupport.cpp
+++ b/content/base/src/nsCopySupport.cpp
@@ -42,16 +42,17 @@
 #include "nsIImageLoadingContent.h"
 #include "nsIInterfaceRequestorUtils.h"
 #include "nsContentUtils.h"
 #include "nsContentCID.h"
 
 #include "mozilla/dom/Element.h"
 
 #include "mozilla/Preferences.h"
+#include "nsMimeTypes.h"
 
 using namespace mozilla;
 
 nsresult NS_NewDomSelection(nsISelection **aDomSelection);
 
 static NS_DEFINE_CID(kCClipboardCID,           NS_CLIPBOARD_CID);
 static NS_DEFINE_CID(kCTransferableCID,        NS_TRANSFERABLE_CID);
 static NS_DEFINE_CID(kHTMLConverterCID,        NS_HTMLFORMATCONVERTER_CID);
@@ -120,64 +121,163 @@ SelectionCopyHelper(nsISelection *aSel, 
   rv = docEncoder->GetContextParameters(&bIsPlainTextContext,
                                         &bIsMathMLContext);
   if (NS_FAILED(rv))
     return rv;
 
   bool bIsHTMLCopy = !bIsPlainTextContext;
 
   nsAutoString buffer, parents, info, textBuffer, plaintextBuffer;
+  nsAutoString mathmlBuffer, texBuffer;
+  nsAutoString mathmlPresentationBuffer, mathmlContentBuffer;
 
   rv = docEncoder->EncodeToString(textBuffer);
   if (NS_FAILED(rv)) 
     return rv;
 
   // If the selection was in a text input, in textarea or in pre, the encoder
   // already produced plain text. Otherwise,the encoder produced HTML. In that
   // case, we need to create an additional plain text serialization and an
   // addition HTML serialization that encodes context.
+
+  // In a MathML context, we still create these HTML serializations but we also
+  // try to export the flavors described in the MathML REC at
+  // http://www.w3.org/TR/MathML/chapter6.html#world-int-transfers. More
+  // precisely, we try to adhere to the "Recommended Behaviors when
+  // Transferring" and take the following approach:
+  //
+  // - We always export a generic "MathML" flavor (APPLICATION_MATHML_XML)
+  //   containing the source code of the selected MathML fragment.
+  //
+  // - If this fragment has a <semantics> ancestor, we use the innermost one
+  //   to export MathML Presentation", "MathML Content" and "TeX" flavors.
+  //   We don't bother with the annotation key.
+  //
+  // - Finally, we export a plain text flavor with the MathML source code as
+  //   proposed in the MathML REC. This is not the same as the HTML case where
+  //   the plain text flavor is the concatenation of the text nodes selected
+  //   (perhaps visually formatted with spaces and indentations). This sounds
+  //   reasonable as a naive concatenation of the text nodes selected in a
+  //   formula is not really useful in general.
+  // 
   if (bIsHTMLCopy) {
 
-    // First, create the plain text serialization
-    mimeType.AssignLiteral("text/plain");
+    if (!bIsMathMLContext) {
+      // First, create the plain text serialization
+      mimeType.AssignLiteral("text/plain");
 
-    flags =
-      nsIDocumentEncoder::OutputSelectionOnly |
-      nsIDocumentEncoder::OutputAbsoluteLinks |
-      nsIDocumentEncoder::SkipInvisibleContent |
-      nsIDocumentEncoder::OutputDropInvisibleBreak |
-      (aFlags & nsIDocumentEncoder::OutputNoScriptContent);
+      flags =
+        nsIDocumentEncoder::OutputSelectionOnly |
+        nsIDocumentEncoder::OutputAbsoluteLinks |
+        nsIDocumentEncoder::SkipInvisibleContent |
+        nsIDocumentEncoder::OutputDropInvisibleBreak |
+        (aFlags & nsIDocumentEncoder::OutputNoScriptContent);
 
-    rv = docEncoder->Init(domDoc, mimeType, flags);
-    if (NS_FAILED(rv))
-      return rv;
+      rv = docEncoder->Init(domDoc, mimeType, flags);
+      if (NS_FAILED(rv))
+        return rv;
 
-    rv = docEncoder->SetSelection(aSel);
-    if (NS_FAILED(rv))
-      return rv;
+      rv = docEncoder->SetSelection(aSel);
+      if (NS_FAILED(rv))
+        return rv;
 
-    rv = docEncoder->EncodeToString(plaintextBuffer);
-    if (NS_FAILED(rv))
-      return rv;
+      rv = docEncoder->EncodeToString(plaintextBuffer);
+      if (NS_FAILED(rv))
+        return rv;
+    }
 
     // Now create the version that shows HTML context
 
     mimeType.AssignLiteral(kHTMLMime);
 
     flags = aFlags;
 
     rv = docEncoder->Init(domDoc, mimeType, flags);
     NS_ENSURE_SUCCESS(rv, rv);
 
     rv = docEncoder->SetSelection(aSel);
     NS_ENSURE_SUCCESS(rv, rv);
 
     // encode the selection as html with contextual info
     rv = docEncoder->EncodeToStringWithContext(parents, info, buffer);
     NS_ENSURE_SUCCESS(rv, rv);
+
+    if (bIsMathMLContext) {
+      // The MathML REC says:
+      //
+      // "When transferring MathML, an application MUST ensure the content of
+      // the data transfer is a well-formed XML instance of a MathML document
+      // type. Specifically: 
+      //
+      // 1) The instance MAY begin with an XML declaration
+      // 2) The instance MUST contain exactly one root math element.
+      // 3) The instance MUST declare the MathML namespace on the root math
+      // element.
+      // 4) The instance MAY use a schemaLocation attribute on the math element
+      // to indicate the location of the MathML schema that describes the MathML
+      // document type to which the instance conforms. The presence of the
+      // schemaLocation attribute does not require a consumer of the MathML
+      // instance to obtain or use the referenced schema.
+      // 5) The instance SHOULD use numeric character references (e.g. &#x03b1;)
+      // rather than character entity names (e.g. &alpha;) for greater
+      // interoperability.
+      // 6) The instance MUST specify the character encoding, if it uses an
+      // encoding other than UTF-8, either in the XML declaration, or by the
+      // use of a byte-order mark (BOM) for UTF-16-encoded data."
+      //
+      // See http://www.w3.org/TR/MathML/chapter6.html#world-int-transf-flavors
+      //
+      // 1) is optional but the examples in the REC use this XML declaration
+      // for the presentation MathML flavor while the REC recommends not to use
+      // it for the plain text flavor:
+      //
+      // "Since some older MathML processors expect MathML instances
+      // transferred as plain text to begin with a math element, the text
+      // version SHOULD generally omit the XML declaration"
+      //
+      // 2) and 3) are guaranteed by nsHTMLCopyEncoder::SerializeMathRoot
+      // and we ignore the optional 4). ConvertAndWrite in
+      // nsDocumentEncoder.cpp tries to generate either a unicode code point
+      // or a numeric character reference so 5) holds too. Regarding 6), we use
+      // a BOM character and an explicit encoding="UTF-16".
+      //
+      plaintextBuffer.Assign(buffer);
+
+      PRUnichar bom = 0xFEFF;
+      mathmlBuffer.Assign(bom);
+      mathmlBuffer.
+        AppendLiteral("<?xml version=\"1.0\" encoding=\"UTF-16\"?>\n");
+      mathmlBuffer.Append(plaintextBuffer);
+
+      // If there is a <semantics> ancestor, encode annotation for
+      // Presentation MathML, Content MathML and TeX.
+      rv = docEncoder->Init(domDoc, mimeType, flags);
+      NS_ENSURE_SUCCESS(rv, rv);
+
+      rv = docEncoder->SetSelection(aSel);
+      NS_ENSURE_SUCCESS(rv, rv);
+
+      rv = docEncoder->EncodeMathMLAnnotationToString(
+                       NS_LITERAL_STRING(APPLICATION_MATHML_PRESENTATION_XML),
+                       true,
+                       mathmlPresentationBuffer);
+      NS_ENSURE_SUCCESS(rv, rv);
+
+      rv = docEncoder->EncodeMathMLAnnotationToString(
+                       NS_LITERAL_STRING(APPLICATION_MATHML_CONTENT_XML),
+                       true,
+                       mathmlContentBuffer);
+      NS_ENSURE_SUCCESS(rv, rv);
+
+      rv = docEncoder->
+        EncodeMathMLAnnotationToString(NS_LITERAL_STRING(APPLICATION_TEX),
+                                       false,
+                                       texBuffer);
+      NS_ENSURE_SUCCESS(rv, rv);
+    }
   }
   
   // Get the Clipboard
   nsCOMPtr<nsIClipboard> clipboard;
   if (doPutOnClipboard) {
     clipboard = do_GetService(kCClipboardCID, &rv);
     if (NS_FAILED(rv))
       return rv;
@@ -190,16 +290,50 @@ SelectionCopyHelper(nsISelection *aSel, 
       trans->Init(aDoc->GetLoadContext());
       if (bIsHTMLCopy) {
         // Set up a format converter so that clipboard flavor queries work.
         // This converter isn't really used for conversions.
         nsCOMPtr<nsIFormatConverter> htmlConverter =
           do_CreateInstance(kHTMLConverterCID);
         trans->SetConverter(htmlConverter);
 
+        if (bIsMathMLContext) {
+          // The MathML REC seems to suggest the order of preference
+          // MathML-Presentation, MathML-content, MathML, TeX, text/unicode
+          // However, our MathML flavor is more precise than the
+          // MathML-Presentation & MathML-content flavors because it
+          // represents the selected subtree rather than the one given by a
+          // <semantics> ancestor. Hence we put the MathML flavor first.
+          // 
+          if (!mathmlBuffer.IsEmpty()) {
+            // Add the MathML DataFlavor to the transferable
+            rv = AppendString(trans, mathmlBuffer, APPLICATION_MATHML_XML);
+            NS_ENSURE_SUCCESS(rv, rv);
+          }
+
+          if (!mathmlPresentationBuffer.IsEmpty()) {
+            // Add the MathML Presentation DataFlavor to the transferable
+            rv = AppendString(trans, mathmlPresentationBuffer,
+                              APPLICATION_MATHML_PRESENTATION_XML);
+            NS_ENSURE_SUCCESS(rv, rv);
+          }
+
+          if (!mathmlContentBuffer.IsEmpty()) {
+            // Add the MathML Content DataFlavor to the transferable
+            rv = AppendString(trans, mathmlContentBuffer,
+                              APPLICATION_MATHML_CONTENT_XML);
+            NS_ENSURE_SUCCESS(rv, rv);
+          }
+
+          if (!texBuffer.IsEmpty()) {
+            // Add the TeX DataFlavor to the transferable
+            rv = AppendString(trans, texBuffer, APPLICATION_TEX);
+          }
+        }
+
         if (!buffer.IsEmpty()) {
           // Add the html DataFlavor to the transferable
           rv = AppendString(trans, buffer, kHTMLMime);
           NS_ENSURE_SUCCESS(rv, rv);
         }
 
         // Add the htmlcontext DataFlavor to the transferable
         // Even if parents is empty string, this flavor should

