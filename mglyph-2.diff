# HG changeset patch
# Parent fbfc08d2635f57f241f374f3839590fd6aba703c
# User Frédéric Wang <fred.wang@free.fr>
Add support for mglyph (bug 297465) - part 2.

diff --git a/content/mathml/content/src/nsMathMLElement.cpp b/content/mathml/content/src/nsMathMLElement.cpp
--- a/content/mathml/content/src/nsMathMLElement.cpp
+++ b/content/mathml/content/src/nsMathMLElement.cpp
@@ -141,16 +141,28 @@ nsMathMLElement::ParseAttribute(PRInt32 
       return aResult.ParseColor(aValue);
     }
   }
 
   return nsMathMLElementBase::ParseAttribute(aNamespaceID, aAttribute,
                                              aValue, aResult);
 }
 
+static nsGenericElement::MappedAttributeEntry sMglyphStyles[] = {
+  // The MathML REC says that width and height attributes can not be set on
+  // mstyle. So we don't need to find these attributes on ancestors. The valign
+  // attribute is handled in the layout code.
+  { &nsGkAtoms::width},
+  { &nsGkAtoms::height},
+
+  // No mathcolor: the MathML REC says that this attribute has no effect.
+  { &nsGkAtoms::mathbackground_ },
+  { nsnull }
+};
+
 static nsGenericElement::MappedAttributeEntry sTokenStyles[] = {
   { &nsGkAtoms::mathsize_ },
   { &nsGkAtoms::fontsize_ },
   { &nsGkAtoms::color },
   { &nsGkAtoms::fontfamily_ },
   { nsnull }
 };
 
@@ -166,31 +178,36 @@ static nsGenericElement::MappedAttribute
   { &nsGkAtoms::mathcolor_ },
   { &nsGkAtoms::mathbackground_ },
   { nsnull }
 };
 
 bool
 nsMathMLElement::IsAttributeMapped(const nsIAtom* aAttribute) const
 {
+  static const MappedAttributeEntry* const mglyphMap[] = {
+    sMglyphStyles
+  };
   static const MappedAttributeEntry* const tokenMap[] = {
     sTokenStyles,
     sCommonPresStyles
   };
   static const MappedAttributeEntry* const mstyleMap[] = {
     sTokenStyles,
     sEnvironmentStyles,
     sCommonPresStyles
   };
   static const MappedAttributeEntry* const commonPresMap[] = {
     sCommonPresStyles
   };
   
-  // We don't support mglyph (yet).
   nsIAtom* tag = Tag();
+  if (tag == nsGkAtoms::mglyph_) {
+    return FindAttributeDependence(aAttribute, mglyphMap);
+  }
   if (tag == nsGkAtoms::ms_ || tag == nsGkAtoms::mi_ ||
       tag == nsGkAtoms::mn_ || tag == nsGkAtoms::mo_ ||
       tag == nsGkAtoms::mtext_ || tag == nsGkAtoms::mspace_)
     return FindAttributeDependence(aAttribute, tokenMap);
   if (tag == nsGkAtoms::mstyle_ ||
       tag == nsGkAtoms::math)
     return FindAttributeDependence(aAttribute, mstyleMap);
 
@@ -611,16 +628,61 @@ nsMathMLElement::MapMathMLAttributesInto
     }
     nscolor color;
     nsCSSValue* colorValue = aData->ValueForColor();
     if (value && value->GetColorValue(color) &&
         colorValue->GetUnit() == eCSSUnit_Null) {
       colorValue->SetColorValue(color);
     }
   }
+
+  if (aData->mSIDs & NS_STYLE_INHERIT_BIT(Position)) {
+    // width
+    //
+    // "Specifies the desired width of the glyph; see height."
+    //
+    // values: length
+    // default: from image
+    //
+    // We don't allow negative values.
+    // XXXfw: Do not allow unitless values for now. The MathML REC says they
+    // should be treated like percent values but some pages in the MathML test
+    // suite seem to assume they are pixel values.
+    //
+    nsCSSValue* width = aData->ValueForWidth();
+    if (width->GetUnit() == eCSSUnit_Null) {
+      const nsAttrValue* value = aAttributes->GetAttr(nsGkAtoms::width);
+      if (value && value->Type() == nsAttrValue::eString) {
+        ParseNumericValue(value->GetStringValue(), *width, 0);
+      }
+    }
+
+    // height
+    //
+    // "Specifies the desired height of the glyph. If only one of width and
+    // height are given, the image should be scaled to preserve the aspect
+    // ratio; if neither are given, the image should be displayed at its
+    // natural size."
+    //
+    // values: length
+    // default: from image
+    //
+    // We don't allow negative values.
+    // XXXfw: Do not allow unitless values for now. The MathML REC says they
+    // should be treated like percent values but some pages in the MathML test
+    // suite seem to assume they are pixel values.
+    //
+    nsCSSValue* height = aData->ValueForHeight();
+    if (height->GetUnit() == eCSSUnit_Null) {
+      const nsAttrValue* value = aAttributes->GetAttr(nsGkAtoms::height);
+      if (value && value->Type() == nsAttrValue::eString) {
+        ParseNumericValue(value->GetStringValue(), *height, 0);
+      }
+    }
+  }
 }
 
 nsresult
 nsMathMLElement::PreHandleEvent(nsEventChainPreVisitor& aVisitor)
 {
   nsresult rv = nsGenericElement::PreHandleEvent(aVisitor);
   NS_ENSURE_SUCCESS(rv, rv);
 
