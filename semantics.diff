# HG changeset patch
# Parent 7a52ba9b15428708096c21d37d7eb1193c7edf83
# User Frédéric Wang <fred.wang@free.fr>
Improve how <semantics> determine the visible child. b=745131, r=karlt.

diff --git a/layout/base/nsCSSFrameConstructor.cpp b/layout/base/nsCSSFrameConstructor.cpp
--- a/layout/base/nsCSSFrameConstructor.cpp
+++ b/layout/base/nsCSSFrameConstructor.cpp
@@ -4692,16 +4692,18 @@ nsCSSFrameConstructor::FindMathMLData(El
                   FCDATA_IS_LINE_PARTICIPANT |
                   FCDATA_WRAP_KIDS_IN_BLOCKS,
                   NS_NewMathMLmathInlineFrame);
     return &sInlineMathData;
   }
       
 
   static const FrameConstructionDataByTag sMathMLData[] = {
+    SIMPLE_MATHML_CREATE(annotation_, NS_NewMathMLTokenFrame),
+    SIMPLE_MATHML_CREATE(annotation_xml_, NS_NewMathMLmrowFrame),
     SIMPLE_MATHML_CREATE(mi_, NS_NewMathMLTokenFrame),
     SIMPLE_MATHML_CREATE(mn_, NS_NewMathMLTokenFrame),
     SIMPLE_MATHML_CREATE(ms_, NS_NewMathMLTokenFrame),
     SIMPLE_MATHML_CREATE(mtext_, NS_NewMathMLTokenFrame),
     SIMPLE_MATHML_CREATE(mo_, NS_NewMathMLmoFrame),
     SIMPLE_MATHML_CREATE(mfrac_, NS_NewMathMLmfracFrame),
     SIMPLE_MATHML_CREATE(msup_, NS_NewMathMLmsupFrame),
     SIMPLE_MATHML_CREATE(msub_, NS_NewMathMLmsubFrame),
diff --git a/layout/generic/nsFrameIdList.h b/layout/generic/nsFrameIdList.h
--- a/layout/generic/nsFrameIdList.h
+++ b/layout/generic/nsFrameIdList.h
@@ -95,16 +95,17 @@ FRAME_ID(nsMathMLmsupFrame)
 FRAME_ID(nsMathMLmtableFrame)
 FRAME_ID(nsMathMLmtableOuterFrame)
 FRAME_ID(nsMathMLmtdFrame)
 FRAME_ID(nsMathMLmtdInnerFrame)
 FRAME_ID(nsMathMLmtrFrame)
 FRAME_ID(nsMathMLmunderFrame)
 FRAME_ID(nsMathMLmunderoverFrame)
 FRAME_ID(nsMathMLsemanticsFrame)
+FRAME_ID(nsMathMLSelectedFrame)
 FRAME_ID(nsMathMLTokenFrame)
 FRAME_ID(nsMenuBarFrame)
 FRAME_ID(nsMenuFrame)
 FRAME_ID(nsMenuPopupFrame)
 FRAME_ID(nsMeterFrame)
 FRAME_ID(nsObjectFrame)
 FRAME_ID(nsPageBreakFrame)
 FRAME_ID(nsPageContentFrame)
diff --git a/layout/mathml/Makefile.in b/layout/mathml/Makefile.in
--- a/layout/mathml/Makefile.in
+++ b/layout/mathml/Makefile.in
@@ -43,16 +43,17 @@ CPPSRCS =         nsMathMLChar.cpp		    
                   nsMathMLmmultiscriptsFrame.cpp	\
                   nsMathMLmtableFrame.cpp		\
                   nsMathMLmunderoverFrame.cpp		\
                   nsMathMLmpaddedFrame.cpp		\
                   nsMathMLmspaceFrame.cpp		\
                   nsMathMLmstyleFrame.cpp		\
                   nsMathMLmsqrtFrame.cpp		\
                   nsMathMLmrootFrame.cpp		\
+                  nsMathMLSelectedFrame.cpp		\
                   nsMathMLmactionFrame.cpp		\
                   nsMathMLmencloseFrame.cpp		\
                   nsMathMLsemanticsFrame.cpp		\
                   $(NULL)
 
 include $(topsrcdir)/config/config.mk
 
 # we don't want the shared lib, but we want to force the creation of a static lib.
diff --git a/layout/mathml/mathml.css b/layout/mathml/mathml.css
--- a/layout/mathml/mathml.css
+++ b/layout/mathml/mathml.css
@@ -405,33 +405,16 @@ mtd[_moz-math-columnline="dashed"] {
 }
 /* Don't actually style -moz-math-anonymous by default */
 /*
 ::-moz-math-anonymous {
 }
 */
 
 /**********************************************************************/
-/* Hide embedded semantic MathML content (as opposed to presentational
-   content, which we render). Ideally, here is the behavior that we want:
-
-   if there is an annotation-xml[encoding="MathML-Presentation"]
-     render that annotation, and ignore the first child of the
-     <semantics> element and all other annotations, 
-   else
-     render the first child of <semantics> and ignore all annotations
-
-   But this cannot be expressed with CSS. As a stop-gap, just render
-   the first child to cater for most of the common cases - bug 154931.
-*/
-semantics > :not(:first-child) {
-  display: none;
-}
-
-/**********************************************************************/
 /* This is used when wrapping non-MathML inline elements inside math. */
 *|*::-moz-mathml-anonymous-block {
   display: inline-block !important;
   position: static !important;
   text-indent: 0;
 }
 
 /*****************************************/
diff --git a/layout/mathml/nsMathMLmactionFrame.cpp b/layout/mathml/nsMathMLSelectedFrame.cpp
copy from layout/mathml/nsMathMLmactionFrame.cpp
copy to layout/mathml/nsMathMLSelectedFrame.cpp
--- a/layout/mathml/nsMathMLmactionFrame.cpp
+++ b/layout/mathml/nsMathMLSelectedFrame.cpp
@@ -3,117 +3,46 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "nsCOMPtr.h"
 #include "nsFrame.h"
 #include "nsPresContext.h"
 #include "nsStyleContext.h"
 #include "nsStyleConsts.h"
-#include "nsINameSpaceManager.h"
 
-#include "nsCSSRendering.h"
-#include "prprf.h"         // For PR_snprintf()
-
-#include "nsIDocShellTreeItem.h"
-#include "nsIDocShellTreeOwner.h"
-#include "nsIWebBrowserChrome.h"
-#include "nsIInterfaceRequestor.h"
-#include "nsIInterfaceRequestorUtils.h"
-#include "nsIDOMElement.h"
-#include "nsTextFragment.h"
-
-#include "nsIDOMEventTarget.h"
-
-#include "nsMathMLmactionFrame.h"
-#include "nsAutoPtr.h"
-#include "nsStyleSet.h"
+#include "nsMathMLSelectedFrame.h"
 #include "nsDisplayList.h"
 
-//
-// <maction> -- bind actions to a subexpression - implementation
-//
+NS_IMPL_FRAMEARENA_HELPERS(nsMathMLSelectedFrame)
 
-enum nsMactionActionTypes {
-  NS_MATHML_ACTION_TYPE_CLASS_ERROR            = 0x10,
-  NS_MATHML_ACTION_TYPE_CLASS_USE_SELECTION    = 0x20,
-  NS_MATHML_ACTION_TYPE_CLASS_IGNORE_SELECTION = 0x40,
-  NS_MATHML_ACTION_TYPE_CLASS_BITMASK          = 0xF0,
-
-  NS_MATHML_ACTION_TYPE_NONE       = NS_MATHML_ACTION_TYPE_CLASS_ERROR|0x01,
-
-  NS_MATHML_ACTION_TYPE_TOGGLE     = NS_MATHML_ACTION_TYPE_CLASS_USE_SELECTION|0x01,
-  NS_MATHML_ACTION_TYPE_UNKNOWN    = NS_MATHML_ACTION_TYPE_CLASS_USE_SELECTION|0x02,
-
-  NS_MATHML_ACTION_TYPE_STATUSLINE = NS_MATHML_ACTION_TYPE_CLASS_IGNORE_SELECTION|0x01,
-  NS_MATHML_ACTION_TYPE_TOOLTIP    = NS_MATHML_ACTION_TYPE_CLASS_IGNORE_SELECTION|0x02
-};
-
-
-// helper function to parse actiontype attribute
-static int32_t
-GetActionType(nsIContent* aContent)
+nsMathMLSelectedFrame::~nsMathMLSelectedFrame()
 {
-  nsAutoString value;
-
-  if (aContent) {
-    if (!aContent->GetAttr(kNameSpaceID_None, nsGkAtoms::actiontype_, value))
-      return NS_MATHML_ACTION_TYPE_NONE; 
-  }
-
-  if (value.EqualsLiteral("toggle"))
-    return NS_MATHML_ACTION_TYPE_TOGGLE;
-  if (value.EqualsLiteral("statusline"))
-    return NS_MATHML_ACTION_TYPE_STATUSLINE;
-  if (value.EqualsLiteral("tooltip"))
-    return NS_MATHML_ACTION_TYPE_TOOLTIP;
-
-  return NS_MATHML_ACTION_TYPE_UNKNOWN;
-}
-
-nsIFrame*
-NS_NewMathMLmactionFrame(nsIPresShell* aPresShell, nsStyleContext* aContext)
-{
-  return new (aPresShell) nsMathMLmactionFrame(aContext);
-}
-
-NS_IMPL_FRAMEARENA_HELPERS(nsMathMLmactionFrame)
-
-nsMathMLmactionFrame::~nsMathMLmactionFrame()
-{
-  // unregister us as a mouse event listener ...
-  //  printf("maction:%p unregistering as mouse event listener ...\n", this);
-  if (mListener) {
-    mContent->RemoveSystemEventListener(NS_LITERAL_STRING("click"), mListener,
-                                        false);
-    mContent->RemoveSystemEventListener(NS_LITERAL_STRING("mouseover"), mListener,
-                                        false);
-    mContent->RemoveSystemEventListener(NS_LITERAL_STRING("mouseout"), mListener,
-                                        false);
-  }
 }
 
 NS_IMETHODIMP
-nsMathMLmactionFrame::Init(nsIContent*      aContent,
-                           nsIFrame*        aParent,
-                           nsIFrame*        aPrevInFlow)
+nsMathMLSelectedFrame::Init(nsIContent*      aContent,
+                            nsIFrame*        aParent,
+                            nsIFrame*        aPrevInFlow)
 {
   // Init our local attributes
-
-  mChildCount = -1; // these will be updated in GetSelectedFrame()
-  mSelection = 0;
+  mInvalidMarkup = false;
   mSelectedFrame = nullptr;
-  mActionType = GetActionType(aContent);
 
   // Let the base class do the rest
   return nsMathMLContainerFrame::Init(aContent, aParent, aPrevInFlow);
 }
 
 NS_IMETHODIMP
-nsMathMLmactionFrame::TransmitAutomaticData() {
+nsMathMLSelectedFrame::TransmitAutomaticData()
+{
+  // Note that to determine space-like and embellished op properties:
+  //   - <semantics> behaves the same as <maction>
+  //   - <semantics-xml> behaves the same as <mrow>
+
   // The REC defines the following element to be space-like:
   // * an maction element whose selected sub-expression exists and is
   //   space-like;
   nsIMathMLFrame* mathMLFrame = do_QueryFrame(mSelectedFrame);
   if (mathMLFrame && mathMLFrame->IsSpaceLike()) {
     mPresentationData.flags |= NS_MATHML_SPACE_LIKE;
   } else {
     mPresentationData.flags &= ~NS_MATHML_SPACE_LIKE;
@@ -124,162 +53,49 @@ nsMathMLmactionFrame::TransmitAutomaticD
   //   embellished operator;
   mPresentationData.baseFrame = mSelectedFrame;
   GetEmbellishDataFrom(mSelectedFrame, mEmbellishData);
 
   return NS_OK;
 }
 
 nsresult
-nsMathMLmactionFrame::ChildListChanged(int32_t aModType)
+nsMathMLSelectedFrame::ChildListChanged(int32_t aModType)
 {
   // update cached values
-  mChildCount = -1;
-  mSelection = 0;
+  mInvalidMarkup = false;
   mSelectedFrame = nullptr;
   GetSelectedFrame();
 
   return nsMathMLContainerFrame::ChildListChanged(aModType);
 }
 
-// return the frame whose number is given by the attribute selection="number"
 nsIFrame* 
-nsMathMLmactionFrame::GetSelectedFrame()
+nsMathMLSelectedFrame::GetSelectedFrame()
 {
-  nsAutoString value;
-  int32_t selection; 
-
-  if ((mActionType & NS_MATHML_ACTION_TYPE_CLASS_BITMASK) == 
-       NS_MATHML_ACTION_TYPE_CLASS_ERROR) {
-    // Mark mSelection as an error.
-    mSelection = -1;
-    mSelectedFrame = nullptr;
-    return mSelectedFrame;
-  }
-
-  // Selection is not applied to tooltip and statusline.
-  // Thereby return the first child.
-  if ((mActionType & NS_MATHML_ACTION_TYPE_CLASS_BITMASK) == 
-       NS_MATHML_ACTION_TYPE_CLASS_IGNORE_SELECTION) {
-    // We don't touch mChildCount here. It's incorrect to assign it 1,
-    // and it's inefficient to count the children. It's fine to leave
-    // it be equal -1 because it's not used with other actiontypes.
-    mSelection = 1;
-    mSelectedFrame = mFrames.FirstChild();
-    return mSelectedFrame;
-  }
-
-  GetAttribute(mContent, mPresentationData.mstyle, nsGkAtoms::selection_,
-               value);
-  if (!value.IsEmpty()) {
-    nsresult errorCode;
-    selection = value.ToInteger(&errorCode);
-    if (NS_FAILED(errorCode)) 
-      selection = 1;
-  }
-  else selection = 1; // default is first frame
-
-  if (-1 != mChildCount) { // we have been in this function before...
-    // cater for invalid user-supplied selection
-    if (selection > mChildCount || selection < 1)
-      selection = -1;
-    // quick return if it is identical with our cache
-    if (selection == mSelection) 
-      return mSelectedFrame;
-  }
-
-  // get the selected child and cache new values...
-  int32_t count = 0;
-  nsIFrame* childFrame = mFrames.FirstChild();
-  while (childFrame) {
-    if (!mSelectedFrame) 
-      mSelectedFrame = childFrame; // default is first child
-    if (++count == selection) 
-      mSelectedFrame = childFrame;
-
-    childFrame = childFrame->GetNextSibling();
-  }
-  // cater for invalid user-supplied selection
-  if (selection > count || selection < 1)
-    selection = -1;
-
-  mChildCount = count;
-  mSelection = selection;
-  TransmitAutomaticData();
-
+  // By default, return the first child.
+  mSelectedFrame = mFrames.FirstChild();
   return mSelectedFrame;
 }
 
 NS_IMETHODIMP
-nsMathMLmactionFrame::SetInitialChildList(ChildListID     aListID,
-                                          nsFrameList&    aChildList)
+nsMathMLSelectedFrame::SetInitialChildList(ChildListID     aListID,
+                                           nsFrameList&    aChildList)
 {
-  nsresult rv = nsMathMLContainerFrame::SetInitialChildList(aListID, aChildList);
-
-  // This very first call to GetSelectedFrame() will cause us to be marked as an
-  // embellished operator if the selected child is an embellished operator
-  if (!GetSelectedFrame()) {
-    mActionType = NS_MATHML_ACTION_TYPE_NONE;
-  }
-  else {
-    // create mouse event listener and register it
-    mListener = new nsMathMLmactionFrame::MouseListener(this);
-    // printf("maction:%p registering as mouse event listener ...\n", this);
-    mContent->AddSystemEventListener(NS_LITERAL_STRING("click"), mListener,
-                                     false, false);
-    mContent->AddSystemEventListener(NS_LITERAL_STRING("mouseover"), mListener,
-                                     false, false);
-    mContent->AddSystemEventListener(NS_LITERAL_STRING("mouseout"), mListener,
-                                     false, false);
-  }
+  nsresult rv = nsMathMLContainerFrame::SetInitialChildList(aListID,
+                                                            aChildList);
+  GetSelectedFrame();
   return rv;
 }
 
-NS_IMETHODIMP
-nsMathMLmactionFrame::AttributeChanged(int32_t  aNameSpaceID,
-                                       nsIAtom* aAttribute,
-                                       int32_t  aModType)
-{
-  bool needsReflow = false;
-
-  if (aAttribute == nsGkAtoms::actiontype_) {
-    // updating mActionType ...
-    int32_t oldActionType = mActionType;
-    mActionType = GetActionType(mContent);
-
-    // Initiate a reflow when actiontype classes are different.
-    if ((oldActionType & NS_MATHML_ACTION_TYPE_CLASS_BITMASK) !=
-          (mActionType & NS_MATHML_ACTION_TYPE_CLASS_BITMASK)) {
-      needsReflow = true;
-    }
-  } else if (aAttribute == nsGkAtoms::selection_) {
-    if ((mActionType & NS_MATHML_ACTION_TYPE_CLASS_BITMASK) == 
-         NS_MATHML_ACTION_TYPE_CLASS_USE_SELECTION) {
-      needsReflow = true;
-    }
-  } else {
-    // let the base class handle other attribute changes
-    return 
-      nsMathMLContainerFrame::AttributeChanged(aNameSpaceID, 
-                                               aAttribute, aModType);
-  }
-
-  if (needsReflow) {
-    PresContext()->PresShell()->
-      FrameNeedsReflow(this, nsIPresShell::eTreeChange, NS_FRAME_IS_DIRTY);
-  }
-
-  return NS_OK;
-}
-
 //  Only paint the selected child...
 NS_IMETHODIMP
-nsMathMLmactionFrame::BuildDisplayList(nsDisplayListBuilder*   aBuilder,
-                                       const nsRect&           aDirtyRect,
-                                       const nsDisplayListSet& aLists)
+nsMathMLSelectedFrame::BuildDisplayList(nsDisplayListBuilder*   aBuilder,
+                                        const nsRect&           aDirtyRect,
+                                        const nsDisplayListSet& aLists)
 {
   // Report an error if something wrong was found in this frame.
   // We can't call nsDisplayMathMLError from here,
   // so ask nsMathMLContainerFrame to do the work for us.
   if (NS_MATHML_HAS_ERROR(mPresentationData.flags)) {
     return nsMathMLContainerFrame::BuildDisplayList(aBuilder, aDirtyRect, aLists);
   }
 
@@ -299,20 +115,20 @@ nsMathMLmactionFrame::BuildDisplayList(n
   // visual debug
   rv = DisplayBoundingMetrics(aBuilder, this, mReference, mBoundingMetrics, aLists);
 #endif
   return rv;
 }
 
 // Only reflow the selected child ...
 NS_IMETHODIMP
-nsMathMLmactionFrame::Reflow(nsPresContext*          aPresContext,
-                             nsHTMLReflowMetrics&     aDesiredSize,
-                             const nsHTMLReflowState& aReflowState,
-                             nsReflowStatus&          aStatus)
+nsMathMLSelectedFrame::Reflow(nsPresContext*          aPresContext,
+                              nsHTMLReflowMetrics&     aDesiredSize,
+                              const nsHTMLReflowState& aReflowState,
+                              nsReflowStatus&          aStatus)
 {
   nsresult rv = NS_OK;
   aStatus = NS_FRAME_COMPLETE;
   aDesiredSize.width = aDesiredSize.height = 0;
   aDesiredSize.ascent = 0;
   mBoundingMetrics = nsBoundingMetrics();
   nsIFrame* childFrame = GetSelectedFrame();
   if (childFrame) {
@@ -327,23 +143,23 @@ nsMathMLmactionFrame::Reflow(nsPresConte
   }
   FinalizeReflow(*aReflowState.rendContext, aDesiredSize);
   NS_FRAME_SET_TRUNCATION(aStatus, aReflowState, aDesiredSize);
   return rv;
 }
 
 // Only place the selected child ...
 /* virtual */ nsresult
-nsMathMLmactionFrame::Place(nsRenderingContext& aRenderingContext,
-                            bool                 aPlaceOrigin,
-                            nsHTMLReflowMetrics& aDesiredSize)
+nsMathMLSelectedFrame::Place(nsRenderingContext& aRenderingContext,
+                             bool                 aPlaceOrigin,
+                             nsHTMLReflowMetrics& aDesiredSize)
 {
   nsIFrame* childFrame = GetSelectedFrame();
 
-  if (mSelection == -1) {
+  if (mInvalidMarkup) {
     return ReflowError(aRenderingContext, aDesiredSize);
   }
 
   aDesiredSize.width = aDesiredSize.height = 0;
   aDesiredSize.ascent = 0;
   mBoundingMetrics = nsBoundingMetrics();
   if (childFrame) {
     GetReflowAndBoundingMetricsFor(childFrame, aDesiredSize, mBoundingMetrics);
@@ -351,121 +167,8 @@ nsMathMLmactionFrame::Place(nsRenderingC
       FinishReflowChild(childFrame, PresContext(), nullptr, aDesiredSize, 0, 0, 0);
     }
     mReference.x = 0;
     mReference.y = aDesiredSize.ascent;
   }
   aDesiredSize.mBoundingMetrics = mBoundingMetrics;
   return NS_OK;
 }
-
-// ################################################################
-// Event handlers 
-// ################################################################
-
-NS_IMPL_ISUPPORTS1(nsMathMLmactionFrame::MouseListener,
-                   nsIDOMEventListener)
-
-
-// helper to show a msg on the status bar
-// curled from nsObjectFrame.cpp ...
-void
-ShowStatus(nsPresContext* aPresContext, nsString& aStatusMsg)
-{
-  nsCOMPtr<nsISupports> cont = aPresContext->GetContainer();
-  if (cont) {
-    nsCOMPtr<nsIDocShellTreeItem> docShellItem(do_QueryInterface(cont));
-    if (docShellItem) {
-      nsCOMPtr<nsIDocShellTreeOwner> treeOwner;
-      docShellItem->GetTreeOwner(getter_AddRefs(treeOwner));
-      if (treeOwner) {
-        nsCOMPtr<nsIWebBrowserChrome> browserChrome(do_GetInterface(treeOwner));
-        if (browserChrome) {
-          browserChrome->SetStatus(nsIWebBrowserChrome::STATUS_LINK, aStatusMsg.get());
-        }
-      }
-    }
-  }
-}
-
-NS_IMETHODIMP
-nsMathMLmactionFrame::MouseListener::HandleEvent(nsIDOMEvent* aEvent)
-{
-  nsAutoString eventType;
-  aEvent->GetType(eventType);
-  if (eventType.EqualsLiteral("mouseover")) {
-    mOwner->MouseOver();
-  }
-  else if (eventType.EqualsLiteral("click")) {
-    mOwner->MouseClick();
-  }
-  else if (eventType.EqualsLiteral("mouseout")) {
-    mOwner->MouseOut();
-  }
-  else {
-    NS_ABORT();
-  }
-
-  return NS_OK;
-}
-
-void
-nsMathMLmactionFrame::MouseOver()
-{
-  // see if we should display a status message
-  if (NS_MATHML_ACTION_TYPE_STATUSLINE == mActionType) {
-    // retrieve content from a second child if it exists
-    nsIFrame* childFrame = mFrames.FrameAt(1);
-    if (!childFrame) return;
-
-    nsIContent* content = childFrame->GetContent();
-    if (!content) return;
-
-    // check whether the content is mtext or not
-    if (content->GetNameSpaceID() == kNameSpaceID_MathML &&
-        content->Tag() == nsGkAtoms::mtext_) {
-      // get the text to be displayed
-      content = content->GetFirstChild();
-      if (!content) return;
-
-      const nsTextFragment* textFrg = content->GetText();
-      if (!textFrg) return;
-
-      nsAutoString text;
-      textFrg->AppendTo(text);
-      // collapse whitespaces as listed in REC, section 3.2.6.1
-      text.CompressWhitespace();
-      ShowStatus(PresContext(), text);
-    }
-  }
-}
-
-void
-nsMathMLmactionFrame::MouseOut()
-{
-  // see if we should remove the status message
-  if (NS_MATHML_ACTION_TYPE_STATUSLINE == mActionType) {
-    nsAutoString value;
-    value.SetLength(0);
-    ShowStatus(PresContext(), value);
-  }
-}
-
-void
-nsMathMLmactionFrame::MouseClick()
-{
-  if (NS_MATHML_ACTION_TYPE_TOGGLE == mActionType) {
-    if (mChildCount > 1) {
-      int32_t selection = (mSelection == mChildCount)? 1 : mSelection + 1;
-      nsAutoString value;
-      char cbuf[10];
-      PR_snprintf(cbuf, sizeof(cbuf), "%d", selection);
-      value.AssignASCII(cbuf);
-      bool notify = false; // don't yet notify the document
-      mContent->SetAttr(kNameSpaceID_None, nsGkAtoms::selection_, value, notify);
-
-      // Now trigger a content-changed reflow...
-      PresContext()->PresShell()->
-        FrameNeedsReflow(mSelectedFrame, nsIPresShell::eTreeChange,
-                         NS_FRAME_IS_DIRTY);
-    }
-  }
-}
diff --git a/layout/mathml/nsMathMLmactionFrame.h b/layout/mathml/nsMathMLSelectedFrame.h
copy from layout/mathml/nsMathMLmactionFrame.h
copy to layout/mathml/nsMathMLSelectedFrame.h
--- a/layout/mathml/nsMathMLmactionFrame.h
+++ b/layout/mathml/nsMathMLSelectedFrame.h
@@ -1,38 +1,29 @@
 /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-#ifndef nsMathMLmactionFrame_h___
-#define nsMathMLmactionFrame_h___
+#ifndef nsMathMLSelectedFrame_h___
+#define nsMathMLSelectedFrame_h___
 
-#include "nsCOMPtr.h"
 #include "nsMathMLContainerFrame.h"
-#include "nsIDOMEventListener.h"
-#include "mozilla/Attributes.h"
 
-//
-// <maction> -- bind actions to a subexpression
-//
-
-class nsMathMLmactionFrame : public nsMathMLContainerFrame {
+class nsMathMLSelectedFrame : public nsMathMLContainerFrame {
 public:
   NS_DECL_FRAMEARENA_HELPERS
 
-  friend nsIFrame* NS_NewMathMLmactionFrame(nsIPresShell* aPresShell, nsStyleContext* aContext);
-
-  NS_IMETHOD
-  TransmitAutomaticData();
-
   NS_IMETHOD
   Init(nsIContent*      aContent,
        nsIFrame*        aParent,
-       nsIFrame*        aPrevInFlow);
+       nsIFrame*        aPrevInFlow) MOZ_OVERRIDE;
+
+  NS_IMETHOD
+  TransmitAutomaticData() MOZ_OVERRIDE;
 
   NS_IMETHOD
   SetInitialChildList(ChildListID     aListID,
                       nsFrameList&    aChildList) MOZ_OVERRIDE;
 
   virtual nsresult
   ChildListChanged(int32_t aModType) MOZ_OVERRIDE;
 
@@ -46,47 +37,22 @@ public:
         nsHTMLReflowMetrics& aDesiredSize) MOZ_OVERRIDE;
 
   NS_IMETHOD
   Reflow(nsPresContext*          aPresContext,
          nsHTMLReflowMetrics&     aDesiredSize,
          const nsHTMLReflowState& aReflowState,
          nsReflowStatus&          aStatus) MOZ_OVERRIDE;
 
-  NS_IMETHOD
-  AttributeChanged(int32_t  aNameSpaceID,
-                   nsIAtom* aAttribute,
-                   int32_t  aModType) MOZ_OVERRIDE;
-
-private:
-  void MouseClick();
-  void MouseOver();
-  void MouseOut();
-
-  class MouseListener MOZ_FINAL : public nsIDOMEventListener
-  {
-    NS_DECL_ISUPPORTS
-    NS_DECL_NSIDOMEVENTLISTENER
-
-    MouseListener(nsMathMLmactionFrame* aOwner) : mOwner(aOwner) { };
-
-    nsMathMLmactionFrame* mOwner;
-  };
-
 protected:
-  nsMathMLmactionFrame(nsStyleContext* aContext) : nsMathMLContainerFrame(aContext) {}
-  virtual ~nsMathMLmactionFrame();
+  nsMathMLSelectedFrame(nsStyleContext* aContext) :
+    nsMathMLContainerFrame(aContext) {}
+  virtual ~nsMathMLSelectedFrame();
   
   virtual int GetSkipSides() const { return 0; }
 
-private:
-  int32_t         mActionType;
-  int32_t         mChildCount;
-  int32_t         mSelection;
+  virtual nsIFrame* GetSelectedFrame();
+
   nsIFrame*       mSelectedFrame;
-  nsCOMPtr<MouseListener> mListener;
-
-  // helper to return the frame for the attribute selection="number"
-  nsIFrame* 
-  GetSelectedFrame();
+  bool            mInvalidMarkup;
 };
 
-#endif /* nsMathMLmactionFrame_h___ */
+#endif /* nsMathMLSelectedFrame_h___ */
diff --git a/layout/mathml/nsMathMLTokenFrame.cpp b/layout/mathml/nsMathMLTokenFrame.cpp
--- a/layout/mathml/nsMathMLTokenFrame.cpp
+++ b/layout/mathml/nsMathMLTokenFrame.cpp
@@ -26,17 +26,18 @@ nsMathMLTokenFrame::~nsMathMLTokenFrame(
 }
 
 NS_IMETHODIMP
 nsMathMLTokenFrame::InheritAutomaticData(nsIFrame* aParent)
 {
   // let the base class get the default from our parent
   nsMathMLContainerFrame::InheritAutomaticData(aParent);
 
-  if (mContent->Tag() != nsGkAtoms::mspace_) {
+  if (mContent->Tag() != nsGkAtoms::mspace_ &&
+      mContent->Tag() != nsGkAtoms::annotation_) {
     // see if the directionality attribute is there
     nsMathMLFrame::FindAttrDirectionality(mContent, mPresentationData);
   }
 
   ProcessTextData();
 
   return NS_OK;
 }
diff --git a/layout/mathml/nsMathMLmactionFrame.cpp b/layout/mathml/nsMathMLmactionFrame.cpp
--- a/layout/mathml/nsMathMLmactionFrame.cpp
+++ b/layout/mathml/nsMathMLmactionFrame.cpp
@@ -92,82 +92,57 @@ nsMathMLmactionFrame::~nsMathMLmactionFr
 }
 
 NS_IMETHODIMP
 nsMathMLmactionFrame::Init(nsIContent*      aContent,
                            nsIFrame*        aParent,
                            nsIFrame*        aPrevInFlow)
 {
   // Init our local attributes
-
   mChildCount = -1; // these will be updated in GetSelectedFrame()
-  mSelection = 0;
-  mSelectedFrame = nullptr;
   mActionType = GetActionType(aContent);
 
   // Let the base class do the rest
-  return nsMathMLContainerFrame::Init(aContent, aParent, aPrevInFlow);
-}
-
-NS_IMETHODIMP
-nsMathMLmactionFrame::TransmitAutomaticData() {
-  // The REC defines the following element to be space-like:
-  // * an maction element whose selected sub-expression exists and is
-  //   space-like;
-  nsIMathMLFrame* mathMLFrame = do_QueryFrame(mSelectedFrame);
-  if (mathMLFrame && mathMLFrame->IsSpaceLike()) {
-    mPresentationData.flags |= NS_MATHML_SPACE_LIKE;
-  } else {
-    mPresentationData.flags &= ~NS_MATHML_SPACE_LIKE;
-  }
-
-  // The REC defines the following element to be an embellished operator:
-  // * an maction element whose selected sub-expression exists and is an
-  //   embellished operator;
-  mPresentationData.baseFrame = mSelectedFrame;
-  GetEmbellishDataFrom(mSelectedFrame, mEmbellishData);
-
-  return NS_OK;
+  return nsMathMLSelectedFrame::Init(aContent, aParent, aPrevInFlow);
 }
 
 nsresult
 nsMathMLmactionFrame::ChildListChanged(int32_t aModType)
 {
   // update cached values
   mChildCount = -1;
-  mSelection = 0;
-  mSelectedFrame = nullptr;
   GetSelectedFrame();
 
-  return nsMathMLContainerFrame::ChildListChanged(aModType);
+  return nsMathMLSelectedFrame::ChildListChanged(aModType);
 }
 
 // return the frame whose number is given by the attribute selection="number"
 nsIFrame* 
 nsMathMLmactionFrame::GetSelectedFrame()
 {
   nsAutoString value;
   int32_t selection; 
 
   if ((mActionType & NS_MATHML_ACTION_TYPE_CLASS_BITMASK) == 
        NS_MATHML_ACTION_TYPE_CLASS_ERROR) {
-    // Mark mSelection as an error.
     mSelection = -1;
+    mInvalidMarkup = true;
     mSelectedFrame = nullptr;
     return mSelectedFrame;
   }
 
   // Selection is not applied to tooltip and statusline.
   // Thereby return the first child.
   if ((mActionType & NS_MATHML_ACTION_TYPE_CLASS_BITMASK) == 
        NS_MATHML_ACTION_TYPE_CLASS_IGNORE_SELECTION) {
     // We don't touch mChildCount here. It's incorrect to assign it 1,
     // and it's inefficient to count the children. It's fine to leave
     // it be equal -1 because it's not used with other actiontypes.
     mSelection = 1;
+    mInvalidMarkup = false;
     mSelectedFrame = mFrames.FirstChild();
     return mSelectedFrame;
   }
 
   GetAttribute(mContent, mPresentationData.mstyle, nsGkAtoms::selection_,
                value);
   if (!value.IsEmpty()) {
     nsresult errorCode;
@@ -198,16 +173,17 @@ nsMathMLmactionFrame::GetSelectedFrame()
     childFrame = childFrame->GetNextSibling();
   }
   // cater for invalid user-supplied selection
   if (selection > count || selection < 1)
     selection = -1;
 
   mChildCount = count;
   mSelection = selection;
+  mInvalidMarkup = (mSelection == -1);
   TransmitAutomaticData();
 
   return mSelectedFrame;
 }
 
 NS_IMETHODIMP
 nsMathMLmactionFrame::SetInitialChildList(ChildListID     aListID,
                                           nsFrameList&    aChildList)
@@ -265,103 +241,16 @@ nsMathMLmactionFrame::AttributeChanged(i
   if (needsReflow) {
     PresContext()->PresShell()->
       FrameNeedsReflow(this, nsIPresShell::eTreeChange, NS_FRAME_IS_DIRTY);
   }
 
   return NS_OK;
 }
 
-//  Only paint the selected child...
-NS_IMETHODIMP
-nsMathMLmactionFrame::BuildDisplayList(nsDisplayListBuilder*   aBuilder,
-                                       const nsRect&           aDirtyRect,
-                                       const nsDisplayListSet& aLists)
-{
-  // Report an error if something wrong was found in this frame.
-  // We can't call nsDisplayMathMLError from here,
-  // so ask nsMathMLContainerFrame to do the work for us.
-  if (NS_MATHML_HAS_ERROR(mPresentationData.flags)) {
-    return nsMathMLContainerFrame::BuildDisplayList(aBuilder, aDirtyRect, aLists);
-  }
-
-  nsresult rv = DisplayBorderBackgroundOutline(aBuilder, aLists);
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  nsIFrame* childFrame = GetSelectedFrame();
-  if (childFrame) {
-    // Put the child's background directly onto the content list
-    nsDisplayListSet set(aLists, aLists.Content());
-    // The children should be in content order
-    rv = BuildDisplayListForChild(aBuilder, childFrame, aDirtyRect, set);
-    NS_ENSURE_SUCCESS(rv, rv);
-  }
-
-#if defined(DEBUG) && defined(SHOW_BOUNDING_BOX)
-  // visual debug
-  rv = DisplayBoundingMetrics(aBuilder, this, mReference, mBoundingMetrics, aLists);
-#endif
-  return rv;
-}
-
-// Only reflow the selected child ...
-NS_IMETHODIMP
-nsMathMLmactionFrame::Reflow(nsPresContext*          aPresContext,
-                             nsHTMLReflowMetrics&     aDesiredSize,
-                             const nsHTMLReflowState& aReflowState,
-                             nsReflowStatus&          aStatus)
-{
-  nsresult rv = NS_OK;
-  aStatus = NS_FRAME_COMPLETE;
-  aDesiredSize.width = aDesiredSize.height = 0;
-  aDesiredSize.ascent = 0;
-  mBoundingMetrics = nsBoundingMetrics();
-  nsIFrame* childFrame = GetSelectedFrame();
-  if (childFrame) {
-    nsSize availSize(aReflowState.ComputedWidth(), NS_UNCONSTRAINEDSIZE);
-    nsHTMLReflowState childReflowState(aPresContext, aReflowState,
-                                       childFrame, availSize);
-    rv = ReflowChild(childFrame, aPresContext, aDesiredSize,
-                     childReflowState, aStatus);
-    SaveReflowAndBoundingMetricsFor(childFrame, aDesiredSize,
-                                    aDesiredSize.mBoundingMetrics);
-    mBoundingMetrics = aDesiredSize.mBoundingMetrics;
-  }
-  FinalizeReflow(*aReflowState.rendContext, aDesiredSize);
-  NS_FRAME_SET_TRUNCATION(aStatus, aReflowState, aDesiredSize);
-  return rv;
-}
-
-// Only place the selected child ...
-/* virtual */ nsresult
-nsMathMLmactionFrame::Place(nsRenderingContext& aRenderingContext,
-                            bool                 aPlaceOrigin,
-                            nsHTMLReflowMetrics& aDesiredSize)
-{
-  nsIFrame* childFrame = GetSelectedFrame();
-
-  if (mSelection == -1) {
-    return ReflowError(aRenderingContext, aDesiredSize);
-  }
-
-  aDesiredSize.width = aDesiredSize.height = 0;
-  aDesiredSize.ascent = 0;
-  mBoundingMetrics = nsBoundingMetrics();
-  if (childFrame) {
-    GetReflowAndBoundingMetricsFor(childFrame, aDesiredSize, mBoundingMetrics);
-    if (aPlaceOrigin) {
-      FinishReflowChild(childFrame, PresContext(), nullptr, aDesiredSize, 0, 0, 0);
-    }
-    mReference.x = 0;
-    mReference.y = aDesiredSize.ascent;
-  }
-  aDesiredSize.mBoundingMetrics = mBoundingMetrics;
-  return NS_OK;
-}
-
 // ################################################################
 // Event handlers 
 // ################################################################
 
 NS_IMPL_ISUPPORTS1(nsMathMLmactionFrame::MouseListener,
                    nsIDOMEventListener)
 
 
diff --git a/layout/mathml/nsMathMLmactionFrame.h b/layout/mathml/nsMathMLmactionFrame.h
--- a/layout/mathml/nsMathMLmactionFrame.h
+++ b/layout/mathml/nsMathMLmactionFrame.h
@@ -2,64 +2,46 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #ifndef nsMathMLmactionFrame_h___
 #define nsMathMLmactionFrame_h___
 
 #include "nsCOMPtr.h"
-#include "nsMathMLContainerFrame.h"
+#include "nsMathMLSelectedFrame.h"
 #include "nsIDOMEventListener.h"
 #include "mozilla/Attributes.h"
 
 //
 // <maction> -- bind actions to a subexpression
 //
 
-class nsMathMLmactionFrame : public nsMathMLContainerFrame {
+class nsMathMLmactionFrame : public nsMathMLSelectedFrame {
 public:
   NS_DECL_FRAMEARENA_HELPERS
 
   friend nsIFrame* NS_NewMathMLmactionFrame(nsIPresShell* aPresShell, nsStyleContext* aContext);
 
   NS_IMETHOD
-  TransmitAutomaticData();
-
-  NS_IMETHOD
   Init(nsIContent*      aContent,
        nsIFrame*        aParent,
        nsIFrame*        aPrevInFlow);
 
   NS_IMETHOD
   SetInitialChildList(ChildListID     aListID,
-                      nsFrameList&    aChildList) MOZ_OVERRIDE;
+                      nsFrameList&    aChildList);
 
   virtual nsresult
-  ChildListChanged(int32_t aModType) MOZ_OVERRIDE;
-
-  NS_IMETHOD BuildDisplayList(nsDisplayListBuilder*   aBuilder,
-                              const nsRect&           aDirtyRect,
-                              const nsDisplayListSet& aLists) MOZ_OVERRIDE;
-
-  virtual nsresult
-  Place(nsRenderingContext& aRenderingContext,
-        bool                 aPlaceOrigin,
-        nsHTMLReflowMetrics& aDesiredSize) MOZ_OVERRIDE;
-
-  NS_IMETHOD
-  Reflow(nsPresContext*          aPresContext,
-         nsHTMLReflowMetrics&     aDesiredSize,
-         const nsHTMLReflowState& aReflowState,
-         nsReflowStatus&          aStatus) MOZ_OVERRIDE;
+  ChildListChanged(int32_t aModType);
 
   NS_IMETHOD
   AttributeChanged(int32_t  aNameSpaceID,
                    nsIAtom* aAttribute,
-                   int32_t  aModType) MOZ_OVERRIDE;
+                   int32_t  aModType);
 
 private:
   void MouseClick();
   void MouseOver();
   void MouseOut();
 
   class MouseListener MOZ_FINAL : public nsIDOMEventListener
   {
@@ -67,26 +49,24 @@ private:
     NS_DECL_NSIDOMEVENTLISTENER
 
     MouseListener(nsMathMLmactionFrame* aOwner) : mOwner(aOwner) { };
 
     nsMathMLmactionFrame* mOwner;
   };
 
 protected:
-  nsMathMLmactionFrame(nsStyleContext* aContext) : nsMathMLContainerFrame(aContext) {}
+  nsMathMLmactionFrame(nsStyleContext* aContext) :
+    nsMathMLSelectedFrame(aContext) {}
   virtual ~nsMathMLmactionFrame();
   
-  virtual int GetSkipSides() const { return 0; }
-
 private:
   int32_t         mActionType;
   int32_t         mChildCount;
   int32_t         mSelection;
-  nsIFrame*       mSelectedFrame;
   nsCOMPtr<MouseListener> mListener;
 
   // helper to return the frame for the attribute selection="number"
   nsIFrame* 
   GetSelectedFrame();
 };
 
 #endif /* nsMathMLmactionFrame_h___ */
diff --git a/layout/mathml/nsMathMLsemanticsFrame.cpp b/layout/mathml/nsMathMLsemanticsFrame.cpp
--- a/layout/mathml/nsMathMLsemanticsFrame.cpp
+++ b/layout/mathml/nsMathMLsemanticsFrame.cpp
@@ -1,15 +1,16 @@
 /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 
 #include "nsMathMLsemanticsFrame.h"
+#include "nsMimeTypes.h"
 
 //
 // <semantics> -- associate annotations with a MathML expression
 //
 
 nsIFrame*
 NS_NewMathMLsemanticsFrame(nsIPresShell* aPresShell, nsStyleContext* aContext)
 {
@@ -17,22 +18,95 @@ NS_NewMathMLsemanticsFrame(nsIPresShell*
 }
 
 NS_IMPL_FRAMEARENA_HELPERS(nsMathMLsemanticsFrame)
 
 nsMathMLsemanticsFrame::~nsMathMLsemanticsFrame()
 {
 }
 
-NS_IMETHODIMP
-nsMathMLsemanticsFrame::TransmitAutomaticData()
+nsIFrame* 
+nsMathMLsemanticsFrame::GetSelectedFrame()
 {
-  // The REC defines the following elements to be embellished operators:
-  // * one of the elements msub, msup, msubsup, munder, mover, munderover,
-  //   mmultiscripts, mfrac, or semantics (Section 5.1 Annotation Framework),
-  //   whose first argument exists and is an embellished operator; 
-  //
-  // If our first child is an embellished operator, its flags bubble to us
-  mPresentationData.baseFrame = mFrames.FirstChild();
-  GetEmbellishDataFrom(mPresentationData.baseFrame, mEmbellishData);
+  // By default, we will display the first child of the <semantics> element.
+  nsIFrame* childFrame = mFrames.FirstChild(); 
+  mSelectedFrame = childFrame;
 
-  return NS_OK;
+  // An empty <semantics> is invalid
+  if (!childFrame) {
+    mInvalidMarkup = true;
+    return mSelectedFrame;
+  }
+
+  // Using <annotation> or <annotation-xml> as as a first child is invalid.
+  // However some people use this syntax so we take care of this case too.
+  bool firstChildIsAnnotation = false;
+  if (childFrame) {
+    nsIContent* childContent = childFrame->GetContent();
+    if (childContent->GetNameSpaceID() == kNameSpaceID_MathML &&
+        (childContent->Tag() == nsGkAtoms::annotation_ ||
+         childContent->Tag() == nsGkAtoms::annotation_xml_)) {
+      firstChildIsAnnotation = true;
+    }
+  }
+
+  // If the first child is a presentation MathML element other than
+  // <annotation> or <annotation-xml>, we are done.
+  if (!firstChildIsAnnotation &&
+      childFrame && childFrame->IsFrameOfType(nsIFrame::eMathML)) {
+    nsIMathMLFrame* mathMLFrame = do_QueryFrame(childFrame);
+    if (mathMLFrame) {
+      TransmitAutomaticData();
+      return mSelectedFrame;
+    }
+    // The first child is not an annotation, so skip it.
+    childFrame = childFrame->GetNextSibling();
+  }
+
+  // Otherwise, we read the list of annotations and select the first one that
+  // could be displayed in place of the first child of <semantics>. If none is
+  // found, we fallback to this first child.
+  for ( ; childFrame; childFrame = childFrame->GetNextSibling()) {
+    nsIContent* childContent = childFrame->GetContent();
+    if (childContent->GetNameSpaceID() == kNameSpaceID_MathML) {
+      if (childContent->Tag() == nsGkAtoms::annotation_) {
+        // If the <annotation> element has an src attribute, it is a reference
+        // and we ignore it. Otherwise, we assume it is a plain text annotation
+        // that can always be displayed and stop here.
+        // XXXfredw Should annotation images be supported? See the related
+        // bug 297465 for mglyph.
+        if (!childContent->HasAttr(kNameSpaceID_None, nsGkAtoms::src)) {
+          mSelectedFrame = childFrame;
+          break;
+        }
+      } else if (childContent->Tag() == nsGkAtoms::annotation_xml_) {
+        // If the <annotation-xml> element has an an encoding attribute
+        // describing presentation MathML, SVG or HTML we assume the content
+        // can be displayed and stop here.
+        //
+        // We recognize the following encoding values:
+        //
+        // - "MathML-Presentation", which is mentioned in the MathML3 REC
+        // - "SVG1.1" which is mentioned in the W3C note
+        //                   http://www.w3.org/Math/Documents/Notes/graphics.xml
+        // - Other mime Content-Types for SVG and HTML
+        //
+        // We exclude APPLICATION_MATHML_XML = "application/mathml+xml" which
+        // is ambiguous about whether it is Presentation or Content MathML.
+        // Authors must use a more explicit encoding value.
+        nsAutoString value;
+        childContent->GetAttr(kNameSpaceID_None, nsGkAtoms::encoding, value);
+        if (value.EqualsLiteral("application/mathml-presentation+xml") ||
+            value.EqualsLiteral("MathML-Presentation") ||
+            value.EqualsLiteral(IMAGE_SVG_XML) ||
+            value.EqualsLiteral("SVG1.1") ||
+            value.EqualsLiteral(APPLICATION_XHTML_XML) ||
+            value.EqualsLiteral(TEXT_HTML)) {
+          mSelectedFrame = childFrame;
+          break;
+        }
+      }
+    }
+  }
+
+  TransmitAutomaticData();
+  return mSelectedFrame;
 }
diff --git a/layout/mathml/nsMathMLsemanticsFrame.h b/layout/mathml/nsMathMLsemanticsFrame.h
--- a/layout/mathml/nsMathMLsemanticsFrame.h
+++ b/layout/mathml/nsMathMLsemanticsFrame.h
@@ -1,31 +1,30 @@
 /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #ifndef nsMathMLsemanticsFrame_h___
 #define nsMathMLsemanticsFrame_h___
 
-#include "nsMathMLContainerFrame.h"
+#include "nsMathMLSelectedFrame.h"
 
 //
 // <semantics> -- associate annotations with a MathML expression
 //
 
-class nsMathMLsemanticsFrame : public nsMathMLContainerFrame {
+class nsMathMLsemanticsFrame : public nsMathMLSelectedFrame {
 public:
   NS_DECL_FRAMEARENA_HELPERS
 
   friend nsIFrame* NS_NewMathMLsemanticsFrame(nsIPresShell* aPresShell,
                                               nsStyleContext* aContext);
 
-  NS_IMETHOD
-  TransmitAutomaticData();
-
 protected:
   nsMathMLsemanticsFrame(nsStyleContext* aContext) :
-    nsMathMLContainerFrame(aContext) {}
+    nsMathMLSelectedFrame(aContext) {}
   virtual ~nsMathMLsemanticsFrame();
+
+  nsIFrame* GetSelectedFrame();
 };
 
 #endif /* nsMathMLsemanticsFrame_h___ */
