# HG changeset patch
# Parent f62d0f5c005e237d0ecb9be7a9626618d49dff81
# User Frédéric Wang <fred.wang@free.fr>
Part 1: Avoid code duplication between nsCopySupport and nsDocumentEncoder. b=539506, r=ehsan.

diff --git a/content/base/public/nsCopySupport.h b/content/base/public/nsCopySupport.h
--- a/content/base/public/nsCopySupport.h
+++ b/content/base/public/nsCopySupport.h
@@ -21,17 +21,16 @@ class nsILoadContext;
 
 class nsCopySupport
 {
   // class of static helper functions for copy support
   public:
     static nsresult HTMLCopy(nsISelection *aSel, nsIDocument *aDoc, int16_t aClipboardID);
     static nsresult DoHooks(nsIDocument *aDoc, nsITransferable *aTrans,
                             bool *aDoPutOnClipboard);
-    static nsresult IsPlainTextContext(nsISelection *aSel, nsIDocument *aDoc, bool *aIsPlainTextContext);
 
     // Get the selection, or entire document, in the format specified by the mime type
     // (text/html or text/plain). If aSel is non-null, use it, otherwise get the entire
     // doc.
     static nsresult GetContents(const nsACString& aMimeType, uint32_t aFlags, nsISelection *aSel, nsIDocument *aDoc, nsAString& outdata);
     
     static nsresult ImageCopy(nsIImageLoadingContent* aImageElement,
                               nsILoadContext* aLoadContext,
diff --git a/content/base/public/nsIDocumentEncoder.idl b/content/base/public/nsIDocumentEncoder.idl
--- a/content/base/public/nsIDocumentEncoder.idl
+++ b/content/base/public/nsIDocumentEncoder.idl
@@ -30,17 +30,17 @@ interface nsIDocumentEncoderNodeFixup : 
    * @param [OUT] aSerializeCloneKids True if the document encoder should
    * apply recursive serialization to the children of the fixed up node
    * instead of the children of the original node.
    * @return The resulting fixed up node.
    */
   nsIDOMNode fixupNode(in nsIDOMNode aNode, out boolean aSerializeCloneKids);
 };
 
-[scriptable, uuid(7222bdf1-c2b9-41f1-a40a-a3d65283a95b)]
+[scriptable, uuid(c5cce872-2793-11e2-ac2d-0090f59acadc)]
 interface nsIDocumentEncoder : nsISupports
 {
   // Output methods flag bits. There are a frightening number of these,
   // because everyone wants something a little bit different
    
 
   /** 
    * Output only the selection (as opposed to the whole document).
@@ -318,9 +318,15 @@ interface nsIDocumentEncoder : nsISuppor
   AString encodeToStringWithContext( out AString aContextString,
                                      out AString aInfoString);
 
   /**
    * Set the fixup object associated with node persistence.
    * @param aFixup The fixup object.
    */
   void setNodeFixup(in nsIDocumentEncoderNodeFixup aFixup);
+
+  /**
+   * Determine whether the selection is inside a special context.
+   * @param aIsPlainTextContext whether the selection is in a plain text context
+   */
+  void getContextParameters(out boolean aIsPlainTextContext);
 };
diff --git a/content/base/src/nsCopySupport.cpp b/content/base/src/nsCopySupport.cpp
--- a/content/base/src/nsCopySupport.cpp
+++ b/content/base/src/nsCopySupport.cpp
@@ -73,24 +73,17 @@ SelectionCopyHelper(nsISelection *aSel, 
                     uint32_t aFlags, nsITransferable ** aTransferable)
 {
   // Clear the output parameter for the transferable, if provided.
   if (aTransferable) {
     *aTransferable = nullptr;
   }
 
   nsresult rv = NS_OK;
-  
-  bool bIsPlainTextContext = false;
 
-  rv = nsCopySupport::IsPlainTextContext(aSel, aDoc, &bIsPlainTextContext);
-  if (NS_FAILED(rv)) 
-    return rv;
-
-  bool bIsHTMLCopy = !bIsPlainTextContext;
   nsAutoString mimeType;
 
   nsCOMPtr<nsIDocumentEncoder> docEncoder;
 
   docEncoder = do_CreateInstance(NS_HTMLCOPY_ENCODER_CONTRACTID);
   NS_ENSURE_TRUE(docEncoder, NS_ERROR_FAILURE);
 
   // We always require a plaintext version
@@ -114,16 +107,27 @@ SelectionCopyHelper(nsISelection *aSel, 
   rv = docEncoder->Init(domDoc, mimeType, flags);
   if (NS_FAILED(rv)) 
     return rv;
 
   rv = docEncoder->SetSelection(aSel);
   if (NS_FAILED(rv)) 
     return rv;
 
+  // If the selection is in a special context, the corresponding parameters
+  // have been set by the call to nsHTMLCopyEncoder::SetSelection above.
+  // Thus we can now retrieve these parameters.
+  bool bIsPlainTextContext = false;
+
+  rv = docEncoder->GetContextParameters(&bIsPlainTextContext);
+  if (NS_FAILED(rv))
+    return rv;
+
+  bool bIsHTMLCopy = !bIsPlainTextContext;
+
   nsAutoString buffer, parents, info, textBuffer, plaintextBuffer;
 
   rv = docEncoder->EncodeToString(textBuffer);
   if (NS_FAILED(rv)) 
     return rv;
 
   // If the selection was in a text input, in textarea or in pre, the encoder
   // already produced plain text. Otherwise,the encoder produced HTML. In that
@@ -341,91 +345,16 @@ nsresult nsCopySupport::DoHooks(nsIDocum
       if (!*aDoPutOnClipboard)
         break;
     }
   }
 
   return rv;
 }
 
-nsresult nsCopySupport::IsPlainTextContext(nsISelection *aSel, nsIDocument *aDoc, bool *aIsPlainTextContext)
-{
-  nsresult rv;
-
-  if (!aSel || !aIsPlainTextContext)
-    return NS_ERROR_NULL_POINTER;
-
-  *aIsPlainTextContext = false;
-  
-  nsCOMPtr<nsIDOMRange> range;
-  nsCOMPtr<nsIDOMNode> commonParent;
-  int32_t count = 0;
-
-  rv = aSel->GetRangeCount(&count);
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  // if selection is uninitialized return
-  if (!count)
-    return NS_ERROR_FAILURE;
-  
-  // we'll just use the common parent of the first range.  Implicit assumption
-  // here that multi-range selections are table cell selections, in which case
-  // the common parent is somewhere in the table and we don't really care where.
-  rv = aSel->GetRangeAt(0, getter_AddRefs(range));
-  NS_ENSURE_SUCCESS(rv, rv);
-  if (!range)
-    return NS_ERROR_NULL_POINTER;
-  range->GetCommonAncestorContainer(getter_AddRefs(commonParent));
-
-  for (nsCOMPtr<nsIContent> selContent(do_QueryInterface(commonParent));
-       selContent;
-       selContent = selContent->GetParent())
-  {
-    // checking for selection inside a plaintext form widget
-
-    if (!selContent->IsHTML()) {
-      continue;
-    }
-
-    nsIAtom *atom = selContent->Tag();
-
-    if (atom == nsGkAtoms::input ||
-        atom == nsGkAtoms::textarea)
-    {
-      *aIsPlainTextContext = true;
-      break;
-    }
-
-    if (atom == nsGkAtoms::body)
-    {
-      // check for moz prewrap style on body.  If it's there we are 
-      // in a plaintext editor.  This is pretty cheezy but I haven't 
-      // found a good way to tell if we are in a plaintext editor.
-      nsCOMPtr<nsIDOMElement> bodyElem = do_QueryInterface(selContent);
-      nsAutoString wsVal;
-      rv = bodyElem->GetAttribute(NS_LITERAL_STRING("style"), wsVal);
-      if (NS_SUCCEEDED(rv) && (kNotFound != wsVal.Find(NS_LITERAL_STRING("pre-wrap"))))
-      {
-        *aIsPlainTextContext = true;
-        break;
-      }
-    }
-  }
-  
-  // also consider ourselves in a text widget if we can't find an html
-  // document. Note that XHTML is not counted as HTML here, because we can't
-  // copy it properly (all the copy code for non-plaintext assumes using HTML
-  // serializers and parsers is OK, and those mess up XHTML).
-  nsCOMPtr<nsIHTMLDocument> htmlDoc = do_QueryInterface(aDoc);
-  if (!(htmlDoc && aDoc->IsHTML()))
-    *aIsPlainTextContext = true;
-
-  return NS_OK;
-}
-
 nsresult
 nsCopySupport::GetContents(const nsACString& aMimeType, uint32_t aFlags, nsISelection *aSel, nsIDocument *aDoc, nsAString& outdata)
 {
   nsresult rv = NS_OK;
   
   nsCOMPtr<nsIDocumentEncoder> docEncoder;
 
   nsAutoCString encoderContractID(NS_DOC_ENCODER_CONTRACTID_BASE);
diff --git a/content/base/src/nsDocumentEncoder.cpp b/content/base/src/nsDocumentEncoder.cpp
--- a/content/base/src/nsDocumentEncoder.cpp
+++ b/content/base/src/nsDocumentEncoder.cpp
@@ -1227,16 +1227,21 @@ nsDocumentEncoder::EncodeToStringWithCon
 
 NS_IMETHODIMP
 nsDocumentEncoder::SetNodeFixup(nsIDocumentEncoderNodeFixup *aFixup)
 {
   mNodeFixup = aFixup;
   return NS_OK;
 }
 
+NS_IMETHODIMP
+nsDocumentEncoder::GetContextParameters(bool* aIsPlainTextContext)
+{
+  return NS_ERROR_NOT_IMPLEMENTED;
+}
 
 nsresult NS_NewTextEncoder(nsIDocumentEncoder** aResult); // make mac compiler happy
 
 nsresult
 NS_NewTextEncoder(nsIDocumentEncoder** aResult)
 {
   *aResult = new nsDocumentEncoder;
   if (!*aResult)
@@ -1254,16 +1259,17 @@ public:
 
   NS_IMETHOD Init(nsIDOMDocument* aDocument, const nsAString& aMimeType, uint32_t aFlags);
 
   // overridden methods from nsDocumentEncoder
   NS_IMETHOD SetSelection(nsISelection* aSelection);
   NS_IMETHOD EncodeToStringWithContext(nsAString& aContextString,
                                        nsAString& aInfoString,
                                        nsAString& aEncodedString);
+  NS_IMETHOD GetContextParameters(bool* aIsPlainTextContext);
 
 protected:
 
   enum Endpoint
   {
     kStart,
     kEnd
   };
@@ -1362,16 +1368,21 @@ nsHTMLCopyEncoder::SetSelection(nsISelec
     return NS_ERROR_NULL_POINTER;
   range->GetCommonAncestorContainer(getter_AddRefs(commonParent));
 
   for (nsCOMPtr<nsIContent> selContent(do_QueryInterface(commonParent));
        selContent;
        selContent = selContent->GetParent())
   {
     // checking for selection inside a plaintext form widget
+
+    if (!selContent->IsHTML()) {
+      continue;
+    }
+
     nsIAtom *atom = selContent->Tag();
     if (atom == nsGkAtoms::input ||
         atom == nsGkAtoms::textarea)
     {
       mIsTextWidget = true;
       break;
     }
     else if (atom == nsGkAtoms::body)
@@ -2015,8 +2026,14 @@ nsHTMLCopyEncoder::GetImmediateContextCo
                                            content->Tag() != nsGkAtoms::table)) {
       break;
     }
     ++j;
   }
   return j;
 }
 
+NS_IMETHODIMP
+nsHTMLCopyEncoder::GetContextParameters(bool* aIsPlainTextContext)
+{
+  *aIsPlainTextContext = mIsTextWidget;
+  return NS_OK;
+}
