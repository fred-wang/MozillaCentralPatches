# HG changeset patch
# Parent 137ea055e70b1bf33c6ac4032b27a7ac4256dc4f
# User Frédéric Wang <fred.wang@free.fr>
Remove namedspace value overriding - part 1 (bug 673759). r=karlt

diff --git a/content/mathml/content/src/nsMathMLElement.cpp b/content/mathml/content/src/nsMathMLElement.cpp
--- a/content/mathml/content/src/nsMathMLElement.cpp
+++ b/content/mathml/content/src/nsMathMLElement.cpp
@@ -227,16 +227,63 @@ nsMapRuleToAttributesFunc
 nsMathMLElement::GetAttributeMappingFunction() const
 {
   // It doesn't really matter what our tag is here, because only attributes
   // that satisfy IsAttributeMapped will be stored in the mapped attributes
   // list and available to the mapping function
   return &MapMathMLAttributesInto;
 }
 
+/* static */ bool
+nsMathMLElement::ParseNamedSpaceValue(const nsString& aString,
+                                      nsCSSValue&     aCSSValue,
+                                      PRUint32        aFlags)
+{
+   PRInt32 i = 0;
+   // See if it is one of the 'namedspace' (ranging 1/18em...7/18em)
+   if (aString.EqualsLiteral("veryverythinmathspace")) {
+     i = 1;
+   } else if (aString.EqualsLiteral("verythinmathspace")) {
+     i = 2;
+   } else if (aString.EqualsLiteral("thinmathspace")) {
+     i = 3;
+   } else if (aString.EqualsLiteral("mediummathspace")) {
+     i = 4;
+   } else if (aString.EqualsLiteral("thickmathspace")) {
+     i = 5;
+   } else if (aString.EqualsLiteral("verythickmathspace")) {
+     i = 6;
+   } else if (aString.EqualsLiteral("veryverythickmathspace")) {
+     i = 7;
+   } else if (aFlags & PARSE_ALLOW_NEGATIVE) {
+     if (aString.EqualsLiteral("negativeveryverythinmathspace")) {
+       i = -1;
+     } else if (aString.EqualsLiteral("negativeverythinmathspace")) {
+       i = -2;
+     } else if (aString.EqualsLiteral("negativethinmathspace")) {
+       i = -3;
+     } else if (aString.EqualsLiteral("negativemediummathspace")) {
+       i = -4;
+     } else if (aString.EqualsLiteral("negativethickmathspace")) {
+       i = -5;
+     } else if (aString.EqualsLiteral("negativeverythickmathspace")) {
+       i = -6;
+     } else if (aString.EqualsLiteral("negativeveryverythickmathspace")) {
+       i = -7;
+     }
+   }
+   if (0 != i) { 
+     // fall back to the default value
+     aCSSValue.SetFloatValue(float(i)/float(18), eCSSUnit_EM);
+     return true;
+   }
+   
+   return false;
+}
+ 
 // ================
 // Utilities for parsing and retrieving numeric values
 
 /*
 The REC says:
   An explicit plus sign ('+') is not allowed as part of a numeric value
   except when it is specifically listed in the syntax (as a quoted '+'
   or "+"),
@@ -265,16 +312,24 @@ nsMathMLElement::ParseNumericValue(const
 {
   nsAutoString str(aString);
   str.CompressWhitespace(); // aString is const in this code...
 
   PRInt32 stringLength = str.Length();
   if (!stringLength)
     return false;
 
+  if (aFlags & PARSE_ALLOW_NAMEDSPACE) {
+    if (ParseNamedSpaceValue(aString, aCSSValue, aFlags)) {
+      return true;
+    } else if (aFlags & PARSE_CALLED_FROM_MPADDED_FRAME) {
+      return false;
+    }
+  }
+
   nsAutoString number, unit;
 
   // see if the negative sign is there
   PRInt32 i = 0;
   PRUnichar c = str[0];
   if (c == '-') {
     number.Append(c);
     i++;
diff --git a/content/mathml/content/src/nsMathMLElement.h b/content/mathml/content/src/nsMathMLElement.h
--- a/content/mathml/content/src/nsMathMLElement.h
+++ b/content/mathml/content/src/nsMathMLElement.h
@@ -82,18 +82,27 @@ public:
                                 const nsAString& aValue,
                                 nsAttrValue& aResult);
 
   NS_IMETHOD_(bool) IsAttributeMapped(const nsIAtom* aAttribute) const;
   virtual nsMapRuleToAttributesFunc GetAttributeMappingFunction() const;
 
   enum {
     PARSE_ALLOW_UNITLESS = 0x01, // unitless 0 will be turned into 0px
-    PARSE_ALLOW_NEGATIVE = 0x02
+    PARSE_ALLOW_NEGATIVE = 0x02,
+    PARSE_ALLOW_NAMEDSPACE = 0x04,
+    // mpadded uses its own format for attribute values but relies on
+    // ParseNumericValue to parse some substrings. This flag allows to handle
+    // these calls in a specific way. See also bug 677036.
+    PARSE_CALLED_FROM_MPADDED_FRAME = 0x08
   };
+  static bool ParseNamedSpaceValue(const nsString& aString,
+                                   nsCSSValue&     aCSSValue,
+                                   PRUint32        aFlags);
+
   static bool ParseNumericValue(const nsString& aString,
                                   nsCSSValue&     aCSSValue,
                                   PRUint32        aFlags);
 
   static void MapMathMLAttributesInto(const nsMappedAttributes* aAttributes, 
                                       nsRuleData* aRuleData);
   
   virtual nsresult PreHandleEvent(nsEventChainPreVisitor& aVisitor);
diff --git a/layout/mathml/nsMathMLFrame.cpp b/layout/mathml/nsMathMLFrame.cpp
--- a/layout/mathml/nsMathMLFrame.cpp
+++ b/layout/mathml/nsMathMLFrame.cpp
@@ -375,107 +375,16 @@ nsMathMLFrame::CalcLength(nsPresContext*
     return NSToCoordRound(aCSSValue.GetFloatValue() * (float)xHeight);
   }
 
   // MathML doesn't specify other CSS units such as rem or ch
   NS_ERROR("Unsupported unit");
   return 0;
 }
 
-/* static */ bool
-nsMathMLFrame::ParseNamedSpaceValue(nsIFrame*   aMathMLmstyleFrame,
-                                    nsString&   aString,
-                                    nsCSSValue& aCSSValue)
-{
-  aCSSValue.Reset();
-  aString.CompressWhitespace(); //  aString is not a const in this code...
-  if (!aString.Length()) return false;
-
-  // See if it is one of the 'namedspace' (ranging 1/18em...7/18em)
-  PRInt32 i = 0;
-  nsIAtom* namedspaceAtom = nsnull;
-  if (aString.EqualsLiteral("veryverythinmathspace")) {
-    i = 1;
-    namedspaceAtom = nsGkAtoms::veryverythinmathspace_;
-  }
-  else if (aString.EqualsLiteral("verythinmathspace")) {
-    i = 2;
-    namedspaceAtom = nsGkAtoms::verythinmathspace_;
-  }
-  else if (aString.EqualsLiteral("thinmathspace")) {
-    i = 3;
-    namedspaceAtom = nsGkAtoms::thinmathspace_;
-  }
-  else if (aString.EqualsLiteral("mediummathspace")) {
-    i = 4;
-    namedspaceAtom = nsGkAtoms::mediummathspace_;
-  }
-  else if (aString.EqualsLiteral("thickmathspace")) {
-    i = 5;
-    namedspaceAtom = nsGkAtoms::thickmathspace_;
-  }
-  else if (aString.EqualsLiteral("verythickmathspace")) {
-    i = 6;
-    namedspaceAtom = nsGkAtoms::verythickmathspace_;
-  }
-  else if (aString.EqualsLiteral("veryverythickmathspace")) {
-    i = 7;
-    namedspaceAtom = nsGkAtoms::veryverythickmathspace_;
-  }
-  else if (aString.EqualsLiteral("negativeveryverythinmathspace")) {
-    i = -1;
-    namedspaceAtom = nsGkAtoms::negativeveryverythinmathspace_;
-  }
-  else if (aString.EqualsLiteral("negativeverythinmathspace")) {
-    i = -2;
-    namedspaceAtom = nsGkAtoms::negativeverythinmathspace_;
-  }
-  else if (aString.EqualsLiteral("negativethinmathspace")) {
-    i = -3;
-    namedspaceAtom = nsGkAtoms::negativethinmathspace_;
-  }
-  else if (aString.EqualsLiteral("negativemediummathspace")) {
-    i = -4;
-    namedspaceAtom = nsGkAtoms::negativemediummathspace_;
-  }
-  else if (aString.EqualsLiteral("negativethickmathspace")) {
-    i = -5;
-    namedspaceAtom = nsGkAtoms::negativethickmathspace_;
-  }
-  else if (aString.EqualsLiteral("negativeverythickmathspace")) {
-    i = -6;
-    namedspaceAtom = nsGkAtoms::negativeverythickmathspace_;
-  }
-  else if (aString.EqualsLiteral("negativeveryverythickmathspace")) {
-    i = -7;
-    namedspaceAtom = nsGkAtoms::negativeveryverythickmathspace_;
-  }
-
-  if (0 != i) {
-    if (aMathMLmstyleFrame) {
-      // see if there is a <mstyle> that has overriden the default value
-      // GetAttribute() will recurse all the way up into the <mstyle> hierarchy
-      nsAutoString value;
-      GetAttribute(nsnull, aMathMLmstyleFrame, namedspaceAtom, value);
-      if (!value.IsEmpty()) {
-        if (ParseNumericValue(value, aCSSValue) &&
-            aCSSValue.IsLengthUnit()) {
-          return true;
-        }
-      }
-    }
-
-    // fall back to the default value
-    aCSSValue.SetFloatValue(float(i)/float(18), eCSSUnit_EM);
-    return true;
-  }
-
-  return false;
-}
-
 // ================
 // Utils to map attributes into CSS rules (work-around to bug 69409 which
 // is not scheduled to be fixed anytime soon)
 //
 
 static const PRInt32 kMathMLversion1 = 1;
 static const PRInt32 kMathMLversion2 = 2;
 
diff --git a/layout/mathml/nsMathMLFrame.h b/layout/mathml/nsMathMLFrame.h
--- a/layout/mathml/nsMathMLFrame.h
+++ b/layout/mathml/nsMathMLFrame.h
@@ -179,36 +179,21 @@ public:
   // @return true     --if attribute exists
   //         false --if attribute doesn't exist
   static bool
   GetAttribute(nsIContent* aContent,
                nsIFrame*   aMathMLmstyleFrame,          
                nsIAtom*    aAttributeAtom,
                nsString&   aValue);
 
-  // utilities to parse and retrieve numeric values in CSS units
-  // All values are stored in twips.
-  static bool
-  ParseNumericValue(const nsString& aString,
-                    nsCSSValue&     aCSSValue) {
-    return nsMathMLElement::ParseNumericValue(aString, aCSSValue,
-            nsMathMLElement::PARSE_ALLOW_NEGATIVE |
-            nsMathMLElement::PARSE_ALLOW_UNITLESS);
-  }
-
   static nscoord 
   CalcLength(nsPresContext*   aPresContext,
              nsStyleContext*   aStyleContext,
              const nsCSSValue& aCSSValue);
 
-  static bool
-  ParseNamedSpaceValue(nsIFrame*   aMathMLmstyleFrame,
-                       nsString&   aString,
-                       nsCSSValue& aCSSValue);
-
   static eMathMLFrameType
   GetMathMLFrameTypeFor(nsIFrame* aFrame)
   {
     if (aFrame->IsFrameOfType(nsIFrame::eMathML)) {
       nsIMathMLFrame* mathMLFrame = do_QueryFrame(aFrame);
       if (mathMLFrame)
         return mathMLFrame->GetMathMLFrameType();
     }
diff --git a/layout/mathml/nsMathMLmfracFrame.cpp b/layout/mathml/nsMathMLmfracFrame.cpp
--- a/layout/mathml/nsMathMLmfracFrame.cpp
+++ b/layout/mathml/nsMathMLmfracFrame.cpp
@@ -139,17 +139,21 @@ nsMathMLmfracFrame::CalcLineThickness(ns
       lineThickness = NSToCoordCeil(defaultThickness * THICK_FRACTION_LINE);
       minimumThickness = onePixel * THICK_FRACTION_LINE_MINIMUM_PIXELS;
       // should visually increase by at least one pixel
       if (lineThickness < defaultThickness + onePixel)
         lineThickness = defaultThickness + onePixel;
     }
     else { // see if it is a plain number, or a percentage, or a h/v-unit like 1ex, 2px, 1em
       nsCSSValue cssValue;
-      if (ParseNumericValue(aThicknessAttribute, cssValue)) {
+      if (nsMathMLElement::ParseNumericValue(aThicknessAttribute, cssValue,
+                                             nsMathMLElement::
+                                             PARSE_ALLOW_UNITLESS |
+                                             nsMathMLElement::
+                                             PARSE_ALLOW_NEGATIVE)) {
         nsCSSUnit unit = cssValue.GetUnit();
         if (eCSSUnit_Number == unit)
           lineThickness = nscoord(float(defaultThickness) * cssValue.GetFloatValue());
         else if (eCSSUnit_Percent == unit)
           lineThickness = nscoord(float(defaultThickness) * cssValue.GetPercentValue());
         else if (eCSSUnit_Null != unit)
           lineThickness = CalcLength(aPresContext, aStyleContext, cssValue);
       }
diff --git a/layout/mathml/nsMathMLmmultiscriptsFrame.cpp b/layout/mathml/nsMathMLmmultiscriptsFrame.cpp
--- a/layout/mathml/nsMathMLmmultiscriptsFrame.cpp
+++ b/layout/mathml/nsMathMLmmultiscriptsFrame.cpp
@@ -121,26 +121,36 @@ nsMathMLmmultiscriptsFrame::ProcessAttri
   mSupScriptShift = 0;
 
   // check if the subscriptshift attribute is there
   nsAutoString value;
   GetAttribute(mContent, mPresentationData.mstyle,
                nsGkAtoms::subscriptshift_, value);
   if (!value.IsEmpty()) {
     nsCSSValue cssValue;
-    if (ParseNumericValue(value, cssValue) && cssValue.IsLengthUnit()) {
+    if (nsMathMLElement::ParseNumericValue(value, cssValue,
+                                           nsMathMLElement::
+                                           PARSE_ALLOW_UNITLESS |
+                                           nsMathMLElement::
+                                           PARSE_ALLOW_NEGATIVE) &&
+        cssValue.IsLengthUnit()) {
       mSubScriptShift = CalcLength(PresContext(), mStyleContext, cssValue);
     }
   }
   // check if the superscriptshift attribute is there
   GetAttribute(mContent, mPresentationData.mstyle,
                nsGkAtoms::superscriptshift_, value);
   if (!value.IsEmpty()) {
     nsCSSValue cssValue;
-    if (ParseNumericValue(value, cssValue) && cssValue.IsLengthUnit()) {
+    if (nsMathMLElement::ParseNumericValue(value, cssValue,
+                                           nsMathMLElement::
+                                           PARSE_ALLOW_UNITLESS |
+                                           nsMathMLElement::
+                                           PARSE_ALLOW_NEGATIVE) &&
+        cssValue.IsLengthUnit()) {
       mSupScriptShift = CalcLength(PresContext(), mStyleContext, cssValue);
     }
   }
 }
 
 /* virtual */ nsresult
 nsMathMLmmultiscriptsFrame::Place(nsRenderingContext& aRenderingContext,
                                   bool                 aPlaceOrigin,
diff --git a/layout/mathml/nsMathMLmoFrame.cpp b/layout/mathml/nsMathMLmoFrame.cpp
--- a/layout/mathml/nsMathMLmoFrame.cpp
+++ b/layout/mathml/nsMathMLmoFrame.cpp
@@ -414,36 +414,44 @@ nsMathMLmoFrame::ProcessOperatorData()
   // we will ignore our default leading/trailing space
 
   // lspace = number h-unit | namedspace
   nscoord leadingSpace = mEmbellishData.leadingSpace;
   GetAttribute(mContent, mPresentationData.mstyle, nsGkAtoms::lspace_,
                value);
   if (!value.IsEmpty()) {
     nsCSSValue cssValue;
-    if (ParseNumericValue(value, cssValue) ||
-        ParseNamedSpaceValue(mPresentationData.mstyle, value, cssValue))
-    {
+    if (nsMathMLElement::ParseNumericValue(value, cssValue,
+                                           nsMathMLElement::
+                                           PARSE_ALLOW_UNITLESS |
+                                           nsMathMLElement::
+                                           PARSE_ALLOW_NEGATIVE |
+                                           nsMathMLElement::
+                                           PARSE_ALLOW_NAMEDSPACE)) {
       if ((eCSSUnit_Number == cssValue.GetUnit()) && !cssValue.GetFloatValue())
         leadingSpace = 0;
       else if (cssValue.IsLengthUnit())
         leadingSpace = CalcLength(presContext, mStyleContext, cssValue);
       mFlags |= NS_MATHML_OPERATOR_LSPACE_ATTR;
     }
   }
 
   // rspace = number h-unit | namedspace
   nscoord trailingSpace = mEmbellishData.trailingSpace;
   GetAttribute(mContent, mPresentationData.mstyle, nsGkAtoms::rspace_,
                value);
   if (!value.IsEmpty()) {
     nsCSSValue cssValue;
-    if (ParseNumericValue(value, cssValue) ||
-        ParseNamedSpaceValue(mPresentationData.mstyle, value, cssValue))
-    {
+    if (nsMathMLElement::ParseNumericValue(value, cssValue,
+                                           nsMathMLElement::
+                                           PARSE_ALLOW_UNITLESS |
+                                           nsMathMLElement::
+                                           PARSE_ALLOW_NEGATIVE |
+                                           nsMathMLElement::
+                                           PARSE_ALLOW_NAMEDSPACE)) {
       if ((eCSSUnit_Number == cssValue.GetUnit()) && !cssValue.GetFloatValue())
         trailingSpace = 0;
       else if (cssValue.IsLengthUnit())
         trailingSpace = CalcLength(presContext, mStyleContext, cssValue);
       mFlags |= NS_MATHML_OPERATOR_RSPACE_ATTR;
     }
   }
 
@@ -504,70 +512,86 @@ nsMathMLmoFrame::ProcessOperatorData()
     mFlags |= NS_MATHML_OPERATOR_SYMMETRIC;
 
   // minsize = number [ v-unit | h-unit ] | namedspace
   mMinSize = 0.0;
   GetAttribute(mContent, mPresentationData.mstyle, nsGkAtoms::minsize_,
                value);
   if (!value.IsEmpty()) {
     nsCSSValue cssValue;
-    if (ParseNumericValue(value, cssValue) ||
-        ParseNamedSpaceValue(mPresentationData.mstyle, value, cssValue))
-    {
+    if (nsMathMLElement::ParseNumericValue(value, cssValue,
+                                           nsMathMLElement::
+                                           PARSE_ALLOW_UNITLESS |
+                                           nsMathMLElement::
+                                           PARSE_ALLOW_NEGATIVE |
+                                           nsMathMLElement::
+                                           PARSE_ALLOW_NAMEDSPACE)) {
       nsCSSUnit unit = cssValue.GetUnit();
       if (eCSSUnit_Number == unit)
         mMinSize = cssValue.GetFloatValue();
       else if (eCSSUnit_Percent == unit)
         mMinSize = cssValue.GetPercentValue();
       else if (eCSSUnit_Null != unit) {
         mMinSize = float(CalcLength(presContext, mStyleContext, cssValue));
         mFlags |= NS_MATHML_OPERATOR_MINSIZE_ABSOLUTE;
       }
 
       if ((eCSSUnit_Number == unit) || (eCSSUnit_Percent == unit)) {
         // see if the multiplicative inheritance should be from <mstyle>
         GetAttribute(nsnull, mPresentationData.mstyle,
                      nsGkAtoms::minsize_, value);
         if (!value.IsEmpty()) {
-          if (ParseNumericValue(value, cssValue)) {
+          if (nsMathMLElement::ParseNumericValue(value, cssValue,
+                                                 nsMathMLElement::
+                                                 PARSE_ALLOW_UNITLESS |
+                                                 nsMathMLElement::
+                                                 PARSE_ALLOW_NEGATIVE)) {
             if (cssValue.IsLengthUnit()) {
               mMinSize *= float(CalcLength(presContext, mStyleContext, cssValue));
               mFlags |= NS_MATHML_OPERATOR_MINSIZE_ABSOLUTE;
             }
           }
         }
       }
     }
   }
 
   // maxsize = number [ v-unit | h-unit ] | namedspace | infinity
   mMaxSize = NS_MATHML_OPERATOR_SIZE_INFINITY;
   GetAttribute(mContent, mPresentationData.mstyle, nsGkAtoms::maxsize_,
                value);
   if (!value.IsEmpty()) {
     nsCSSValue cssValue;
-    if (ParseNumericValue(value, cssValue) ||
-        ParseNamedSpaceValue(mPresentationData.mstyle, value, cssValue))
-    {
+    if (nsMathMLElement::ParseNumericValue(value, cssValue,
+                                           nsMathMLElement::
+                                           PARSE_ALLOW_UNITLESS |
+                                           nsMathMLElement::
+                                           PARSE_ALLOW_NEGATIVE |
+                                           nsMathMLElement::
+                                           PARSE_ALLOW_NAMEDSPACE)) {
       nsCSSUnit unit = cssValue.GetUnit();
       if (eCSSUnit_Number == unit)
         mMaxSize = cssValue.GetFloatValue();
       else if (eCSSUnit_Percent == unit)
         mMaxSize = cssValue.GetPercentValue();
       else if (eCSSUnit_Null != unit) {
         mMaxSize = float(CalcLength(presContext, mStyleContext, cssValue));
         mFlags |= NS_MATHML_OPERATOR_MAXSIZE_ABSOLUTE;
       }
 
       if ((eCSSUnit_Number == unit) || (eCSSUnit_Percent == unit)) {
         // see if the multiplicative inheritance should be from <mstyle>
         GetAttribute(nsnull, mPresentationData.mstyle,
                      nsGkAtoms::maxsize_, value);
         if (!value.IsEmpty()) {
-          if (ParseNumericValue(value, cssValue)) {
+          if (nsMathMLElement::ParseNumericValue(value, cssValue,
+                                                 nsMathMLElement::
+                                                 PARSE_ALLOW_UNITLESS |
+                                                 nsMathMLElement::
+                                                 PARSE_ALLOW_NEGATIVE)) {
             if (cssValue.IsLengthUnit()) {
               mMaxSize *= float(CalcLength(presContext, mStyleContext, cssValue));
               mFlags |= NS_MATHML_OPERATOR_MAXSIZE_ABSOLUTE;
             }
           }
         }
       }
     }
diff --git a/layout/mathml/nsMathMLmpaddedFrame.cpp b/layout/mathml/nsMathMLmpaddedFrame.cpp
--- a/layout/mathml/nsMathMLmpaddedFrame.cpp
+++ b/layout/mathml/nsMathMLmpaddedFrame.cpp
@@ -262,28 +262,35 @@ nsMathMLmpaddedFrame::ParseAttribute(nsS
     */
   }
   else if (unit.EqualsLiteral("width"))  aPseudoUnit = NS_MATHML_PSEUDO_UNIT_WIDTH;
   else if (unit.EqualsLiteral("height")) aPseudoUnit = NS_MATHML_PSEUDO_UNIT_HEIGHT;
   else if (unit.EqualsLiteral("depth"))  aPseudoUnit = NS_MATHML_PSEUDO_UNIT_DEPTH;
   else if (!gotPercent) { // percentage can only apply to a pseudo-unit
 
     // see if the unit is a named-space
-    // XXX nsnull in ParseNamedSpacedValue()? don't access mstyle?
-    if (ParseNamedSpaceValue(nsnull, unit, aCSSValue)) {
+    if (nsMathMLElement::ParseNumericValue(unit, aCSSValue,
+                                           nsMathMLElement::
+                                           PARSE_CALLED_FROM_MPADDED_FRAME |
+                                           nsMathMLElement::
+                                           PARSE_ALLOW_NEGATIVE |
+                                           nsMathMLElement::
+                                           PARSE_ALLOW_NAMEDSPACE)) {
       // re-scale properly, and we know that the unit of the named-space is 'em'
       floatValue *= aCSSValue.GetFloatValue();
       aCSSValue.SetFloatValue(floatValue, eCSSUnit_EM);
       aPseudoUnit = NS_MATHML_PSEUDO_UNIT_NAMEDSPACE;
       return true;
     }
 
     // see if the input was just a CSS value
     number.Append(unit); // leave the sign out if it was there
-    if (ParseNumericValue(number, aCSSValue))
+    if (nsMathMLElement::ParseNumericValue(number, aCSSValue,
+                                           nsMathMLElement::
+                                           PARSE_CALLED_FROM_MPADDED_FRAME))
       return true;
   }
 
   // if we enter here, we have a number that will act as a multiplier on a pseudo-unit
   if (aPseudoUnit != NS_MATHML_PSEUDO_UNIT_UNSPECIFIED) {
     if (gotPercent)
       aCSSValue.SetPercentValue(floatValue / 100.0f);
     else
diff --git a/layout/mathml/nsMathMLmspaceFrame.cpp b/layout/mathml/nsMathMLmspaceFrame.cpp
--- a/layout/mathml/nsMathMLmspaceFrame.cpp
+++ b/layout/mathml/nsMathMLmspaceFrame.cpp
@@ -82,43 +82,57 @@ nsMathMLmspaceFrame::ProcessAttributes(n
   nsAutoString value;
   nsCSSValue cssValue;
 
   // width 
   mWidth = 0;
   GetAttribute(mContent, mPresentationData.mstyle, nsGkAtoms::width,
                value);
   if (!value.IsEmpty()) {
-    if ((ParseNumericValue(value, cssValue) ||
-         ParseNamedSpaceValue(mPresentationData.mstyle, value, cssValue)) &&
-         cssValue.IsLengthUnit()) {
+    if (nsMathMLElement::ParseNumericValue(value, cssValue,
+                                           nsMathMLElement::
+                                           PARSE_ALLOW_UNITLESS |
+                                           nsMathMLElement::
+                                           PARSE_ALLOW_NEGATIVE |
+                                           nsMathMLElement::
+                                           PARSE_ALLOW_NAMEDSPACE)) {
       mWidth = CalcLength(aPresContext, mStyleContext, cssValue);
     }
   }
 
   // height
   mHeight = 0;
   GetAttribute(mContent, mPresentationData.mstyle, nsGkAtoms::height,
                value);
   if (!value.IsEmpty()) {
-    if ((ParseNumericValue(value, cssValue) ||
-         ParseNamedSpaceValue(mPresentationData.mstyle, value, cssValue)) &&
-         cssValue.IsLengthUnit()) {
+    if ((nsMathMLElement::ParseNumericValue(value, cssValue,
+                                            nsMathMLElement::
+                                            PARSE_ALLOW_UNITLESS |
+                                            nsMathMLElement::
+                                            PARSE_ALLOW_NEGATIVE |
+                                            nsMathMLElement::
+                                            PARSE_ALLOW_NAMEDSPACE)) &&
+        cssValue.IsLengthUnit()) {
       mHeight = CalcLength(aPresContext, mStyleContext, cssValue);
     }
   }
 
   // depth
   mDepth = 0;
   GetAttribute(mContent, mPresentationData.mstyle, nsGkAtoms::depth_,
                value);
   if (!value.IsEmpty()) {
-    if ((ParseNumericValue(value, cssValue) ||
-         ParseNamedSpaceValue(mPresentationData.mstyle, value, cssValue)) &&
-         cssValue.IsLengthUnit()) {
+    if ((nsMathMLElement::ParseNumericValue(value, cssValue,
+                                            nsMathMLElement::
+                                            PARSE_ALLOW_UNITLESS |
+                                            nsMathMLElement::
+                                            PARSE_ALLOW_NEGATIVE |
+                                            nsMathMLElement::
+                                            PARSE_ALLOW_NAMEDSPACE)) &&
+        cssValue.IsLengthUnit()) {
       mDepth = CalcLength(aPresContext, mStyleContext, cssValue);
     }
   }
 }
 
 NS_IMETHODIMP
 nsMathMLmspaceFrame::Reflow(nsPresContext*          aPresContext,
                             nsHTMLReflowMetrics&     aDesiredSize,
diff --git a/layout/mathml/nsMathMLmsubFrame.cpp b/layout/mathml/nsMathMLmsubFrame.cpp
--- a/layout/mathml/nsMathMLmsubFrame.cpp
+++ b/layout/mathml/nsMathMLmsubFrame.cpp
@@ -91,17 +91,22 @@ nsMathMLmsubFrame::Place (nsRenderingCon
 
   // check if the subscriptshift attribute is there
   nscoord subScriptShift = 0;
   nsAutoString value;
   GetAttribute(mContent, mPresentationData.mstyle,
                nsGkAtoms::subscriptshift_, value);
   if (!value.IsEmpty()) {
     nsCSSValue cssValue;
-    if (ParseNumericValue(value, cssValue) && cssValue.IsLengthUnit()) {
+    if (nsMathMLElement::ParseNumericValue(value, cssValue,
+                                           nsMathMLElement::
+                                           PARSE_ALLOW_UNITLESS |
+                                           nsMathMLElement::
+                                           PARSE_ALLOW_NEGATIVE) &&
+        cssValue.IsLengthUnit()) {
       subScriptShift = CalcLength(PresContext(), mStyleContext, cssValue);
     }
   }
 
   return nsMathMLmsubFrame::PlaceSubScript(PresContext(), 
                                            aRenderingContext,
                                            aPlaceOrigin,
                                            aDesiredSize,
diff --git a/layout/mathml/nsMathMLmsubsupFrame.cpp b/layout/mathml/nsMathMLmsubsupFrame.cpp
--- a/layout/mathml/nsMathMLmsubsupFrame.cpp
+++ b/layout/mathml/nsMathMLmsubsupFrame.cpp
@@ -97,27 +97,37 @@ nsMathMLmsubsupFrame::Place(nsRenderingC
 
   // check if the subscriptshift attribute is there
   nsAutoString value;
   nscoord subScriptShift = 0;
   GetAttribute(mContent, mPresentationData.mstyle,
                nsGkAtoms::subscriptshift_, value);
   if (!value.IsEmpty()) {
     nsCSSValue cssValue;
-    if (ParseNumericValue(value, cssValue) && cssValue.IsLengthUnit()) {
+    if (nsMathMLElement::ParseNumericValue(value, cssValue,
+                                           nsMathMLElement::
+                                           PARSE_ALLOW_UNITLESS |
+                                           nsMathMLElement::
+                                           PARSE_ALLOW_NEGATIVE) &&
+        cssValue.IsLengthUnit()) {
       subScriptShift = CalcLength(PresContext(), mStyleContext, cssValue);
     }
   }
   // check if the superscriptshift attribute is there
   nscoord supScriptShift = 0;
   GetAttribute(mContent, mPresentationData.mstyle,
                nsGkAtoms::superscriptshift_, value);
   if (!value.IsEmpty()) {
     nsCSSValue cssValue;
-    if (ParseNumericValue(value, cssValue) && cssValue.IsLengthUnit()) {
+    if (nsMathMLElement::ParseNumericValue(value, cssValue,
+                                           nsMathMLElement::
+                                           PARSE_ALLOW_UNITLESS |
+                                           nsMathMLElement::
+                                           PARSE_ALLOW_NEGATIVE) &&
+        cssValue.IsLengthUnit()) {
       supScriptShift = CalcLength(PresContext(), mStyleContext, cssValue);
     }
   }
 
   return nsMathMLmsubsupFrame::PlaceSubSupScript(PresContext(),
                                                  aRenderingContext,
                                                  aPlaceOrigin,
                                                  aDesiredSize,
diff --git a/layout/mathml/nsMathMLmsupFrame.cpp b/layout/mathml/nsMathMLmsupFrame.cpp
--- a/layout/mathml/nsMathMLmsupFrame.cpp
+++ b/layout/mathml/nsMathMLmsupFrame.cpp
@@ -91,17 +91,22 @@ nsMathMLmsupFrame::Place(nsRenderingCont
 
   // check if the superscriptshift attribute is there
   nsAutoString value;
   nscoord supScriptShift = 0;
   GetAttribute(mContent, mPresentationData.mstyle,
                nsGkAtoms::superscriptshift_, value);
   if (!value.IsEmpty()) {
     nsCSSValue cssValue;
-    if (ParseNumericValue(value, cssValue) && cssValue.IsLengthUnit()) {
+    if (nsMathMLElement::ParseNumericValue(value, cssValue,
+                                           nsMathMLElement::
+                                           PARSE_ALLOW_UNITLESS |
+                                           nsMathMLElement::
+                                           PARSE_ALLOW_NEGATIVE) &&
+        cssValue.IsLengthUnit()) {
       supScriptShift = CalcLength(PresContext(), mStyleContext, cssValue);
     }
   }
 
   return nsMathMLmsupFrame::PlaceSuperScript(PresContext(), 
                                              aRenderingContext,
                                              aPlaceOrigin,
                                              aDesiredSize,
