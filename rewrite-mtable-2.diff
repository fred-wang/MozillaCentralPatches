# HG changeset patch
# Parent 57204fdec65db9c19a84c85cbb8c4daf29eff743
# User Frédéric Wang <fred.wang@free.fr>
Bug 731667 - Rewrite mtable implementation to prevent use of _moz-* attributes - part 2

diff --git a/layout/mathml/nsMathMLmtableFrame.cpp b/layout/mathml/nsMathMLmtableFrame.cpp
--- a/layout/mathml/nsMathMLmtableFrame.cpp
+++ b/layout/mathml/nsMathMLmtableFrame.cpp
@@ -47,31 +47,80 @@
 
 #include "nsTArray.h"
 #include "nsCSSFrameConstructor.h"
 #include "nsTableOuterFrame.h"
 #include "nsTableFrame.h"
 #include "nsTableCellFrame.h"
 #include "celldata.h"
 
+#include "nsStyleConsts.h"
+
 #include "nsMathMLmtableFrame.h"
 
 using namespace mozilla;
 
 //
 // <mtable> -- table or matrix - implementation
 //
 
+static PRInt8 parseRowAlignItem(const nsString& aString)
+{
+  if (aString.EqualsLiteral("top")) {
+    return NS_STYLE_VERTICAL_ALIGN_TOP;
+  }
+  if (aString.EqualsLiteral("bottom")) {
+    return NS_STYLE_VERTICAL_ALIGN_BOTTOM;
+  }
+  if (aString.EqualsLiteral("center")) {
+    return NS_STYLE_VERTICAL_ALIGN_CENTER;
+  }
+  // XXXfw axis is not supported
+  //if (aString.EqualsLiteral("axis")) {
+  //  return NS_STYLE_VERTICAL_ALIGN_AXIS;
+  //}
+
+  // default value
+  return NS_STYLE_VERTICAL_ALIGN_BASELINE;
+}
+
+static PRInt8 parseColumnAlignItem(const nsString& aString)
+{
+  if (aString.EqualsLiteral("left")) {
+    return NS_STYLE_TEXT_ALIGN_LEFT;
+  }
+  if (aString.EqualsLiteral("right")) {
+    return NS_STYLE_TEXT_ALIGN_RIGHT;
+  }
+
+  // default value
+  return NS_STYLE_TEXT_ALIGN_CENTER;
+}
+
+static PRInt8 parseLinesItem(const nsString& aString)
+{
+  if (aString.EqualsLiteral("solid")) {
+    return NS_STYLE_BORDER_STYLE_SOLID;
+  }
+  if (aString.EqualsLiteral("dashed")) {
+    return NS_STYLE_BORDER_STYLE_DASHED;
+  }
+
+  // default value
+  return NS_STYLE_BORDER_STYLE_NONE;
+}
+
 // helper function to perform an in-place split of a space-delimited string,
 // and return an array of pointers for the beginning of each segment, i.e.,
 // aOffset[0] is the first string, aOffset[1] is the second string, etc.
 // Used to parse attributes like columnalign='left right', rowalign='top bottom'
 static void
 SplitString(nsString&             aString, // [IN/OUT]
-            nsTArray<PRUnichar*>& aOffset) // [OUT]
+            nsTArray<PRUnichar*>& aOffset, // [OUT]
+            )
 {
   static const PRUnichar kNullCh = PRUnichar('\0');
 
   aString.Append(kNullCh);  // put an extra null at the end
 
   PRUnichar* start = aString.BeginWriting();
   PRUnichar* end   = start;
 
