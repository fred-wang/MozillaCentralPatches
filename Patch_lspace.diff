# HG changeset patch
# Parent bb3dcab53fc63d73890e28295d801f2cc6312da7
# User Jonathan Hage <hage.jonathan@gmail.com>
Do not allow lspace as a pseudounit

diff --git a/layout/mathml/nsMathMLmpaddedFrame.cpp b/layout/mathml/nsMathMLmpaddedFrame.cpp
--- a/layout/mathml/nsMathMLmpaddedFrame.cpp
+++ b/layout/mathml/nsMathMLmpaddedFrame.cpp
@@ -57,18 +57,17 @@
 #define NS_MATHML_SIGN_MINUS              1
 #define NS_MATHML_SIGN_PLUS               2
 
 #define NS_MATHML_PSEUDO_UNIT_UNSPECIFIED 0
 #define NS_MATHML_PSEUDO_UNIT_ITSELF      1 // special
 #define NS_MATHML_PSEUDO_UNIT_WIDTH       2
 #define NS_MATHML_PSEUDO_UNIT_HEIGHT      3
 #define NS_MATHML_PSEUDO_UNIT_DEPTH       4
-#define NS_MATHML_PSEUDO_UNIT_LSPACE      5
-#define NS_MATHML_PSEUDO_UNIT_NAMEDSPACE  6
+#define NS_MATHML_PSEUDO_UNIT_NAMEDSPACE  5
 
 nsIFrame*
 NS_NewMathMLmpaddedFrame(nsIPresShell* aPresShell, nsStyleContext* aContext)
 {
   return new (aPresShell) nsMathMLmpaddedFrame(aContext);
 }
 
 NS_IMPL_FRAMEARENA_HELPERS(nsMathMLmpaddedFrame)
@@ -249,17 +248,16 @@ nsMathMLmpaddedFrame::ParseAttribute(nsS
       // the unit. This is more in line with the CSS REC (and
       // it allows keeping the code simpler...)
     }
     */
   }
   else if (unit.EqualsLiteral("width"))  aPseudoUnit = NS_MATHML_PSEUDO_UNIT_WIDTH;
   else if (unit.EqualsLiteral("height")) aPseudoUnit = NS_MATHML_PSEUDO_UNIT_HEIGHT;
   else if (unit.EqualsLiteral("depth"))  aPseudoUnit = NS_MATHML_PSEUDO_UNIT_DEPTH;
-  else if (unit.EqualsLiteral("lspace")) aPseudoUnit = NS_MATHML_PSEUDO_UNIT_LSPACE;
   else if (!gotPercent) { // percentage can only apply to a pseudo-unit
 
     // see if the unit is a named-space
     // XXX nsnull in ParseNamedSpacedValue()? don't access mstyle?
     if (ParseNamedSpaceValue(nsnull, unit, aCSSValue)) {
       // re-scale properly, and we know that the unit of the named-space is 'em'
       floatValue *= aCSSValue.GetFloatValue();
       aCSSValue.SetFloatValue(floatValue, eCSSUnit_EM);
@@ -292,17 +290,16 @@ nsMathMLmpaddedFrame::ParseAttribute(nsS
   aSign = NS_MATHML_SIGN_INVALID;
   return PR_FALSE;
 }
 
 void
 nsMathMLmpaddedFrame::UpdateValue(PRInt32                  aSign,
                                   PRInt32                  aPseudoUnit,
                                   const nsCSSValue&        aCSSValue,
-                                  nscoord                  aLeftSpace,
                                   const nsBoundingMetrics& aBoundingMetrics,
                                   nscoord&                 aValueToUpdate) const
 {
   nsCSSUnit unit = aCSSValue.GetUnit();
   if (NS_MATHML_SIGN_INVALID != aSign && eCSSUnit_Null != unit) {
     nscoord scaler = 0, amount = 0;
 
     if (eCSSUnit_Percent == unit || eCSSUnit_Number == unit) {
@@ -314,20 +311,16 @@ nsMathMLmpaddedFrame::UpdateValue(PRInt3
         case NS_MATHML_PSEUDO_UNIT_HEIGHT:
              scaler = aBoundingMetrics.ascent;
              break;
 
         case NS_MATHML_PSEUDO_UNIT_DEPTH:
              scaler = aBoundingMetrics.descent;
              break;
 
-        case NS_MATHML_PSEUDO_UNIT_LSPACE:
-             scaler = aLeftSpace;
-             break;
-
         default:
           // if we ever reach here, it would mean something is wrong 
           // somewhere with the setup and/or the caller
           NS_ERROR("Unexpected Pseudo Unit");
           return;
       }
     }
 
@@ -410,35 +403,36 @@ nsMathMLmpaddedFrame::Place(nsRenderingC
   nscoord width  = mBoundingMetrics.width;
 
   PRInt32 pseudoUnit;
 
   // update width
   pseudoUnit = (mWidthPseudoUnit == NS_MATHML_PSEUDO_UNIT_ITSELF)
              ? NS_MATHML_PSEUDO_UNIT_WIDTH : mWidthPseudoUnit;
   UpdateValue(mWidthSign, pseudoUnit, mWidth,
-              lspace, mBoundingMetrics, width);
+              mBoundingMetrics, width);
 
   // update "height" (this is the ascent in the terminology of the REC)
   pseudoUnit = (mHeightPseudoUnit == NS_MATHML_PSEUDO_UNIT_ITSELF)
              ? NS_MATHML_PSEUDO_UNIT_HEIGHT : mHeightPseudoUnit;
   UpdateValue(mHeightSign, pseudoUnit, mHeight,
-              lspace, mBoundingMetrics, height);
+              mBoundingMetrics, height);
 
   // update "depth" (this is the descent in the terminology of the REC)
   pseudoUnit = (mDepthPseudoUnit == NS_MATHML_PSEUDO_UNIT_ITSELF)
              ? NS_MATHML_PSEUDO_UNIT_DEPTH : mDepthPseudoUnit;
   UpdateValue(mDepthSign, pseudoUnit, mDepth,
-              lspace, mBoundingMetrics, depth);
+              mBoundingMetrics, depth);
 
-  // update lspace -- should be *last* because lspace is overwritten!!
-  pseudoUnit = (mLeftSpacePseudoUnit == NS_MATHML_PSEUDO_UNIT_ITSELF)
-             ? NS_MATHML_PSEUDO_UNIT_LSPACE : mLeftSpacePseudoUnit;
-  UpdateValue(mLeftSpaceSign, pseudoUnit, mLeftSpace,
-              lspace, mBoundingMetrics, lspace);
+  // update lspace
+  if (mLeftSpacePseudoUnit != NS_MATHML_PSEUDO_UNIT_ITSELF) {
+    pseudoUnit = mLeftSpacePseudoUnit;
+    UpdateValue(mLeftSpaceSign, pseudoUnit, mLeftSpace,
+                mBoundingMetrics, lspace);
+  }
 
   // do the padding now that we have everything
   // The idea here is to maintain the invariant that <mpadded>...</mpadded> (i.e.,
   // with no attributes) looks the same as <mrow>...</mrow>. But when there are
   // attributes, tweak our metrics and move children to achieve the desired visual
   // effects.
 
   if (mLeftSpaceSign != NS_MATHML_SIGN_INVALID) { // there was padding on the left
diff --git a/layout/mathml/nsMathMLmpaddedFrame.h b/layout/mathml/nsMathMLmpaddedFrame.h
--- a/layout/mathml/nsMathMLmpaddedFrame.h
+++ b/layout/mathml/nsMathMLmpaddedFrame.h
@@ -104,14 +104,13 @@ private:
                  PRInt32&    aSign,
                  nsCSSValue& aCSSValue,
                  PRInt32&    aPseudoUnit);
 
   void
   UpdateValue(PRInt32                  aSign,
               PRInt32                  aPseudoUnit,
               const nsCSSValue&        aCSSValue,
-              nscoord                  aLeftSpace,
               const nsBoundingMetrics& aBoundingMetrics,
               nscoord&                 aValueToUpdate) const;
 };
 
 #endif /* nsMathMLmpaddedFrame_h___ */
